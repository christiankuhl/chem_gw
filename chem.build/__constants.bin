StoppableThread.__init__set‚Üê [Q]/[A][R]/[F] ‚Üírunmoleculesmainset_alpha/home/christian/python/chem_gw/chem.pyStoppableThread.pauseGeschwindigkeitArialnotifyK_ESCAPEN[P] zum Starten/Stoppen, [ESC] zum Beendeninstance[W]/[S] ‚Üíright_speedset_repeatLEFT_CONCENTRATIONsleepnowaitChemisches GleichgewichtK_duniformclockStoppableThread.stoppedKEYDOWNöôôôôôπ?Substance.__init__runningright_threadconcentrationscreen_pausedreleaseClockRIGHT_SPEEDcatchConditionarialrandombg.pngleft_textloadconvertspeed_descrLEFT_SPEEDarial_boldSubstance.throwK_qSubstance.catchconcentration_descr‚Üê [E]/[D]K_atickAnzahl √ÑpfelotherK_sdarkenright_textleft_speedpause_textapple.gifStoppableThread.runK_rleft_threadacquireresumeset_visiblerandintset_caption_stop_eventStoppableThread.resumeSubstance.blitset_modeLockpostK_wK_fis_set<module>K_eQUITK_pfillEvent__annotations__com.sun.jna/Library/Application SupportAppDirs.user_cache_dirShlObjuser_data_dirSoftware\Microsoft\Windows\CurrentVersion\Explorer\Shell FoldersMAX_PATHcsidl_nameReturn full path to the user-specific cache dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "opinion" (boolean) can be False to disable the appending of
            "Cache" to the base app data dir for Windows. See
            discussion below.

    Typical user cache directories are:
        Mac OS X:   ~/Library/Caches/<AppName>
        Unix:       ~/.cache/<AppName> (XDG default)
        Win XP:     C:\Documents and Settings\<username>\Local Settings\Application Data\<AppAuthor>\<AppName>\Cache
        Vista:      C:\Users\<username>\AppData\Local\<AppAuthor>\<AppName>\Cache

    On Windows the only suggestion in the MSDN docs is that local settings go in
    the `CSIDL_LOCAL_APPDATA` directory. This is identical to the non-roaming
    app data dir (the default returned by `user_data_dir` above). Apps typically
    put cache data somewhere *under* the given dir here. Some examples:
        ...\Mozilla\Firefox\Profiles\<ProfileName>\Cache
        ...\Acme\SuperApp\Cache\1.0
    OPINION: This function appends "Cache" to the `CSIDL_LOCAL_APPDATA` value.
    This can be disabled with the `opinion=False` option.
    Return full path to the user-specific log dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "opinion" (boolean) can be False to disable the appending of
            "Logs" to the base app data dir for Windows, and "log" to the
            base cache dir for Unix. See discussion below.

    Typical user log directories are:
        Mac OS X:   ~/Library/Logs/<AppName>
        Unix:       ~/.cache/<AppName>/log  # or under $XDG_CACHE_HOME if defined
        Win XP:     C:\Documents and Settings\<username>\Local Settings\Application Data\<AppAuthor>\<AppName>\Logs
        Vista:      C:\Users\<username>\AppData\Local\<AppAuthor>\<AppName>\Logs

    On Windows the only suggestion in the MSDN docs is that local settings
    go in the `CSIDL_LOCAL_APPDATA` directory. (Note: I'm interested in
    examples of what some windows apps use for a logs dir.)

    OPINION: This function appends "Logs" to the `CSIDL_LOCAL_APPDATA`
    value for Windows and appends "log" to the user cache dir for Unix.
    This can be disabled with the `opinion=False` option.
    appdirswin32comReturn full path to the user-specific config dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "roaming" (boolean, default False) can be set True to use the Windows
            roaming appdata directory. That means that for users on a Windows
            network setup for roaming profiles, this user data will be
            sync'd on login. See
            <http://technet.microsoft.com/en-us/library/cc766489(WS.10).aspx>
            for a discussion of issues.

    Typical user config directories are:
        Mac OS X:               same as user_data_dir
        Unix:                   ~/.config/<AppName>     # or in $XDG_CONFIG_HOME, if defined
        Win *:                  same as user_data_dir

    For Unix, we follow the XDG spec and support $XDG_CONFIG_HOME.
    That means, by default "~/.config/<AppName>".
    Kernel32multipathshell_folder_namectypescsidl_consthas_high_charbuf2~/Library/Application Support/AppDirs.user_log_dir/usr/local/share/usr/sharewindllexpanduser_get_win_folder_with_ctypesAppDirs.user_config_dirCSIDL_APPDATACSIDL_COMMON_APPDATACommon AppDataLocal AppDatajava_verConvenience wrapper for getting application dirs.buf_sizekerneltoString<module appdirs>Utilities for determining application-specific dirs.

See <http://github.com/ActiveState/appdirs> for details and usage.
_get_win_folder_with_pywin32Return full path to the user-specific data dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "roaming" (boolean, default False) can be set True to use the Windows
            roaming appdata directory. That means that for users on a Windows
            network setup for roaming profiles, this user data will be
            sync'd on login. See
            <http://technet.microsoft.com/en-us/library/cc766489(WS.10).aspx>
            for a discussion of issues.

    Typical user data directories are:
        Mac OS X:               ~/Library/Application Support/<AppName>
        Unix:                   ~/.local/share/<AppName>    # or in $XDG_DATA_HOME, if defined
        Win XP (not roaming):   C:\Documents and Settings\<username>\Application Data\<AppAuthor>\<AppName>
        Win XP (roaming):       C:\Documents and Settings\<username>\Local Settings\Application Data\<AppAuthor>\<AppName>
        Win 7  (not roaming):   C:\Users\<username>\AppData\Local\<AppAuthor>\<AppName>
        Win 7  (roaming):       C:\Users\<username>\AppData\Roaming\<AppAuthor>\<AppName>

    For Unix, we follow the XDG spec and support $XDG_DATA_HOME.
    That means, by default "~/.local/share/<AppName>".
    XDG_CONFIG_DIRS/etc/xdgGetShortPathNameWgetenv/usr/lib/python3/dist-packages/appdirs.pyReturn full path to the user-shared data dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "multipath" is an optional parameter only applicable to *nix
            which indicates that the entire list of config dirs should be
            returned. By default, the first item from XDG_CONFIG_DIRS is
            returned, or '/etc/xdg/<AppName>', if XDG_CONFIG_DIRS is not set

    Typical site config directories are:
        Mac OS X:   same as site_data_dir
        Unix:       /etc/xdg/<AppName> or $XDG_CONFIG_DIRS[i]/<AppName> for each value in
                    $XDG_CONFIG_DIRS
        Win *:      same as site_data_dir
        Vista:      (Fail! "C:\ProgramData" is a hidden *system* directory on Vista.)

    For Unix, this is using the $XDG_CONFIG_DIRS[0] default, if multipath=False

    WARNING: Do not use this on Windows. See the Vista-Fail note above for why.
    tostringReturn full path to the user-shared data dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "multipath" is an optional parameter only applicable to *nix
            which indicates that the entire list of data dirs should be
            returned. By default, the first item from XDG_DATA_DIRS is
            returned, or '/usr/local/share/<AppName>',
            if XDG_DATA_DIRS is not set

    Typical site data directories are:
        Mac OS X:   /Library/Application Support/<AppName>
        Unix:       /usr/local/share/<AppName> or /usr/share/<AppName>
        Win XP:     C:\Documents and Settings\All Users\Application Data\<AppAuthor>\<AppName>
        Vista:      (Fail! "C:\ProgramData" is a hidden *system* directory on Vista.)
        Win 7:      C:\ProgramData\<AppAuthor>\<AppName>   # Hidden, but writeable on Win 7.

    For Unix, this is using the $XDG_DATA_DIRS[0] default.

    WARNING: Do not use this on Windows. See the Vista-Fail note above for why.
    linux2site_config_dirshellconwin32apiAppDirs.__init__pathlistcom.sun.jna.platform_get_win_folder_from_registrykernel32WinDefShell32SHGetFolderPathAppDirs.user_state_dir~/.local/statewin32com.shellcreate_unicode_bufferSHGetFolderPathWAppDirs.site_config_dirzeros__version_info__INSTANCEThis is a fallback technique at best. I'm not sure if using the
    registry for this guarantees us the correct answer for all CSIDL_*
    names.
    HKEY_CURRENT_USERReturn full path to the user-specific state dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "roaming" (boolean, default False) can be set True to use the Windows
            roaming appdata directory. That means that for users on a Windows
            network setup for roaming profiles, this user data will be
            sync'd on login. See
            <http://technet.microsoft.com/en-us/library/cc766489(WS.10).aspx>
            for a discussion of issues.

    Typical user state directories are:
        Mac OS X:  same as user_data_dir
        Unix:      ~/.local/state/<AppName>   # or in $XDG_STATE_HOME, if defined
        Win *:     same as user_data_dir

    For Unix, we follow this Debian proposal <https://wiki.debian.org/XDGBaseDirectorySpecification#state>
    to extend the XDG spec and support $XDG_STATE_HOME.

    That means, by default "~/.local/state/<AppName>".
    NativeAppDirs.site_data_dirshell32SHGFP_TYPE_CURRENTpathsep_get_win_folder_with_jnaAppDirs.user_data_diros_namewarnvarpygame.mathfasteventencode_stringMissingPygameModulepygame.surfacepygame.keySOFTWARE\Microsoft\DirectXpy_extscrappy_to_removeMissingModule.__nonzero__.pyc.pyopygame.moviebufferproxypygame.drawpygame.rectpackager_imports%s %s: %sinstall_pathextension_extext_to_removeextension_filespy_filesunwanted_filesask_removemessagewarnings__color_reducee32
Leaving them there might break pygame.  Cheers!

_NOT_IMPLEMENTED_BufferProxyimageextreasonurgent%s module not available
(%s)directxHello from the pygame community. https://www.pygame.org/contribute.html__rect_constructorpygame %sdx_version_stringMissingModule.__init__surflock%s%spygame.joystickpygame.fasteventOverlayMissingModule.__getattr__SDL_VIDEODRIVERsome additional imports that py2app/py2exe will want to seepygame._viewexcpygame.pixelarraycamerapygame.mouseClose/usr/local/lib/python3.6/dist-packages/pygame/__init__.pypygame.imageext<module pygame>sndarraywarn_unwanted_filesRuntimeWarningatexitOpenGLthreadswarn about unneeded old filespygame.overlaypygame.constantsMissing_FunctionSDL_VIDEO_X11_WMCLASSDetected old file(s).  Please remove the old files:
pygame.surflockpygame.mixer_music__rect_reduceminor_dx_versionMaskVector3_import_failedpygame.basePYGAME_FREETYPEpygame.colorPygame is a set of Python modules designed for writing games.
It is written on top of the excellent SDL library. This allows you
to create fully featured games and multimedia programs in the python
language. The package is highly portable, with games running on
Windows, MacOS, OS X, BeOS, FreeBSD, IRIX, and Linux.pygame.scrappygame.rwobjectcursorspygame.cdromsurfarraysysfontVector2pygame.bufferproxypixelcopyPixelArray__color_constructor;MissingModule.warnftfontOpenGL.GLpygame_dirpygame.displaypygame.eventDISPLAY/usr/local/lib/python3.6/dist-packages/pygame/_numpysndarray.pypygame._numpysndarray.samples(Sound): return array

    Reference Sound samples into an array.

    Creates a new array that directly references the samples in a Sound
    object. Modifying the array will change the Sound. The array will
    always be in the format returned from pygame.mixer.get_init().
    pygame._numpysndarray.make_sound(array): return Sound

    Convert an array into a Sound object.
    
    Create a new playable Sound object from an array. The mixer module
    must be initialized and the array format must be similar to the mixer
    audio format.
    pygame module for accessing sound sample data using numpy

Functions to convert between numpy arrays and Sound objects. This module
will only be available when pygame can use the external numpy package.

Sound data is made of thousands of samples per second, and each sample
is the amplitude of the wave at a particular moment in time. For
example, in 22-kHz format, element number 5 of the array is the
amplitude of the wave after 5/22000 seconds.

Each sample is an 8-bit or 16-bit integer, depending on the data format.
A stereo sound file has two values per sample, while a mono sound file
only has one.
<module pygame._numpysndarray>pygame._numpysndarray.array(Sound): return array

    Copy Sound samples into an array.

    Creates a new array for the sound data and copies the samples. The
    array will always be in the format returned from
    pygame.mixer.get_init().
    int32surface_to_arrayuint32get_bitsizepix_make_surfacepygame.numpyarray.pixels_alpha(Surface): return array

    reference pixel alphas into a 2d array

    Create a new 2D array that directly references the alpha values
    (degree of transparency) in a Surface. Any changes to the array will
    affect the pixels in the Surface. This is a fast operation since no
    data is copied.

    This can only work on 32-bit Surfaces with a per-pixel alpha value.

    The Surface this array references will remain locked for the
    lifetime of the array.
    ndimastypepygame.numpyarray.array_green(Surface): return array

    copy pixel green into a 2d array

    Copy the pixel green values from a Surface into a 2D array. This will work
    for any type of Surface format.

    This function will temporarily lock the Surface as pixels are copied
    (see the Surface.lock - lock the Surface memory for pixel access
    method).
    pygame.surfarray.pixels_blue(Surface): return array

    Reference pixel blue into a 2d array.

    Create a new 2D array that directly references the blue values
    in a Surface. Any changes to the array will affect the pixels
    in the Surface. This is a fast operation since no data is copied.

    This can only work on 24-bit or 32-bit Surfaces.

    The Surface this array references will remain locked for the
    lifetime of the array.
    float float32 float64 float96uint16array_bluepygame.numpyarray.array_red(Surface): return array

    copy pixel red into a 2d array

    Copy the pixel red values from a Surface into a 2D array. This will work
    for any type of Surface format.

    This function will temporarily lock the Surface as pixels are copied
    (see the Surface.lock - lock the Surface memory for pixel access
    method).
    type_namenumpy_emptyget_viewnumpy_ndarraynumpy_aroundarray must have at least 1 dimensionget_bytesizearray must be a 3d array of 3-value color datapygame.surfarray.pixels_red(Surface): return array

    Reference pixel red into a 2d array.

    Create a new 2D array that directly references the red values
    in a Surface. Any changes to the array will affect the pixels
    in the Surface. This is a fast operation since no data is copied.

    This can only work on 24-bit or 32-bit Surfaces.

    The Surface this array references will remain locked for the
    lifetime of the array.
    pygame.numpyarray.array_alpha(Surface): return array

    copy pixel alphas into a 2d array

    Copy the pixel alpha values (degree of transparency) from a Surface
    into a 2D array. This will work for any type of Surface
    format. Surfaces without a pixel alpha will return an array with all
    opaque values.

    This function will temporarily lock the Surface as pixels are copied
    (see the Surface.lock - lock the Surface memory for pixel access
    method).
    pix_map_arrayunsupport bit depth for 2D reference arraypygame.numpyarray.pixels2d(Surface): return array

    reference pixels into a 2d array
    
    Create a new 2D array that directly references the pixel values in a
    Surface. Any changes to the array will affect the pixels in the
    Surface. This is a fast operation since no data is copied.

    Pixels from a 24-bit Surface cannot be referenced, but all other
    Surface bit depths can.

    The Surface this references will remain locked for the lifetime of
    the array (see the Surface.lock - lock the Surface memory for pixel
    access method).
    numpy_arraypygame.numpyarray.array_colorkey(Surface): return array

    copy the colorkey values into a 2d array

    Create a new array with the colorkey transparency value from each
    pixel. If the pixel matches the colorkey it will be fully
    tranparent; otherwise it will be fully opaque.

    This will work on any type of Surface format. If the image has no
    colorkey a solid opaque array will be returned.

    This function will temporarily lock the Surface as pixels are
    copied.
    /usr/local/lib/python3.6/dist-packages/pygame/_numpysurfarray.py<module pygame._numpysurfarray>numpy_floatsshapepygame module for accessing surface pixel data using numpy

Functions to convert pixel data between pygame Surfaces and Numpy
arrays. This module will only be available when pygame can use the
external Numpy package.

Note, that numpyarray is an optional module. It requires that Numpy is
installed to be used. If not installed, an exception will be raised when
it is used. eg. ImportError: no module named numpy

Every pixel is stored as a single integer value to represent the red,
green, and blue colors. The 8bit images use a value that looks into a
colormap. Pixels with higher depth use a bit packing process to place
three or four values into a single number.

The Numpy arrays are indexed by the X axis first, followed by the Y
axis. Arrays that treat the pixels as a single integer are referred to
as 2D arrays. This module can also separate the red, green, and blue
color values into separate indices. These types of arrays are referred
to as 3D arrays, and the last index is 0 for red, 1 for green, and 2 for
blue.

In contrast to Numeric Numpy does use unsigned 16bit integers, images
with 16bit data will be treated as unsigned integers.
bppdtypepygame.numpyarray.map_array(Surface, array3d): return array2d

    map a 3d array into a 2d array

    Convert a 3D array into a 2D array. This will use the given Surface
    format to control the conversion.

    Note: arrays do not need to be 3D, as long as the minor axis has
    three elements giving the component colours, any array shape can be
    used (for example, a single colour can be mapped, or an array of
    colours). The array shape is limited to eleven dimensions maximum,
    including the three element minor axis.
    bit depth %i unsupported for 2D reference arraypygame.numpyarray.array3d(Surface): return array

    copy pixels into a 3d array

    Copy the pixels from a Surface into a 3D array. The bit depth of the
    surface will control the size of the integer values, and will work
    for any type of pixel format.

    This function will temporarily lock the Surface as pixels are copied
    (see the Surface.lock - lock the Surface memory for pixel access
    method).
    _pixel2d_bitdepthsuint8pygame.numpyarray.array2d(Surface): return array

    copy pixels into a 2d array

    Copy the pixels from a Surface into a 2D array. The bit depth of the
    surface will control the size of the integer values, and will work
    for any type of pixel format.

    This function will temporarily lock the Surface as pixels are copied
    (see the Surface.lock - lock the Surface memory for pixel access
    method).
    numpy_uint32pygame.surfarray.pixels_green(Surface): return array

    Reference pixel green into a 2d array.

    Create a new 2D array that directly references the green values
    in a Surface. Any changes to the array will affect the pixels
    in the Surface. This is a fast operation since no data is copied.

    This can only work on 24-bit or 32-bit Surfaces.

    The Surface this array references will remain locked for the
    lifetime of the array.
    unsupported bit depth %i for 2D arraypygame.numpyarray.pixels3d(Surface): return array

    reference pixels into a 3d array

    Create a new 3D array that directly references the pixel values in a
    Surface. Any changes to the array will affect the pixels in the
    Surface. This is a fast operation since no data is copied.

    This will only work on Surfaces that have 24-bit or 32-bit
    formats. Lower pixel formats cannot be referenced.

    The Surface this references will remain locked for the lifetime of
    the array (see the Surface.lock - lock the Surface memory for pixel
    access method).
    pygame.numpyarray.array_blue(Surface): return array

    copy pixel blue into a 2d array

    Copy the pixel blue values from a Surface into a 2D array. This will work
    for any type of Surface format.

    This function will temporarily lock the Surface as pixels are copied
    (see the Surface.lock - lock the Surface memory for pixel access
    method).
    <module pygame.colordict>/usr/local/lib/python3.6/dist-packages/pygame/colordict.pyTHECOLORS˚zgray17)È+   r   r   Èˇ   zgold)r   È◊   È    r   zgray10)È   r   r   r   zyellow)r   r   r   r   zgray11)È   r   r   r   zgrey61)Èú   r   r   r   zgrey60)Èô   r   r   r   zdarkseagreen)Èè   Èº   r	   r   zgrey62)Èû   r   r   r   zgrey65)È¶   r   r   r   zgray12)È   r   r   r   zgrey67)È´   r   r   r   zgrey66)È®   r   r   r   zgrey69)È∞   r   r   r   zgray21)È6   r   r   r   zlightsalmon4)Èã   ÈW   ÈB   r   zlightsalmon2)ÈÓ   Èï   Èr   r   zlightsalmon3)ÈÕ   ÈÅ   Èb   r   zlightsalmon1)r   È†   Èz   r   zgray32)ÈR   r   r   r   zgreen4)r   r   r   r   zgray30)ÈM   r   r   r   zgray31)ÈO   r   r   r   zgreen1)r   r   r   r   zgray37)È^   r    r    r   zgreen3)r   r   r   r   zgreen2)r   r   r   r   zdarkslategray1)Èó   r   r   r   zdarkslategray2)Èç   r   r   r   zdarkslategray3)Èy   r   r   r   zaquamarine1)È   r   È‘   r   zaquamarine3)Èf   r   È™   r   zaquamarine2)Èv   r   È∆   r   z
papayawhip)r   ÈÔ   È’   r   zblack)r   r   r   r   zdarkorange3)r   r&   r   r   zoldlace)È˝   Èı   ÈÊ   r   zlightgoldenrod4)r   r   ÈL   r   zgray90)ÈÂ   r0   r0   r   zorchid1)r   ÈÉ   È˙   r   zorchid2)r   r   ÈÈ   r   zorchid3)r   Èi   È…   r   zgrey68)È≠   r6   r6   r   zbrown)È•   È*   r8   r   zpurple2)Èë   È,   r   r   zgray80)ÈÃ   r;   r;   r   zantiquewhite3)r   È¿   r   r   zantiquewhite2)r   Èﬂ   r;   r   zantiquewhite1)r   r*   È€   r   zpalevioletred3)r   Èh   Èâ   r   zhotpink)r   r4   È¥   r   z	lightcyan)È‡   r   r   r   zcoral3)r   È[   ÈE   r   zgray8)È   rE   rE   r   zgray9)È   rF   rF   r   zgrey32)r   r   r   r   zbisque4)r   È}   Èk   r   zcyan)r   r   r   r   zgray0)r   r   r   r   zgray1)È   rI   rI   r   zgray6)È   rJ   rJ   r   zbisque1)r   È‰   Èƒ   r   zbisque2)r   r+   È∑   r   zbisque3)r   rM   r   r   zskyblue)Èá   ÈŒ   ÈÎ   r   zgray)Èæ   rQ   rQ   r   zdarkturquoise)r   rO   È—   r   z
rosybrown4)r   r4   r4   r   zdeepskyblue3)r   Èö   r   r   zgrey63)È°   rT   rT   r   z
indianred1)r   Èj   rU   r   zgrey78)È«   rV   rV   r   z	lightpink)r   È∂   È¡   r   zgray88)rB   rB   rB   r   zgray22)È8   rY   rY   r   zred)r   r   r   r   zgrey11)r   r   r   r   zlemonchiffon3)r   r5   r7   r   zlemonchiffon2)r   r3   Èø   r   zlemonchiffon1)r   r2   r   r   z
indianred3)r   ÈU   r[   r   z
violetred1)r   È>   Èñ   r   zplum2)r   ÈÆ   r   r   zplum1)r   Èª   r   r   zlemonchiffon4)r   r@   Èp   r   zgray99)È¸   ra   ra   r   zgrey13)È!   rb   rb   r   zgrey55)Èå   rc   rc   r   zdarkcyan)r   r   r   r   z
chocolate4)r   rD   È   r   zlightgoldenrodyellow)r2   r2   È“   r   zgray54)Èä   rf   rf   r   zlavender)r.   r.   r2   r   zchartreuse3)r&   r   r   r   zchartreuse2)r(   r   r   r   zchartreuse1)r$   r   r   r   zgrey48)r   r   r   r   zgrey16)È)   rg   rg   r   zthistle)Èÿ   rZ   rh   r   zchartreuse4)rD   r   r   r   zdarkorchid4)r?   È"   r   r   zgrey42)rH   rH   rH   r   zgrey41)r4   r4   r4   r   zgrey17)r   r   r   r   zdimgrey)r4   r4   r4   r   zdodgerblue4)È   ÈN   r   r   zdarkorchid2)È≤   È:   r   r   zdarkorchid3)rS   È2   r   r   zblue)r   r   r   r   z
rosybrown2)r   rA   rA   r   zhoneydew)È   r   ro   r   zgray18)È.   rp   rp   r   zcornflowerblue)Èd   r   ÈÌ   r   zgrey91)ÈË   rs   rs   r   zgray14)È$   rt   rt   r   zgray15)È&   ru   ru   r   zgray16)rg   rg   rg   r   zmaroon4)r   r   r   r   zmaroon3)r   rg   Èê   r   zmaroon2)r   È0   Èß   r   zmaroon1)r   È4   È≥   r   zgray13)rb   rb   rb   r   zgold3)r   r6   r   r   zgold2)r   r5   r   r   zgold1)r   r   r   r   zgrey79)r5   r5   r5   r   zpalevioletred1)r   ÈÇ   r   r   zpalevioletred2)r   r#   Èü   r   zgold4)r   Èu   r   r   zgray41)r4   r4   r4   r   zgray84)È÷   r~   r~   r   zmediumpurple)Èì   r`   r>   r   z
rosybrown1)r   rX   rX   r   z
lightblue2)rl   r=   r   r   z
lightblue3)rS   r<   r   r   zgrey57)r9   r9   r9   r   z
lightblue1)rZ   r*   r   r   z
lightblue4)r?   r1   r   r   zgray33)ÈT   rÄ   rÄ   r   zskyblue4)ÈJ   r`   r   r   zgrey97)È˜   rÇ   rÇ   r   zskyblue1)rN   rO   r   r   zgray27)rD   rD   rD   r   zskyblue3)Èl   r   r   r   zskyblue2)È~   r<   r   r   zlavenderblush1)r   ro   r-   r   zdarkgrey)È©   rÖ   rÖ   r   zlavenderblush3)r   rX   È≈   r   zdarkslategrey)È/   r   r   r   zlavenderblush4)r   r1   ÈÜ   r   z	deeppink4)r   È
   ÈP   r   zgrey99)ra   ra   ra   r   zgray36)È\   rã   rã   r   zcoral4)r   r\   rá   r   zmagenta3)r   r   r   r   zlightskyblue4)È`   È{   r   r   zmediumturquoise)ÈH   rR   r;   r   zgray34)r   r   r   r   zfloralwhite)r   r2   ro   r   zgrey39)Èc   rè   rè   r   zgrey36)rã   rã   rã   r   zgrey37)r    r    r    r   zgrey34)r   r   r   r   zgray26)r   r   r   r   z
royalblue2)ÈC   Èn   r   r   zgrey33)rÄ   rÄ   rÄ   r   z
turquoise1)r   r-   r   r   zgrey31)r   r   r   r   z
steelblue1)rè   È∏   r   r   zsienna4)r   ÈG   ru   r   z
steelblue3)r   Èî   r   r   zlavenderblush2)r   rB   r0   r   zsienna1)r   r{   rì   r   z
steelblue4)r   rq   r   r   zsienna3)r   r?   È9   r   zaquamarine4)rD   r   Èt   r   zlightyellow1)r   r   rB   r   zlightyellow2)r   r   rR   r   zlightsteelblue)r   rL   Èﬁ   r   zlightyellow4)r   r   r   r   zmagenta2)r   r   r   r   zlightskyblue1)r   È‚   r   r   zlightgoldenrod)r   È›   r{   r   zmagenta4)r   r   r   r   zgray87)ró   ró   ró   r   zgreenyellow)r6   r   rá   r   znavajowhite4)r   r#   r    r   zdarkslategray4)r   r   r   r   z	olivedrab)rH   Èé   È#   r   znavajowhite1)r   ró   r6   r   znavajowhite2)r   Èœ   rT   r   zdarkgoldenrod1)r   Èπ   rJ   r   zsienna)r   r   È-   r   zblue1)r   r   r   r   zyellow1)r   r   r   r   zgray61)r   r   r   r   zmagenta1)r   r   r   r   zgrey52)ÈÖ   rü   rü   r   z
orangered4)r   È%   r   r   z	palegreen)Èò   È˚   r°   r   zgray86)r>   r>   r>   r   zgrey80)r;   r;   r;   r   zseashell)r   r-   r   r   z	royalblue)ÈA   r4   È·   r   z
firebrick3)r   ru   ru   r   zblue4)r   r   r   r   zperu)r   rü   È?   r   zgray60)r   r   r   r   z
aquamarine)r$   r   r%   r   zgrey53)rN   rN   rN   r   ztan4)r   ÈZ   r   r   zdarkgoldenrod)rí   rà   È   r   ztan2)r   rS   ÈI   r   ztan1)r   r7   r   r   zdarkslategray)rá   r   r   r   z
royalblue3)rm   È_   r   r   zred2)r   r   r   r   zred1)r   r   r   r   z
dodgerblue)È   rv   r   r   z
violetred4)r   ri   r   r   zlightyellow)r   r   rB   r   zpaleturquoise1)r_   r   r   r   z
firebrick2)r   r:   r:   r   zmediumaquamarine)r&   r   r'   r   zlemonchiffon)r   r2   r   r   z	chocolate)re   r4   r™   r   zorchid4)r   rì   r@   r   zmaroon)r   rw   rå   r   zgray38)Èa   r´   r´   r   zdarkorange4)r   rD   r   r   z	mintcream)r-   r   r2   r   zdarkorange1)r   r$   r   r   zantiquewhite)r2   rP   r   r   zdarkorange2)r   r(   r   r   zgrey18)rp   rp   rp   r   zgrey19)rw   rw   rw   r   zgrey38)r´   r´   r´   r   zmoccasin)r   rK   Èµ   r   zgrey10)r   r   r   r   z
chocolate1)r   r$   rt   r   z
chocolate2)r   r(   rb   r   z
chocolate3)r   r&   È   r   zsaddlebrown)r   rD   rd   r   zgrey15)ru   ru   ru   r   zdarkslateblue)ré   È=   r   r   zlightskyblue)rN   rO   r2   r   zgray69)r   r   r   r   zgray68)r6   r6   r6   r   zdeeppink)r   rE   r   r   zgray65)r   r   r   r   zgray64)È£   rØ   rØ   r   zgray67)r   r   r   r   zgray66)r   r   r   r   zgray25)È@   r∞   r∞   r   zcoral)r   r$   rä   r   zgray63)rT   rT   rT   r   zgray62)r   r   r   r   z
goldenrod4)r   r4   rE   r   zgrey35)ÈY   r±   r±   r   zgray89)È„   r≤   r≤   r   z
goldenrod1)r   rX   r†   r   z
goldenrod2)r   rA   ri   r   z
goldenrod3)r   Èõ   r≠   r   zspringgreen1)r   r   r$   r   zspringgreen2)r   r   r(   r   zspringgreen3)r   r   r&   r   zspringgreen4)r   r   rD   r   z
mistyrose1)r   rK   r§   r   z
sandybrown)ÈÙ   È§   rå   r   zgrey30)r   r   r   r   z	seashell2)r   r0   ró   r   z	seashell3)r   rÜ   rZ   r   ztan)re   rA   rc   r   z	seashell1)r   r-   r   r   z
mistyrose3)r   rM   r¨   r   zmagenta)r   r   r   r   zpink)r   r<   ÈÀ   r   zivory2)r   r   rB   r   zivory1)r   r   ro   r   z
lightcyan2)rR   r   r   r   zmediumseagreen)È<   rz   Èq   r   zivory4)r   r   r1   r   z
darkorange)r   rc   r   r   z
powderblue)r   rB   r.   r   zdodgerblue1)r™   rv   r   r   zgray95)ÈÚ   rπ   rπ   r   z
firebrick1)r   rw   rw   r   zgray7)È   r∫   r∫   r   z
mistyrose4)r   rG   rç   r   ztomato)r   rè   rì   r   z
indianred2)r   rè   rè   r   z
steelblue2)rã   È¨   r   r   zgray100)r   r   r   r   z	seashell4)r   rà   r{   r   zgrey89)r≤   r≤   r≤   r   zgrey88)rB   rB   rB   r   zgrey87)ró   ró   ró   r   zgrey86)r>   r>   r>   r   zgrey85)ÈŸ   rº   rº   r   zgrey84)r~   r~   r~   r   zmidnightblue)È   rΩ   r`   r   zgrey82)rR   rR   rR   r   zgrey81)rú   rú   rú   r   zyellow3)r   r   r   r   zivory3)r   r   rX   r   zgrey22)rY   rY   rY   r   zgray85)rº   rº   rº   r   z
violetred3)r   rn   Èx   r   zdodgerblue2)r   rà   r   r   zgray42)rH   rH   rH   r   zsienna2)r   r#   r   r   zgrey72)rí   rí   rí   r   zgrey73)È∫   rø   rø   r   zgrey70)rz   rz   rz   r   zpalevioletred)r>   r`   r   r   zlightslategray)Èw   Èà   r   r   zgrey77)rL   rL   rL   r   zgrey74)ÈΩ   r¬   r¬   r   z
slategray1)r)   rò   r   r   zpink1)r   r¨   rÜ   r   zmediumpurple1)r   r{   r   r   zpink3)r   r9   r   r   zantiquewhite4)r   r1   ræ   r   z
lightpink1)r   r^   rù   r   z	honeydew2)rB   r   rB   r   zkhaki4)r   rà   rk   r   zdarkolivegreen4)rë   r   rÆ   r   zgray45)Ès   r√   r√   r   z
slategray3)r|   rW   r   r   zdarkolivegreen1)È    r   r`   r   zkhaki1)r   Èˆ   r	   r   zkhaki2)r   r.   rü   r   zkhaki3)r   r)   r√   r   zlavenderblush)r   ro   r-   r   z	honeydew4)r1   r   r1   r   zsalmon3)r   r`   rÄ   r   zsalmon2)r   r{   r   r   zgray92)rP   rP   rP   r   zsalmon4)r   r/   rï   r   zgray49)rG   rG   rG   r   zgray48)r   r   r   r   zlinen)r2   ro   r.   r   z
burlywood1)r   È”   r≥   r   zgreen)r   r   r   r   zgray47)ræ   ræ   ræ   r   z
blueviolet)rf   r   rò   r   zbrown2)r   È;   r«   r   zbrown3)r   È3   r»   r   z	peachpuff)r   È⁄   rù   r   zbrown4)r   rõ   rõ   r   z
firebrick4)r   r   r   r   zazure1)ro   r   r   r   zazure3)rX   r   r   r   zazure2)rB   r   r   r   zazure4)r1   r   r   r   ztomato4)r   r   ru   r   zorange4)r   r¶   r   r   z	firebrick)rl   ri   ri   r   z	indianred)r   rã   rã   r   zorange1)r   r7   r   r   zorange3)r   rü   r   r   zorange2)r   rS   r   r   zdarkolivegreen)r[   rH   rá   r   zgray2)È   r    r    r   z	slategrey)r`   ÈÄ   rv   r   zgray81)rú   rú   rú   r   zdarkred)r   r   r   r   zgray3)È   rÃ   rÃ   r   zlightsteelblue1)rƒ   r§   r   r   zlightsteelblue2)r
   re   r   r   zlightsteelblue3)È¢   r¨   r   r   zlightsteelblue4)rë   rç   r   r   ztomato3)r   r   rï   r   zgray43)rë   rë   rë   r   zdarkgoldenrod4)r   Èe   rÃ   r   zgrey50)r$   r$   r$   r   zyellow4)r   r   r   r   zmediumorchid)rø   r[   r∆   r   zyellow2)r   r   r   r   zdarkgoldenrod2)r   r6   È   r   zdarkgoldenrod3)r   r   È   r   z
chartreuse)r$   r   r   r   z
mediumblue)r   r   r   r   zgray4)râ   râ   râ   r   zspringgreen)r   r   r$   r   zorange)r   r7   r   r   zgray5)È   r—   r—   r   zlightsalmon)r   r   r   r   zgray19)rw   rw   rw   r   z	turquoise)r∞   rB   È–   r   zlightseagreen)È    rl   r'   r   zgrey8)rE   rE   rE   r   zgrey9)rF   rF   rF   r   zgrey6)rJ   rJ   rJ   r   zgrey7)r∫   r∫   r∫   r   zgrey4)râ   râ   râ   r   zgrey5)r—   r—   r—   r   zgrey2)r    r    r    r   zgrey3)rÃ   rÃ   rÃ   r   zgrey0)r   r   r   r   zgrey1)rI   rI   rI   r   zgray50)r$   r$   r$   r   z	goldenrod)r…   r7   r”   r   zgrey58)rî   rî   rî   r   zgrey59)r]   r]   r]   r   zgray51)r{   r{   r{   r   zgrey54)rf   rf   rf   r   zmediumorchid4)r   È7   r   r   zgrey56)r	   r	   r	   r   znavajowhite3)r   rz   r   r   zmediumorchid1)rB   r&   r   r   zgrey51)r{   r{   r{   r   zmediumorchid3)rA   r   r   r   zmediumorchid2)rR   r©   r   r   zcyan2)r   r   r   r   zcyan3)r   r   r   r   zgray23)r«   r«   r«   r   zcyan1)r   r   r   r   z	darkgreen)r   rq   r   r   zgray24)rÆ   rÆ   rÆ   r   zcyan4)r   r   r   r   z
darkviolet)rî   r   r∆   r   z
peachpuff4)r   r¿   rŒ   r   zgray28)rì   rì   rì   r   z
slateblue4)rì   r∑   r   r   z
slateblue3)r4   r±   r   r   z
peachpuff1)r   r…   rù   r   z
peachpuff2)r   r∂   r6   r   z
peachpuff3)r   ÈØ   r   r   zgray29)rÅ   rÅ   rÅ   r   zpaleturquoise)r’   r   r   r   zdarkgray)rÖ   rÖ   rÖ   r   zgrey25)r∞   r∞   r∞   r   zdarkmagenta)r   r   r   r   zpalegoldenrod)r   rs   r'   r   zgrey64)rØ   rØ   rØ   r   zgrey12)r   r   r   r   z	deeppink3)r   rj   r(   r   zgray79)r5   r5   r5   r   zgray83)r%   r%   r%   r   z	deeppink2)r   r∫   r@   r   z
burlywood4)r   r√   r[   r   zpalevioletred4)r   rì   È]   r   z	deeppink1)r   rE   r   r   z
slateblue2)r   Èg   r   r   zgrey46)r}   r}   r}   r   z
royalblue4)È'   r∞   r   r   zyellowgreen)rS   r   rn   r   z
royalblue1)ré   r(   r   r   z
slateblue1)r1   Èo   r   r   zlightgoldenrod3)r   rQ   r`   r   zlightgoldenrod2)r   È‹   r{   r   znavy)r   r   rÀ   r   zorchid)r…   r`   r~   r   z
ghostwhite)È¯   r€   r   r   zpurple)r   r”   ro   r   z	darkkhaki)r¬   rM   rH   r   zgrey45)r√   r√   r√   r   zgray94)ro   ro   ro   r   zwheat4)r   rÑ   r&   r   zgray96)r-   r-   r-   r   zgray97)rÇ   rÇ   rÇ   r   zwheat1)r   ÈÁ   rø   r   zgray91)rs   rs   rs   r   zwheat3)r   rø   r]   r   zwheat2)r   rh   r^   r   z
indianred4)r   rm   rm   r   zcoral2)r   rU   rä   r   zcoral1)r   r   ÈV   r   z	violetred)r“   r”   rv   r   z
rosybrown3)r   r≥   r≥   r   zdeepskyblue2)r   rl   r   r   zdeepskyblue1)r   rZ   r   r   zbisque)r   rK   rL   r   zgrey49)rG   rG   rG   r   zkhaki)ro   r.   rc   r   zwheat)r-   ró   rz   r   zlightslateblue)ÈÑ   r`   r   r   zmediumpurple3)r@   r?   r   r   zgray55)rc   rc   rc   r   zdeepskyblue)r   rZ   r   r   zgray98)r2   r2   r2   r   z	steelblue)ÈF   r{   rA   r   z	aliceblue)ro   r€   r   r   zlightskyblue2)rµ   r∆   r   r   zlightskyblue3)r"   rW   r   r   zlightslategrey)r¿   r¡   r   r   zblue3)r   r   r   r   zblue2)r   r   r   r   z	gainsboro)r⁄   r⁄   r⁄   r   zgrey76)È¬   r‡   r‡   r   zpurple3)rG   ru   r   r   zplum4)r   r&   r   r   zgray56)r	   r	   r	   r   zplum3)r   r]   r   r   zplum)rô   r   rô   r   z	lightgrey)r∆   r∆   r∆   r   zmediumslateblue)rç   r?   r   r   z	mistyrose)r   rK   r§   r   z
lightcyan1)rB   r   r   r   zgrey71)r¨   r¨   r¨   r   z
darksalmon)r3   r]   r   r   zbeige)r-   r-   r⁄   r   zgrey24)rÆ   rÆ   rÆ   r   zazure)ro   r   r   r   z	honeydew1)ro   r   ro   r   z
slategray2)rù   r∆   r   r   zdodgerblue3)È   rñ   r   r   z
slategray4)rÉ   rç   r   r   zgrey27)rD   rD   rD   r   z
lightcyan3)rA   r   r   r   zcornsilk)r   r€   r⁄   r   ztomato1)r   rè   rì   r   zgray57)r9   r9   r9   r   zmediumvioletred)rV   È   rü   r   ztomato2)r   rã   r   r   zsnow4)r   r@   r@   r   zgrey75)rZ   rZ   rZ   r   zsnow2)r   r3   r3   r   zsnow3)r   r5   r5   r   zsnow1)r   r2   r2   r   zgrey23)r«   r«   r«   r   z	cornsilk3)r   È»   È±   r   z
lightcoral)ro   rÀ   rÀ   r   z	orangered)r   rD   r   r   znavajowhite)r   ró   r6   r   zmediumpurple2)r|   r#   r   r   z	slategray)r`   rÀ   rv   r   zpink2)r   rÖ   rí   r   zgrey29)rÅ   rÅ   rÅ   r   zgrey28)rì   rì   rì   r   zgray82)rR   rR   rR   r   z	burlywood)ró   rí   rN   r   zmediumpurple4)r÷   rì   r   r   zmediumspringgreen)r   r2   rS   r   zgrey26)r   r   r   r   zgrey21)r   r   r   r   zgrey20)r»   r»   r»   r   zblanchedalmond)r   rP   r   r   zpink4)r   rè   rÉ   r   zgray78)rV   rV   rV   r   ztan3)r   rü   r•   r   zgray76)r‡   r‡   r‡   r   zgray77)rL   rL   rL   r   zwhite)r   r   r   r   zgray75)rZ   rZ   rZ   r   zgray72)rí   rí   rí   r   zgray73)rø   rø   rø   r   zgray70)rz   rz   rz   r   zgray71)r¨   r¨   r¨   r   z	lightgray)r∆   r∆   r∆   r   zivory)r   r   ro   r   zgray46)r}   r}   r}   r   zgray74)r¬   r¬   r¬   r   zlightyellow3)r   r   rA   r   z
lightpink2)r   rÕ   r6   r   z
lightpink3)r   rc   r   r   zpaleturquoise4)r&   r   r   r   z
lightpink4)r   r©   rŒ   r   zpaleturquoise3)r]   r   r   r   z	seagreen4)rp   r   r   r   z	seagreen3)rê   r   rÀ   r   z	seagreen2)rk   r   rî   r   z	seagreen1)rÄ   r   r|   r   zpaleturquoise2)r^   r   r   r   zgray52)rü   rü   rü   r   z	cornsilk4)r   r¡   ræ   r   z	cornsilk2)r   rs   r   r   zdarkolivegreen3)rÕ   r   r¶   r   z	cornsilk1)r   r€   r⁄   r   z	limegreen)rn   r   rn   r   zdarkolivegreen2)r
   r   r?   r   zgrey)rQ   rQ   rQ   r   z
violetred2)r   rm   rc   r   zsalmon1)r   rc   r4   r   zgrey92)rP   rP   rP   r   zgrey93)rr   rr   rr   r   zgrey94)ro   ro   ro   r   zgrey95)rπ   rπ   rπ   r   zgrey96)r-   r-   r-   r   zgrey83)r%   r%   r%   r   zgrey98)r2   r2   r2   r   zlightgoldenrod1)r   ÈÏ   r   r   z
palegreen1)rS   r   rS   r   zred3)r   r   r   r   z
palegreen3)È|   r   rÊ   r   z
palegreen2)rv   r   rv   r   z
palegreen4)rÄ   r   rÄ   r   z	cadetblue)r©   r   r   r   zviolet)r   r{   r   r   z
mistyrose2)r   r+   re   r   z	slateblue)rU   r¶   r   r   zgrey43)rë   rë   rë   r   zgrey90)r0   r0   r0   r   zgray35)r±   r±   r±   r   z
turquoise3)r   rÜ   r   r   z
turquoise2)r   r0   r   r   z
burlywood3)r   r'   rG   r   z
burlywood2)r   rÜ   r9   r   z
lightcyan4)r   r   r   r   z	rosybrown)r
   r	   r	   r   z
turquoise4)r   rà   r   r   z
whitesmoke)r-   r-   r-   r   z	lightblue)r6   rh   r.   r   zgrey40)r&   r&   r&   r   zgray40)r&   r&   r&   r   z	honeydew3)rX   r   rX   r   zdimgray)r4   r4   r4   r   zgrey47)ræ   ræ   ræ   r   zseagreen)rp   r   r   r   zred4)r   r   r   r   zgrey14)rt   rt   rt   r   zsnow)r   r2   r2   r   zdarkorchid1)rZ   r\   r   r   zgray58)rî   rî   rî   r   zgray59)r]   r]   r]   r   z
cadetblue4)ÈS   rà   r   r   z
cadetblue3)r   rÜ   r   r   z
cadetblue2)rö   r0   r   r   z
cadetblue1)r°   r-   r   r   z
olivedrab4)r4   r   ri   r   zpurple4)r[   r   r   r   zgray20)r»   r»   r»   r   zgrey44)r`   r`   r`   r   zpurple1)r≥   rw   r   r   z
olivedrab1)r<   r   r\   r   z
olivedrab2)rz   r   rm   r   z
olivedrab3)rS   r   rn   r   z
orangered3)r   r‘   r   r   z
orangered2)r   r∞   r   r   z
orangered1)r   rD   r   r   z
darkorchid)r   rn   r;   r   zthistle3)r   r¨   r   r   zthistle2)r   re   r   r   zthistle1)r   r§   r   r   zsalmon)r2   rÀ   r   r   zgray93)rr   rr   rr   r   zthistle4)r   rç   r   r   zgray39)rè   rè   rè   r   z	lawngreen)rÊ   ra   r   r   zhotpink3)r   rå   rv   r   zhotpink2)r   rU   rx   r   zhotpink1)r   rë   rA   r   z
lightgreen)rv   r   rv   r   zhotpink4)r   rm   r   r   zdarkseagreen4)r4   r   r4   r   zdarkseagreen3)r≥   r   r≥   r   zdarkseagreen2)rA   r   rA   r   zdarkseagreen1)rX   r   rX   r   zdeepskyblue4)r   r?   r   r   zgray44)r`   r`   r`   r   znavyblue)r   r   rÀ   r   zdarkblue)r   r   r   r   zforestgreen)ri   r   ri   r   zgray53)rN   rN   rN   r   zgrey100)r   r   r   r   zbrown1)r   r∞   r∞   r   0<module pygame.compat>Python 2.x/3.x compatibility toolsPY_MINOR_VERSIONgetfilesystemencodingord_raw_input_fsencodingsurrogateescapelong_unichr_next_imap_ r'<Unicode literal>' => '<Unicode literal>' ansi_x3.4-1968filesystem_errorsrstringget_StringIO/usr/local/lib/python3.6/dist-packages/pygame/compat.py '<binary literal>' => b'<binary literal>'  r'<Unicode literal>' => u'<Unicode literal>' filesystem_encode '<binary literal>' => '<binary literal>' readlinesX....X                  ©)È   r   )È   r   ) È    r   È`   r   Èx   r   È>   r   È?   ÈÄ   È   È‡   r	   È¯   È   È˛   r   r   È   r   r   r   È   r   r   r   r   r   r   r   r   r   ) r
   r   r   r   r   r   È   r   r   r
   r   r   r   r   r	   Èˇ   r	   r   r   r   r   È¿   r   r   r   r   r   r   r   r   r   r   ©)È   r   )È   r   ) È    r   È   È¿   È   È   È   È¯   È3   È¸   È7   r   È   È˛   r   r   r   r   r   r   È?   r   r   r   È   r	   r   r   r   r   r   r   ) r   r   r   r   r   r	   r   r   r   r   r   r   Èˇ   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r	   r   r   r   r   Set of cursor resources available for use. These cursors come
in a sequence of values that are needed as the arguments for
pygame.mouse.set_cursor(). to dereference the sequence in place
and create the cursor in one step, call like this;
pygame.mouse.set_cursor(*pygame.cursors.arrow).

Here is a list of available cursors; arrow, diamond, ball,
        broken_x, tri_left, tri_right

There is also a sample string cursor named 'thickarrow_strings'.
The compile() function can convert these string cursors into cursor byte data.
bitswap©)È   r   )È   r   ) È    r   È`   È   Èp   È   È8   È   r	   r   È   È0   r   r   r   r   r   r   r   r   r
   r   r	   r   r   r	   r   r   r   r   r   r   ) È‡   r   È   È   È¯   È   È|   È>   r   r   È   Èx   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   hoty©)È   r   )È   È   ) È    r   r   È   r   È   r   È|   r   È¸   È   È¯   È   r
   È   È   r   r   r   È‡   r   r   r   È¿   r   r   r   ÈÄ   r   r   r   r   ) r   r	   r   r   r   r   r   È˛   r	   r   r   r   r   r   Èˇ   r
   r   r
   r   r   È   r   r   r   r   r   r   r   r   r   r   r   static charX...X                   ©)È   r   )È   r   ) È    r   È   r   È   ÈÄ   r   È¿   È   È‡   È   Èp   È8   r   r   r
   r   r   r
   r   r   r	   r   r   r   r   r   r   r   r   r   r   ) r   r   r   r   r   r   È   r	   È   È   È>   È¯   È|   r   r   r   r   r   r   r   r   r   r   r	   r   r   r   r   r   r   r   r      X.X      X.X         };ooo ooo fillitemX................X           X      X               XX      XX            X..X      X..X         X...XXXXXXXX...X                                     X.....X              o           X....X           ©zXX                      zXXX                     zXXXX                    zXX.XX                   zXX..XX                  zXX...XX                 zXX....XX                zXX.....XX               zXX......XX              zXX.......XX             zXX........XX            zXX........XXX           zXX......XXXXX           zXX.XXX..XX              zXXXX XX..XX             zXX   XX..XX             z     XX..XX             z      XX..XX            z      XX..XX            z       XXXX             z       XX               z                        z                        z                        XXXXXXXX                ©)È   r   )È    r   ) r   r   È@   r   È`   r   Èp   r   Èx   r   È|   r   È~   r   È   r   r	   ÈÄ   r   r   Èl   r   ÈF   r   È   r   È   r   r   r   r   r   ) r   r   È‡   r   È   r   È¯   r   È¸   r   È˛   r   Èˇ   r   r   r
   r   È¿   r   r
   r   r   ÈÔ   r   ÈO   r   È   r
   r   r
   r   r   X.....X                 X..X.X                  X.X X.X                 XX   X.X    X           X     X.X  XX                  X.XX.X                   X...X           Cursor strings are inconsistent lengthspygame.cursors.compile(strings, black, white,xor) -> data, mask
compile cursor strings into cursor data

This takes a set of strings with equal length and computes
the binary data for that cursor. The string widths must be
divisible by 8.

The black and white arguments are single letter strings that
tells which characters will represent black pixels, and which
characters represent white pixels. All other characters are
considered clear.

This returns a tuple containing the cursor data and cursor mask
data. Both these arguments are used when setting a cursor with
pygame.mouse.set_cursor().
pygame.cursors.load_xbm(cursorfile, maskfile) -> cursor_args
reads a pair of XBM files into set_cursor arguments

Arguments can either be filenames or filelike objects
with the readlines method. Not largely tested, but
should work with typical XBM files.
maskdata#definesizer_x_stringstextmarker_stringssizer_xy_stringsstatic unsigned charfilldatamaskitemhotx/usr/local/lib/python3.6/dist-packages/pygame/cursors.py©z     X          z    X.X         z   X...X        z  X.....X       z X.......X      zXXXXX.XXXXX     z    X.X         z    X.X         z    X.X         z    X.X         z    X.X         z    X.X         z    X.X         zXXXXX.XXXXX     z X.......X      z  X.....X       z   X...X        z    X.X         z     X          z                z                z                z                z                cursdatasizer_y_stringsload_xbm.<locals>.bitswapcursor string sizes must be divisible by 8 %sget_bold() -> bool
           check if text will be rendered boldpygame module for loading and rendering fonts (freetype alternative)_Font__encode_file_path_SRCALPHAget_descentFont.size_Font__get_default_resolutionsize(text) -> (width, height)
           determine the amount of space needed to render textFont.get_underlineFont.render_Surfaceunderline_adjustmentget_linesize() -> int
           get the line space of the font textset_underline(bool) -> None
           control if text is rendered with an underline<module pygame.ftfont>metrics(text) -> list
           Gets the metrics for each character in the pased string.antialiasedsave_antialiasedwas_initpygame.ftfont.SysFont(name, size, bold=False, italic=False, constructor=None) -> Font
       create a pygame Font from system font resources (freetype alternative)

       This will search the system fonts for the given font
       name. You can also enable bold or italic styles, and
       the appropriate system font will be selected if available.

       This will always return a valid Font object, and will
       fallback on the builtin pygame font if the given font
       is not found.

       Name can also be a comma separated list of names, in
       which case set of names will be searched in order. Pygame
       uses a small set of common font aliases, if the specific
       font you ask for is not available, a reasonable alternative
       may be used.

       if optional contructor is provided, it must be a function with
       signature constructor(fontpath, size, bold, italic) which returns
       a Font instance. If None, a pygame.ftfont.Font object is created.
    _ColorFont.metrics      ?/usr/local/lib/python3.6/dist-packages/pygame/ftfont.pyget_ascentFontTypeget_height() -> int
           get the height of the fontwideFont.get_descent_Font__bnullFont.get_ascentUUUUUUµ?Font.__init__      Ê?get_default_fontget_italic() -> bool
           check if the text will be rendered italicpygame._freetyperender(text, antialias, color, background=None) -> Surface
           draw text on a new SurfaceFont.set_boldget_descent() -> int
           get the descent of the fontFont.set_italickwdsA null character was found in the text\x00Font(filename, size) -> Font
       Font(object, size) -> Font
       create a new Font object from a file (freetype alternative)

       This Font type differs from font.Font in that it can render glyphs
       for Unicode code points in the supplementary planes (> 0xFFFF).
       origin__PYGAMEinit__padFont.get_boldFont.get_heightget_metricsucs4Font.set_underlineget_init() -> bool
      true if the font module is initializedstrengthget_sized_heightget_ascent() -> int
           get the ascent of the fontFont.get_linesizeFont.get_italicset_bold(bool) -> None
           enable fake rendering of bold text_Font__default_font_SysFont_was_initSysFont.<locals>.constructor_Font__unullget_sized_ascenderset_italic(bool) -> None
           enable fake rendering of italic textget_sized_descenderkerningDarwinpygame_icon.tiffsdlmain_osxInstallNSApplicationVideo_AutoInitdefault_icon_datachdir<module pygame.macosx>RunningFromBundleWithNSApplicationCalled from the base.c just before display module is initialized./usr/local/lib/python3.6/dist-packages/pygame/macosx.pypackage_of_requirementresource_name
    Acquire a readable object for a given package name and identifier.
    An IOError will be raised if the resource can not be found.

    For example:
        mydata = getResource('mypkgdata.jpg').read()

    Note that the package name must be fully qualified, if given, such
    that it would be found in sys.modules.

    In some cases, getResource will return a real file object.  In that
    case, it may be useful to use its name attribute to get the path
    rather than use it as a file-like object.  For example, you may
    be handing data off to a C API.
    /usr/local/lib/python3.6/dist-packages/pygame/pkgdata.py<module pygame.pkgdata>resource_streamresource_existspackage_or_requirementfnpkgnamepkg_resourcesget_data%s has no __file__!loader
pkgdata is a simple, extensible way for a package to acquire data file 
resources.

The getResource function is equivalent to the standard idioms, such as
the following minimal implementation:
    
    import sys, os

    def getResource(identifier, pkgname=__name__):
        pkgpath = os.path.dirname(sys.modules[pkgname].__file__)
        path = os.path.join(pkgpath, identifier)
        return file(os.path.normpath(path), mode='rb')

When a __loader__ is present on the module given by __name__, it will defer
getResource to its get_data implementation and return it as a file-like
object (such as StringIO).
pygame.sndarray.use_arraytype (arraytype): return None

    DEPRECATED - only numpy arrays are now supported.
    pygame.sndarray.samples(Sound): return array

    Reference Sound samples into an array.

    Creates a new array that directly references the samples in a Sound
    object. Modifying the array will change the Sound. The array will
    always be in the format returned from pygame.mixer.get_init().
    pygame.sndarray.get_arraytype (): return str

    DEPRECATED - only numpy arrays are now supported.
    pygame module for accessing sound sample data

Functions to convert between numpy arrays and Sound
objects. This module will only be available when pygame can use the
external numpy package.

Sound data is made of thousands of samples per second, and each sample
is the amplitude of the wave at a particular moment in time. For
example, in 22-kHz format, element number 5 of the array is the
amplitude of the wave after 5/22000 seconds.

Each sample is an 8-bit or 16-bit integer, depending on the data format.
A stereo sound file has two values per sample, while a mono sound file
only has one.

Supported array systems are

  numpy

The array type to use can be changed at runtime using the use_arraytype()
method, which requires one of the above types as string.

Sounds with 16-bit data will be treated as unsigned integers,
if the sound sample type requests this.
<module pygame.sndarray>pygame.sndarray.array(Sound): return array

    Copy Sound samples into an array.

    Creates a new array for the sound data and copies the samples. The
    array will always be in the format returned from
    pygame.mixer.get_init().
    /usr/local/lib/python3.6/dist-packages/pygame/sndarray.pypygame.sndarray.get_arraytypes (): return tuple

    DEPRECATED - only numpy arrays are now supported.
    pygame.sndarray.make_sound(array): return Sound

    Convert an array into a Sound object.
    
    Create a new playable Sound object from an array. The mixer module
    must be initialized and the array format must be similar to the mixer
    audio format.
    set the treshold in milliseconds

        set_timing_treshold(time_ms): return None

        Defaults to 1000.0 / 80.0. This means that the screen will be painted
        using the flip method rather than the update method if the update
        method is taking so long to update the screen that the frame rate falls
        below 80 frames per second.

        clipLayeredDirty Group is for DirtySprites; subclasses LayeredUpdates

    pygame.sprite.LayeredDirty(*spites, **kwargs): return LayeredDirty

    This group requires pygame.sprite.DirtySprite or any sprite that
    has the following attributes:
        image, rect, dirty, visible, blendmode (see doc of DirtySprite).

    It uses the dirty flag technique and is therefore faster than
    pygame.sprite.RenderUpdates if you have many static sprites.  It
    also switches automatically between dirty rect updating and full
    screen drawing, so you do no have to worry which would be faster.

    As with the pygame.sprite.Group, you can specify some additional attributes
    through kwargs:
        _use_update: True/False   (default is False)
        _default_layer: default layer where the sprites without a layer are
            added
        _time_threshold: treshold time for switching between dirty rect mode
            and fullscreen mode; defaults to updating at 80 frames per second,
            which is equal to 1000.0 / 80.0

    New in pygame 1.8.0

    sortedcollide_rectcontainer class for many Sprites

    pygame.sprite.Group(*sprites): return Group

    A simple container for Sprite objects. This class can be subclassed to
    create containers with more specific behaviors. The constructor takes any
    number of Sprite arguments to add to the Group. The group supports the
    following standard Python operations:

        in      test if a Sprite is contained
        len     the number of Sprites contained
        bool    test if any Sprites are contained
        iter    iterate through all the Sprites

    The Sprites in the Group are not ordered, so the Sprites are drawn and
    iterated over in no particular order.

    OrderedUpdatesreturn the visible value of that spriteadd sprite(s) to group

        Group.add(sprite, list, group, ...): return None

        Adds a sprite or sequence of sprites to a group.

        LayeredDirty.repaint_rect_set_spriteLayeredDirty.clearsprites_appendcreate a new collide_rect_ratio callable

        Ratio is expected to be a floating point value used to scale
        the underlying sprite rect before checking for collisions.

        new_layersprites_layersSprite.addSprite.alive_Sprite__ghas_internalbring the sprite to front layer

        LayeredUpdates.move_to_front(sprite): return None

        Brings the sprite to front by changing the sprite layer to the top-most
        layer. The sprite is added at the end of the list of sprites in that
        top-most layer.

        LayeredUpdates Group handles layers, which are drawn like OrderedUpdates

    pygame.sprite.LayeredUpdates(*spites, **kwargs): return LayeredUpdates

    This group is fully compatible with pygame.sprite.Sprite.
    New in pygame 1.8.0

    collide_circle_ratio.__call__<%s(%d sprites)>spritedictsurface_blitdirty_appendnewrectremove_internalRenderPlainleftradiusDo not use this method directly.

        It is used by the group to add a sprite internally.

        leftrectrightrecttruthsprites1AbstractGroup.removecreates a new collide_circle_ratio callable instance

        The given ratio is expected to be a floating point value used to scale
        the underlying sprite radius before checking for collisions.
        
        When the ratio is ratio=1.0, then it behaves exactly like the 
        collide_circle method.

        AbstractGroup.clearLayeredDirty.add_internalAbstractGroup.update_spritescolliding_idxget the area where drawing will occur

        LayeredDirty.get_clip(): return Rect

        base class for containers of sprites

    AbstractGroup does everything needed to behave as a normal group. You can
    easily subclass a new group class from this or the other groups below if
    you want to add more features.

    Any AbstractGroup-derived sprite groups act like sequences and support
    iteration, len, and so on.

    LayeredUpdates.layersA callable class that checks for collisions using scaled rects

    The class checks for collisions between two sprites using a scaled version
    of the sprites' rects. Is created with a ratio; the instance is then
    intended to be passed as a collided callback function to the *collide
    functions.

    New in pygame 1.8.1

    get_top_spriteGroupSingle.__nonzero__LayeredUpdates.get_layer_of_sprite__contains__xoffsetyoffsetleftmaskrightmaskerase the previous position of all sprites

        Group.clear(surface, bgd): return None

        Clears the area under every drawn sprite in the group. The bgd
        argument should be Surface which is the same dimensions as the
        screen surface. The bgd could also be a function which accepts
        the given surface and the area to be cleared as arguments.

        return the layer that sprite is currently in

        If the sprite is not found, then it will return the default layer.

        GroupSingle.spritesGroupSingle.__contains__AbstractGroup.addSprite.add_internal©⁄self⁄surface⁄bgd⁄
_orig_clip⁄_clip⁄_surf⁄_sprites⁄	_old_rect⁄_update⁄_update_append⁄_ret⁄
_surf_blit⁄_rect⁄_bgd⁄	init_rect⁄
start_time⁄spr⁄_union_rect⁄_union_rect_collidelist⁄_union_rect_union_ip⁄i⁄rec⁄	_spr_rect⁄_spr_rect_clip⁄idx⁄clip⁄end_timea more featureful subclass of Sprite with more attributes

    pygame.sprite.DirtySprite(*groups): return DirtySprite

    Extra DirtySprite attributes with their default values:

    dirty = 1
        If set to 1, it is repainted and then set to 0 again.
        If set to 2, it is always dirty (repainted each frame;
        flag is not reset).
        If set to 0, it is not dirty and therefore not repainted again.

    blendmode = 0
        It's the special_flags argument of Surface.blit; see the blendmodes in
        the Surface.blit documentation

    source_rect = None
        This is the source rect to use. Remember that it is relative to the top
        left corner (0, 0) of self.image.

    visible = 1
        Normally this is 1. If set to 0, it will not be repainted. (If you
        change visible to 1, you must set dirty to 1 for it to be erased from
        the screen.)

    _layer = 0
        A READ ONLY value, it is read when adding it to the LayeredUpdates
        group. For details see documentation of sprite.LayeredUpdates.

    layer1_nrAbstractGroup.drawtopleftreturn all sprites from a layer ordered as they where added

        LayeredUpdates.get_sprites_from_layer(layer): return sprites

        Returns all sprites from a layer. The sprites are ordered in the
        sequence that they where added. (The sprites are not removed from the
        layer.

        dokillcrashedspritecollidemove_to_backcall the update method of every member sprite

        Group.update(*args): return None

        Calls the update method of every member sprite. All arguments that
        were passed to this method are passed to the Sprite update function.

        Sprite.removeremove sprite(s) from group

        Group.remove(sprite, list, or group, ...): return None

        Removes a sprite or sequence of sprites from a group.

        LayeredUpdates.get_top_sprite<%s DirtySprite(in %d groups)>groupa_get_spriteOrderedUpdates.add_internal__repr__simple base class for visible game objects

    pygame.sprite.Sprite(*groups): return Sprite

    The base class for visible game objects. Derived classes will want to
    override the Sprite.update() method and assign Sprite.image and Sprite.rect
    attributes.  The initializer can accept any number of Group instances that
    the Sprite will become a member of.

    When subclassing the Sprite class, be sure to call the base initializer
    before adding the Sprite to Groups.

    AbstractGroup.emptyLayeredUpdates.change_layerswitch_layerlostspritesLayeredUpdates.get_sprites_atAbstractGroup.copy_spritegroupSprite.__init__      )@pygame module with basic game object classes

This module contains several simple classes to be used within games. There
are the main Sprite class and several Group classes that contain Sprites.
The use of these classes is entirely optional when using Pygame. The classes
are fairly lightweight and only provide a starting place for the code
that is common to most games.

The Sprite class is intended to be used as a base class for the different
types of objects in the game. There is also a base Group class that simply
stores sprites. A game could create new types of Group classes that operate
on specially customized Sprite instances they contain.

The basic Sprite class can draw the Sprites it contains to a Surface. The
Group.draw() method requires that each Sprite have a Surface.image attribute
and a Surface.rect. The Group.clear() method requires these same attributes
and can be used to erase all the Sprites with background. There are also
more advanced Groups: pygame.sprite.RenderUpdates() and
pygame.sprite.OrderedUpdates().

Lastly, this module contains several collision functions. These help find
sprites inside multiple groups that have intersecting bounding rectangles.
To find the collisions, the Sprites are required to have a Surface.rect
attribute assigned.

The groups are designed for high efficiency in removing and adding Sprites
to them. They also allow cheap testing to see if a Sprite already exists in
a Group. A given Sprite can exist in any number of groups. A game could use
some groups to control object rendering, and a completely separate set of
groups to control interaction or player movement. Instead of adding type
attributes or bools to a derived Sprite class, consider keeping the
Sprites inside organized Groups. This will allow for easier lookup later
in the game.

Sprites and Groups manage their relationships with the add() and remove()
methods. These methods can accept a single or multiple group arguments for
membership.  The default initializers for these classes also take a
single group or list of groups as argments for initial membership. It is safe
to repeatedly add and remove the same Sprite from a Group.

While it is possible to design sprite and group classes that don't derive
from the Sprite and AbstractGroup classes below, it is strongly recommended
that you extend those when you create a new Sprite or Group class.

Sprites are not thread safe, so lock them yourself if using threads.

LayeredDirty.change_layer_init_rectadd the sprite to groups

        Sprite.add(*groups): return None

        Any number of Group instances can be passed as arguments. The
        Sprite will be added to the Groups it is not already a member of.

              ‡?GroupSingle._get_spriteget_bottom_layerclip the area where to draw; pass None (default) to reset the clip

        LayeredDirty.set_clip(screen_rect=None): return None

        Group.__init__collision detection between two sprites, using masks.

    pygame.sprite.collide_mask(SpriteLeft, SpriteRight): bool

    Tests for collision between two sprites by testing if their bitmasks
    overlap. If the sprites have a "mask" attribute, that is used as the mask;
    otherwise, a mask is created from the sprite image. Intended to be passed
    as a collided callback function to the *collide functions. Sprites must
    have a "rect" and an optional "mask" attribute.

    New in pygame 1.8.0

    return number of sprites in group

        Group.len(group): return int

        Returns the number of sprites contained in the group.

        _get_visibleAbstractGroup.__init__rightradiusAbstractGroup.__contains__RenderCleardokillbinsertget_ticksswitch the sprites from layer1_nr to layer2_nr

        LayeredUpdates.switch_layer(layer1_nr, layer2_nr): return None

        The layers number must exist. This method does not check for the
        existence of the given layers.

        DirtySprite.<lambda>GroupSingle.copydoes the sprite belong to any groups

        Sprite.alive(): return bool

        Returns True when the Sprite belongs to one or more Groups.
        finds any sprites in a group that collide with the given sprite

    pygame.sprite.spritecollideany(sprite, group): return sprite

    Given a sprite and a group of sprites, this will return return any single
    sprite that collides with with the given sprite. If there are no
    collisions, then this returns None.

    If you don't need all the features of the spritecollide function, this
    function will be a bit quicker.

    Collided is a callback function used to calculate if two sprites are
    colliding. It should take two sprites as values and return a bool value
    indicating if they are colliding. If collided is not passed, then all
    sprites must have a "rect" value, which is a rectangle of the sprite area,
    which will be used to calculate the collision.

    remove the sprite from groups

        Sprite.remove(*groups): return None

        Any number of Group instances can be passed as arguments. The Sprite
        will be removed from the Groups it is currently a member of.

        copy a group with all the same sprites

        Group.copy(): return Group

        Returns a copy of the group that is an instance of the same class
        and has the same sprites in it.

        centeryremove all sprites

        Group.empty(): return None

        Removes all the sprites from the group.

        sprite_layersSprite.__repr__detect collision between two sprites using scaled rects

        pygame.sprite.collide_rect_ratio(ratio)(left, right): return bool

        Tests for collision between two sprites. Uses the pygame.Rect
        colliderect function to calculate the collision after scaling the rects
        by the stored ratio. Sprites must have "rect" attributes.

        draw all sprites onto the surface

        Group.draw(surface): return None

        Draws all of the member sprites onto the given surface.

        _set_visiblereturn_valuereturn the bottom layer

        LayeredUpdates.get_bottom_layer(): return layer

        DirtySprite._get_visibleget a list of sprites in the group

        Group.sprite(): return list

        Returns an object that can be looped over with a 'for' loop. (For now,
        it is always a list, but this could change in a future version of
        pygame.) Alternatively, you can get the same information by iterating
        directly over the sprite group, e.g. 'for sprite in group'.

        LayeredUpdates.drawyou can make this sprite disappear without removing it from the group,
assign 0 for invisible and 1 for visibledetect collision between two sprites using scaled circles

    This callable class checks for collisions between two sprites using a
    scaled version of a sprite's radius. It is created with a ratio as the
    argument to the constructor. The instance is then intended to be passed as
    a collided callback function to the *collide functions.

    New in pygame 1.8.1

    return a list with all sprites at that position

        LayeredUpdates.get_sprites_at(pos): return colliding_sprites

        Bottom sprites are listed first; the top ones are listed last.

        remove the Sprite from all Groups

        Sprite.kill(): return None

        The Sprite is removed from all the Groups that contain it. This won't
        change anything about the state of the Sprite. It is possible to
        continue to use the Sprite after this method has been called, including
        adding it to Groups.

        initialize group.

        pygame.sprite.LayeredDirty(*spites, **kwargs): return LayeredDirty

        You can specify some additional attributes through kwargs:
            _use_update: True/False   (default is False)
            _default_layer: default layer where the sprites without a layer are
                added
            _time_threshold: treshold time for switching between dirty rect
                mode and fullscreen mode; defaults to updating at 80 frames per
                second, which is equal to 1000.0 / 80.0

        collide_circle_ratio.__init__Do not use this method directly.

        The group uses it to add a sprite.

        groupcollidexdistanceget_top_layerAbstractGroup.__repr__LayeredUpdates.get_top_layerrepaint the given area

        LayeredDirty.repaint_rect(screen_rect): return None

        screen_rect is in screen coordinates.

        AbstractGroup.__len__find Sprites in a Group that intersect another Sprite

    pygame.sprite.spritecollide(sprite, group, dokill, collided=None):
        return Sprite_list

    Return a list containing all Sprites in a Group that intersect with another
    Sprite. Intersection is determined by comparing the Sprite.rect attribute
    of each Sprite.

    The dokill argument is a bool. If set to True, all Sprites that collide
    will be removed from the Group.

    The collided argument is a callback function used to calculate if two
    sprites are colliding. it should take two sprites as values, and return a
    bool value indicating if they are colliding. If collided is not passed, all
    sprites must have a "rect" value, which is a rectangle of the sprite area,
    which will be used to calculate the collision.

    draw all sprites in the right order onto the passed surface

        LayeredUpdates.draw(surface): return Rect_list

        LayeredUpdates.remove_internal_spritelayersydistancedistancesquaredOrderedUpdates.__init__DirtySprite.__repr__LayeredDirty.set_timing_tresholdlayer_nrRenderUpdates class that draws Sprites in order of addition

    pygame.sprite.OrderedUpdates(*spites): return OrderedUpdates

    This class derives from pygame.sprite.RenderUpdates().  It maintains
    the order in which the Sprites were added to the Group for rendering.
    This makes adding and removing Sprites from the Group a little
    slower than regular Groups.

    groupbOrderedUpdates.spritesdetect collision between two sprites using scaled circles

        pygame.sprite.collide_circle_radio(ratio)(left, right): return bool

        Tests for collision between two sprites by testing whether two circles
        centered on the sprites overlap after scaling the circle's radius by
        the stored ratio. If the sprites have a "radius" attribute, that is
        used to create the circle; otherwise, a circle is created that is big
        enough to completely enclose the sprite's rect as given by the "rect"
        attribute. Intended to be passed as a collided callback function to the
        *collide functions. Sprites must have a "rect" and an optional "radius"
        attribute.

        LayeredUpdates.add_internalchange the layer of the sprite

        LayeredUpdates.change_layer(sprite, new_layer): return None

        The sprite must have been added to the renderer already. This is not
        checked.

        GroupSingle.remove_internalreturn the top layer

        LayeredUpdates.get_top_layer(): return layer

        centerxThe sprite contained in this groupGroupSingle.add_internalLayeredUpdates.spritesuse to set background

        Group.clear(surface, bgd): return None

        AbstractGroup.__nonzero__RenderUpdates.drawinitialize an instance of LayeredUpdates with the given attributes

        You can set the default layer through kwargs using 'default_layer'
        and an integer for the layer. The default layer is 0.

        If the sprite you add has an attribute _layer, then that layer will be
        used. If **kwarg contains 'layer', then the passed sprites will be
        added to that layer (overriding the sprite._layer attribute). If
        neither the sprite nor **kwarg has a 'layer', then the default layer is
        used to add the sprites.

        AbstractGroup.hasreturn the sprite at the index idx from the groups sprites

        LayeredUpdates.get_sprite(idx): return sprite

        Raises IndexOutOfBounds if the idx is not within range.

        from_surfaceDirtySprite.__init__LayeredUpdates.__init___spritelistdraw all sprites in the right order onto the given surface

        LayeredDirty.draw(surface, bgd=None): return Rect_list

        You can pass the background too. If a self.bgd is already set to some
        value that is not None, then the bgd argument has no effect.

        method to control sprite behavior

        Sprite.update(*args):

        The default implementation of this method does nothing; it's just a
        convenient "hook" that you can override. This method is called by
        Group.update() with whatever arguments you give it.

        There is no need to use this method if not using the convenience
        method by the same name in the Group class.

        LayeredUpdates.remove_sprites_of_layerGroupSingle.has_internalLayeredDirty.__init__Sprite.remove_internal_GroupSingle__spriteAbstractGroup.add_internalreturn a list of unique defined layers defined.

        LayeredUpdates.layers(): return layers

        collidelistallset the visible value (0 or 1) and makes the sprite dirtyAbstractGroup.remove_internalreturn a ordered list of sprites (first back, last top).

        LayeredUpdates.sprites(): return sprites

        move the sprite to the bottom layer

        LayeredUpdates.move_to_back(sprite): return None

        Moves the sprite to the bottom layer by moving it to a new layer below
        the current bottom layer.

        DirtySprite._set_visibledetect collision between a group and another group

    pygame.sprite.groupcollide(groupa, groupb, dokilla, dokillb):
        return dict

    Given two groups, this will find the intersections between all sprites in
    each group. It returns a dictionary of all sprites in the first group that
    collide. The value for each item in the dictionary is a list of the sprites
    in the second group it collides with. The two dokill arguments control if
    the sprites from either group will be automatically removed from all
    groups. Collided is a callback function used to calculate if two sprites
    are colliding. it should take two sprites as values, and return a bool
    value indicating if they are colliding. If collided is not passed, all
    sprites must have a "rect" value, which is a rectangle of the sprite area
    that will be used to calculate the collision.

    list of Groups that contain this Sprite

        Sprite.groups(): return group_list

        Returns a list of all the Groups that contain this Sprite.

        Group class that tracks dirty updates

    pygame.sprite.RenderUpdates(*sprites): return RenderUpdates

    This class is derived from pygame.sprite.Group(). It has an enhanced draw
    method that tracks the changed areas of the screen.

    ask if group has a sprite or sprites

        Group.has(sprite or group, ...): return bool

        Returns True if the given sprite or sprites are contained in the
        group. Alternatively, you can get the same information using the
        'in' operator, e.g. 'sprite in group', 'subgroup in group'.

        GroupSingle._set_spriteGroupSingle.__init__detect collision between two sprites using circles

    pygame.sprite.collide_circle(left, right): return bool

    Tests for collision between two sprites by testing whether two circles
    centered on the sprites overlap. If the sprites have a "radius" attribute,
    then that radius is used to create the circle; otherwise, a circle is
    created that is big enough to completely enclose the sprite's rect as
    given by the "rect" attribute. This function is intended to be passed as
    a collided callback function to the *collide functions. Sprites must have a
    "rect" and an optional "radius" attribute.

    New in pygame 1.8.0

    return the topmost sprite

        LayeredUpdates.get_top_sprite(): return Sprite

        /usr/local/lib/python3.6/dist-packages/pygame/sprite.pyOrderedUpdates.remove_internal<module pygame.sprite>AbstractGroup.has_internalAbstractGroup.spritesAbstractGroup.__iter__add a sprite or sequence of sprites to a group

        LayeredUpdates.add(*sprites, **kwargs): return None

        If the sprite you add has an attribute _layer, then that layer will be
        used. If **kwarg contains 'layer', then the passed sprites will be
        added to that layer (overriding the sprite._layer attribute). If
        neither the sprite nor **kwarg has a 'layer', then the default layer is
        used to add the sprites.

        collision detection between two sprites, using rects.

    pygame.sprite.collide_rect(left, right): return bool

    Tests for collision between two sprites. Uses the pygame.Rect colliderect
    function to calculate the collision. It is intended to be passed as a
    collided callback function to the *collide functions. Sprites must have
    "rect" attributes.

    New in pygame 1.8.0

    inflateremove all sprites from a layer and return them as a list

        LayeredUpdates.remove_sprites_of_layer(layer_nr): return sprites

        get_surface<%s sprite(in %d groups)>collide_rect_ratio.__call__A group container that holds a single most recent item.

    This class works just like a regular group, but it only keeps a single
    sprite in the group. Whatever sprite has been added to the group last will
    be the only sprite in the group.

    You can access its one sprite as the .sprite attribute.  Assigning to this
    attribute will properly remove the old sprite and then add the new one.

    collide_rect_ratio.__init__pygame.surfarray.array2d (Surface): return array

    Copy pixels into a 2d array.

    Copy the pixels from a Surface into a 2D array. The bit depth of the
    surface will control the size of the integer values, and will work
    for any type of pixel format.

    This function will temporarily lock the Surface as pixels are copied
    (see the Surface.lock - lock the Surface memory for pixel access
    method).
    numpysfpygame.surfarray.array_alpha (Surface): return array

    Copy pixel alphas into a 2d array.

    Copy the pixel alpha values (degree of transparency) from a Surface
    into a 2D array. This will work for any type of Surface
    format. Surfaces without a pixel alpha will return an array with all
    opaque values.

    This function will temporarily lock the Surface as pixels are copied
    (see the Surface.lock - lock the Surface memory for pixel access
    method).
    pygame.surfarray.pixels3d (Surface): return array

    Reference pixels into a 3d array.

    Create a new 3D array that directly references the pixel values in a
    Surface. Any changes to the array will affect the pixels in the
    Surface. This is a fast operation since no data is copied.

    This will only work on Surfaces that have 24-bit or 32-bit
    formats. Lower pixel formats cannot be referenced.

    The Surface this references will remain locked for the lifetime of
    the array (see the Surface.lock - lock the Surface memory for pixel
    access method).
    pygame.surfarray.map_array (Surface, array3d): return array2d

    Map a 3D array into a 2D array.

    Convert a 3D array into a 2D array. This will use the given Surface
    format to control the conversion. Palette surface formats are not
    supported.
    pygame.surfarray.pixels_blue (Surface): return array

    Reference pixel blue into a 2d array.

    Create a new 2D array that directly references the blue values
    in a Surface. Any changes to the array will affect the pixels
    in the Surface. This is a fast operation since no data is copied.

    This can only work on 24-bit or 32-bit Surfaces.

    The Surface this array references will remain locked for the
    lifetime of the array.
    pygame.surfarray.array3d (Surface): return array

    Copy pixels into a 3d array.

    Copy the pixels from a Surface into a 3D array. The bit depth of the
    surface will control the size of the integer values, and will work
    for any type of pixel format.

    This function will temporarily lock the Surface as pixels are copied
    (see the Surface.lock - lock the Surface memory for pixel access
    method).
    pygame.surfarray.pixels_alpha (Surface): return array

    Reference pixel alphas into a 2d array.

    Create a new 2D array that directly references the alpha values
    (degree of transparency) in a Surface. Any changes to the array will
    affect the pixels in the Surface. This is a fast operation since no
    data is copied.

    This can only work on 32-bit Surfaces with a per-pixel alpha value.

    The Surface this array references will remain locked for the
    lifetime of the array.
    pygame.surfarray.get_arraytype (): return str

    DEPRECATED - only numpy arrays are now supported.
    pc_make_surfacepygame.surfarray.array_colorkey (Surface): return array

    Copy the colorkey values into a 2d array.

    Create a new array with the colorkey transparency value from each
    pixel. If the pixel matches the colorkey it will be fully
    tranparent; otherwise it will be fully opaque.

    This will work on any type of Surface format. If the image has no
    colorkey a solid opaque array will be returned.

    This function will temporarily lock the Surface as pixels are
    copied.
    pygame.surfarray.pixels2d (Surface): return array

    Reference pixels into a 2d array.
    
    Create a new 2D array that directly references the pixel values in a
    Surface. Any changes to the array will affect the pixels in the
    Surface. This is a fast operation since no data is copied.

    Pixels from a 24-bit Surface cannot be referenced, but all other
    Surface bit depths can.

    The Surface this references will remain locked for the lifetime of
    the array (see the Surface.lock - lock the Surface memory for pixel
    access method).
    pygame.surfarray.pixels_red (Surface): return array

    Reference pixel red into a 2d array.

    Create a new 2D array that directly references the red values
    in a Surface. Any changes to the array will affect the pixels
    in the Surface. This is a fast operation since no data is copied.

    This can only work on 24-bit or 32-bit Surfaces.

    The Surface this array references will remain locked for the
    lifetime of the array.
    pygame.surfarray.get_arraytypes (): return tuple

    DEPRECATED - only numpy arrays are now supported.
    /usr/local/lib/python3.6/dist-packages/pygame/surfarray.pypygame.surfarray.pixels_green (Surface): return array

    Reference pixel green into a 2d array.

    Create a new 2D array that directly references the green values
    in a Surface. Any changes to the array will affect the pixels
    in the Surface. This is a fast operation since no data is copied.

    This can only work on 24-bit or 32-bit Surfaces.

    The Surface this array references will remain locked for the
    lifetime of the array.
    pygame module for accessing surface pixel data using array interfaces

Functions to convert pixel data between pygame Surfaces and arrays. This
module will only be functional when pygame can use the external Numpy or
Numeric packages.

Every pixel is stored as a single integer value to represent the red,
green, and blue colors. The 8bit images use a value that looks into a
colormap. Pixels with higher depth use a bit packing process to place
three or four values into a single number.

The arrays are indexed by the X axis first, followed by the Y
axis. Arrays that treat the pixels as a single integer are referred to
as 2D arrays. This module can also separate the red, green, and blue
color values into separate indices. These types of arrays are referred
to as 3D arrays, and the last index is 0 for red, 1 for green, and 2 for
blue.

Supported array types are

  numpy
  numeric (deprecated; will be removed in Pygame 1.9.3.)

The default will be numpy, if installed. Otherwise, Numeric will be set
as default if installed, and a deprecation warning will be issued. If
neither numpy nor Numeric are installed, the module will raise an
ImportError.

The array type to use can be changed at runtime using the use_arraytype()
method, which requires one of the above types as string.

Note: numpy and Numeric are not completely compatible. Certain array
manipulations, which work for one type, might behave differently or even
completely break for the other.

Additionally, in contrast to Numeric, numpy does use unsigned 16-bit
integers. Images with 16-bit data will be treated as unsigned
integers. Numeric instead uses signed integers for the representation,
which is important to keep in mind, if you use the module's functions
and wonder about the values.
<module pygame.surfarray>pygame.surfarray.use_arraytype (arraytype): return None

    DEPRECATED - only numpy arrays are now supported.
    family(TrueType)key_nameinitsysfonts_win32SOFTWARE\Microsoft\Windows\CurrentVersion\FontsdemiboldSOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts/usr/X11/bin/fc-listignorestrip<module pygame.sysfont>narrowbtMBCSinitialize fonts dictionary on WindowsPIPEPopenalias_groupsfontdirpygame.font.match_font(name, bold=0, italic=0) -> name
       find the filename for the named system font

       This performs the same font search as the SysFont()
       function, only it returns the path to the TTF file
       that would be loaded. The font name can be a comma
       separated list of font names to try.

       If no match is found, None is returned.
    gotitalicSysfontsisalnumSysaliaspygame.font.get_fonts() -> list
       get a list of system font names

       Returns the list of all found system fonts. Note that
       the names of the fonts will be all lowercase with spaces
       removed. This is how pygame internally stores the font
       names for matching.
    return ASCII characters of a given unicode or 8-bit string/usr/X11R6/bin/fc-listalias_setmods©)z	monospacez
misc-fixedzcourierz
couriernewzconsolezfixedzmonozfreemonozbitstreamverasansmonozverasansmonozmonotypezlucidaconsole)	zsanszarialz	helveticazswisszfreesanszbitstreamverasanszverasanszverdanaztahoma)
zserifztimesz	freeserifzbitstreamveraserifzromanz
timesromanztimesnewromanzdutchz	veraserifzgeorgia)z	wingdingszwingbatsTrueType_suffixWINDIRfontnamestderr.ttcItalic_simplename.<locals>.<genexpr>endswithBoldEnumValueOpenType_extensionsinitsysfonts_unixallnames.ttf.otf_addfontclose_fdsObliqueinitsysfonts_darwinC:\Windowsfloutflerrentriescommunicatefontdictcreate simple version of the font namegotboldpygame.font.SysFont(name, size, bold=False, italic=False, constructor=None) -> Font
       create a pygame Font from system font resources

       This will search the system fonts for the given font
       name. You can also enable bold or italic styles, and
       the appropriate system font will be selected if available.

       This will always return a valid Font object, and will
       fallback on the builtin pygame font if the given font
       is not found.

       Name can also be a comma separated list of names, in
       which case set of names will be searched in order. Pygame
       uses a small set of common font aliases, if the specific
       font you ask for is not available, a reasonable alternative
       may be used.

       if optional contructor is provided, it must be a function with
       signature constructor(fontpath, size, bold, italic) which returns
       a Font instance. If None, a pygame.font.Font object is created.
    toasciiplainname/usr/local/lib/python3.6/dist-packages/pygame/sysfont.py%s : file family styleread the fonts on OS X. X11 is required for this to work.convert bytes to ASCII-only stringcreate_aliasesuse the fc-list from fontconfig to get a list of fontssysfont, used in the font module to find system fontsfont_constructormap common fonts that are absent from the system to similar fonts that are installed in the systeminsert a font and style into the font dictionaryQueryInfoKeytmap.<locals>.<lambda>threadlooptotal time num_workers:%s: time:%s:error_onesresultstracebackkwArgs waits until all tasks are complete.
        WorkerQueueworker_queuedoitWorkerQueue.waita_bench_functhe_datathedatabest_numberlast_bestwqxxtotal_time__license__WorkerQueue._setup_workers like map, but uses a thread pool to execute.
        num_workers - the number of worker threads that will be used.  If pool
                        is passed in, then the num_workers arg is ignored.
        worker_queue - you can optionally pass in an existing WorkerQueue.
        wait - True means that the results are returned when everything is finished.
               False means that we return the [worker_queue, results] right away instead. 
               results, is returned as a list of FuncResult instances.
        stop_on_error - 
    number_of_workerssetDaemonPython licenseEmptybuggy threadmapPy25Queue/usr/local/lib/python3.6/dist-packages/pygame/threads/__init__.pya_threadRene Dudfieldseq_argstask_done0.3.0 cleans up everything.
    errbackFuncResult.__call__FINISHbenchmark_workers_use_workers f - is the function we that we call 
            callback(result) - this is called when the function(f) returns
            errback(exception) - this is called when the function(f) raises
                                   an exception.
         Used for wrapping up a function call so that the results are stored
         inside the instances result attribute.
    active count:%s Stops the WorkerQueue, waits for all of the threads to finish up.
        benchmark_workers.<locals>.doit Does a little test to see if threading is worth it.
          Sets up a global worker queue if it's worth it.

        Calling init() is not required, but is generally better to do.
    WorkerQueue.threadloopactiveCount_wqqsize Sets up the worker threads
              NOTE: undefined behaviour if you call this again.
        WorkerQueue.__init__STOP Loops until all of the tasks are finished.
         puts a function on a queue for running later.
        
* Experimental *

Like the map function, but can use a pool of threads.

Really easy to use threads.  eg.  tmap(f, alist)

If you know how to use the map function, you can use threads.
<module pygame.threads>WorkerQueue.stopWorkerQueue.do does a little test to see if workers are at all faster.
        Returns the number of workers which works best.
        Takes a little bit of time to run, so you should only really call
          it once.
        You can pass in benchmark data, and functions if you want.
        a_bench_func - f(data)
        the_data - data to work on.
    FuncResult.__init__MAX_WORKERS_TO_TEST/usr/local/lib/python3.6/dist-packages/pygame/version.pyvernum1.9.4Simply the current installed pygame version. The version information is
stored in the regular pygame module as 'pygame.ver'. Keeping the version
information also available in a separate module allows you to test the
pygame version without importing the main pygame module.

The python version information should always compare greater than any previous
releases. (hmm, until we get to versions > 10)
_func_codeRobotFileParser_func_globalscPickletkColorChooserbuiltinsparse_qsurlparseurllib.parseRequestuses_queryrobotparserurllib.robotparser__builtin__functoolsbyte2intmethodcallerviewkeys_moduleinstall_opener_locs_fullnamepipesaddinfo__globals__HTTPErrorurllib2urllib.error
    A meta path importer to import six.moves and its submodules.

    This class implements a PEP302 finder and loader. It should be compatible
    with Python 2.5 and all existing versions of Python3
    fullnamesdummy_thread_SixMetaPathImporter.is_packagehttp_cookiejarcookielibhttp.cookiejar_LazyDescrurl2pathnameurllib.requestxmlrpc.serveruses_relativeModule_six_moves_urllib_requesttkinter_dialogDialogtkinter.dialogtkMessageBoxuses_netlocsplitquery_dummy_threaddbm.gnunew_modquoteemail_mime_multipartaddclosehookbasesurldefragquote_plusiteritems@python_2_unicode_compatible cannot be applied to %s because it doesn't define __str__().f_locals1.11.0xmlrpc_serverxmlrpc_clientdef raise_from(value, from_value):
    try:
        if from_value is None:
            raise value
        raise value from from_value
    finally:
        value = None
_code__globs_orig_varsemail.mime.nonmultipartparse_qslmoves.urllib_parseurlcleanupContentTooShortErrorproxy_bypassModule_six_moves_urllib_parseremove_movegetproxies__get_module__new___LazyDescr.__init___SixMetaPathImporter.__get_moduleRemove item from six.moves.responsewith_metaclass.<locals>.metaclass.__prepare__clshttp_clienthttplibhttp.clientFancyURLopener_meth_funcemail_mime_textMovedModule.__getattr__six.moves.urllibText literalMovedModule.__init__viewitemsurllib_errorsix.moves.urllib_errorUserDictcollectionsBaseHTTPServerdbm_gnuAdd documentation to a function.urlsplitProxyBasicAuthHandlertkinter_simpledialogSimpleDialogtkinter.simpledialogbasestringinvalid keyword arguments to print()SimpleXMLRPCServer>Bsplittagizip_longestadd_metaclass.<locals>.wrapper_LazyModule.__init__partialHTTPHandlerhttp.cookies\\addbasetkinter.colorchoosercreate_unbound_methodAbstractDigestAuthHandlermeta_pathshlex_quote_SixMetaPathImporter._add_moduleUserListmoves.urllib_responseurlunsplititervaluesHTTPCookieProcessorviewvaluesCreate a six.moves.urllib namespace that resembles the Python 3 namespaceUnknownHandlerim_selfurlunparseCGIHTTPServerclass_typestkinter_messageboxtkinter.messagebox<string>AbstractBasicAuthHandlertkinter_scrolledtextemail.MIMEMultipartemail.mime.multipartassertCountEqualsix.moves.urllib.responseunquote_plus_LazyDescr.__get__HTTPPasswordMgrWithDefaultRealmIteratorClassTypemoves.urllib.errorbuild_openerByte literalklassgetoutputcommandsFTPHandlerHTTPErrorProcessoremail.MIMENonMultiparturlencodesix.moves.urllib.requestassertRaisesRegextkinter_ttktkinter.ttkBenjamin Peterson <benjamin@python.org>MovedAttribute._resolveLazy loading of moved objects in six.moves.urllib_requestlistspathname2urlxmlrpclibxmlrpc.clientget_method_selfemail.MIMETextexec _code_ in _globs_, _locs_Module_six_moves_urllib_responsetkinter_tixLazy loading of moved objects in six.moves.urllib_parseReturn an iterator over the keys of a dictionary.getitemurlopenHTTPBasicAuthHandlerScrolledTextgetcwdbiterkeyswrapsget_unbound_functionget_function_closureim_functkFileDialogtkinter_constantsTkconstantstkinter.constantsPY34add_moveassertRegexend must be None or a string_getframeinteger_typesenumerateMovedModule._resolve_urllib_request_moved_attributesHTTPDefaultErrorHandleremail_mime_basetkinter.commondialogthis_basestemporary_classget_function_defaultsCacheFTPHandlerReraise an exception.assertRaisesRegexp_assertRegexuses_paramsflushX.__len__maxsize_MovedItems__bases__BaseHandlerCreate a base class with a metaclass.http.serveraddinfourl__code__configparserConfigParserUserString_func_closureWRAPPER_UPDATES__defaults__tkinter_fontPY2slotsslots_varProxyHandlersubmodule_search_locationswant_unicodewrappedupdated__next__wraps.<locals>.wrapper<module six>email.MIMEBaseiterbyteswith_tracebackLazy loading of moved objects in six.moves.urllib_robotparserWRAPPER_ASSIGNMENTSdef raise_from(value, from_value):
    try:
        raise value from from_value
    finally:
        value = None
_func_defaultsParseResultMethodType__self__create_bound_methodhtml_parserHTMLParserhtml.parserwith_metaclass.<locals>.metaclass.__new__six.moves.urllib.errorifilterurlretrieve__closure__Return None

        Required, if is_package is implementedtkinter.scrolledtextMovedAttribute.__init__callable.<locals>.<genexpr>delattrdef reraise(tp, value, tb=None):
    try:
        raise tp, value, tb
    finally:
        tb = None
six.moves.urllib.robotparsertkinter_tksimpledialogtkSimpleDialogemail.mime.baseprint_gdbm\\\\tkFonttkinter.font_SixMetaPathImporter__get_module_meth_selfReturn an iterator over the values of a dictionary.socketserverSocketServerprint_.<locals>.writeattrsTixsplitvalueurljoinint2bytetkCommonDialogHTTPRedirectHandlerModuleTypeold_modimportlibtkinter_colorchooserstring_typesload_module
        Return true, if the named module is a package.

        We need this method to get correct spec objects with
        Python 3.4 (see PEP451)
        Lazy loading of moved objects in six.moves.urllib_responseProxyDigestAuthHandler_add_docf_globalsreload_modulegetcwduget_codenewlineemail.MIMEImagetkinter_tkfiledialog_SixMetaPathImporter.__init__SimpleHTTPServeremail_mime_nonmultipartparse_keqv_listSplitResult_urllib_robotparser_moved_attributesassertItemsEqual__dir__six_module_name_urllib_response_moved_attributes__slots___assertCountEqualparse_http_listget_sourceuses_fragmentModule_six_moves_urllib_robotparserFileHandlerHTTPDigestAuthHandler__traceback__tkinter_commondialogunquote_to_bytes__weakref__text_typeClass decorator for creating a class with a metaclass.Execute code in a namespace._importer
    A decorator that defines __unicode__ and __str__ methods under Python 2.
    Under Python 3 it does nothing.

    To support Python 2 and 3 with a single code base, define a __str__ method
    returning text and apply this decorator to the class.
    splitusertkinter.filedialoghtmlentitydefsemail_mime_imagereprlibindexbytesold_attrTkinteremail.mime.imageURLErrorOpenerDirectortkinter_dndget_method_functionHTTPSHandler_LazyModule.__dir__iterlistsknown_moduleshttp_cookiesReturn an iterator over the (key, value) pairs of a dictionary.binary_typeLazy loading of moved objects in six.moves.urllib_errorIterator.next_print__func__new_attr_SixMetaPathImporter.get_code__wrapped__tkinter.tixabsolute_importtkinter.dndModule_six_moves_urllib_erroradvance_iteratorTkdndno such move, %rmoves.urllib.parsesep must be None or a stringhtml.entitiesAdd an item to six.moves.python_2_unicode_compatible.<locals>.<lambda>Return an iterator over the (key, [values]) pairs of a dictionary._SixMetaPathImporter.find_moduleUtilities for writing code that runs on Python 2 and 3attrgetterThis loader does not know module tkinter_filedialogImport module, returning the module after the last dot._SixMetaPathImporter._get_moduleStructThe new-style print function for Python 2.4 and 2.5.exec__import_moduleget_function_globalsfilterfalseifilterfalseGet the function out of a possibly unbound functionget_function_code/home/christian/.local/lib/python3.6/site-packages/six.pyModule_six_moves_urllib.__dir__assertRegexpMatchesemail.mime.texthtml_entities_urllib_parse_moved_attributesitemgetter__mro___SixMetaPathImporter.load_module_assertRaisesRegexMAXSIZE_urllib_error_moved_attributespopargvquitsendleveldecodepicklerstripstdoutstricttargetwinregxrangeBytesIOOpenKey__all____cmp____doc___winregcopyregenvironinspectobliquereplacexrange_<listcomp>__dict____exit____main____path____spec__as_bytesbasenamecopy_regexc_infofromlistget_rectgeterrorpropertysplitext__class____debug____enter__bytearraycStringIOitertoolstransform__author____cached____import____module__as_unicodeblit_arraystartswithsubprocess__getitem____package____version__classmethodget_BytesIOQueryValueEx__builtins____internal____qualname__staticmethod__metaclass__unicode_escapePY_MAJOR_VERSIONarray_to_surfacegetwindowsversionHKEY_LOCAL_MACHINEpygame.timeinvalid array typelatin-1/usr/bin/python3pygame.versionpygame.surfarray.blit_array(Surface, array): return None

    Blit directly from a array values.

    Directly copy values from an array into a Surface. This is faster than
    converting the array into a Surface and blitting. The array must be the
    same dimensions as the Surface and will completely replace all pixel
    values. Only integer, ascii character and record arrays are accepted.

    This function will temporarily lock the Surface as the new values are
    copied.
    pygame.mask%s argument after ** must be a mapping, not %s%s argument after * must be an iterable, not %spygame.surfarray.make_surface (array): return Surface

    Copy an array to a new surface.

    Create a new Surface that best resembles the data and format on the
    array. The array can be 2D or 3D with any sized integer values.
    utf-8pygame.pixelcopypygame.transform„            ^   @   sL  d Z ddlmZ ddlZddlZddlZddlZddlZddlZddl	Z	ddl
Z
ddlZddlZddlZddlZddlZddlZddlZddlZddlZddlZddlZddlZddlZddlZddlmZ yddlZW n ek
rÙ   ddlZY nX ddlmZ ddl m!Z!m"Z"m#Z# ddlm$Z$ yddlm%Z%m&Z&m'Z' d	Z(W n ek
êrX   d
Z(Y nX ddlm)Z* ddl+m,Z,m-Z- yddl.j/Z0e0j1 W n ek
êr§   dZ0Y nX ddl2m3Z3 ddlm4Z4 ddlm5Z5 e6dÉ e6dÉ e6dÉ e6dÉ d¯ej7  k êo d˘k n  êre8dÉÇej9êr dZ:dZ;dZ<dZ=dZ>dZ?dZ@dZAdZBdZCdZDdZEdZFdZGdZHdZIdZJdZKdZLG ddÑ deMÉZNddÑ ZOi ZPddÑ ZQddÑ ZRdd Ñ ZSd!d"Ñ ZTd#d$Ñ ZUd%d&Ñ ZVd'd(Ñ ZWd)d*Ñ  ZXZYd+d,Ñ ZZd-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLddMddNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpgFZ[G dqdHÑ dHe\ÉZ]G drdIÑ dIe]ÉZ^G dsdtÑ dte^ÉZ_G dudJÑ dJe]ÉZ`G dvdKÑ dKe]ÉZai ZbejcddÖ ZddZedwZfdZgdZhd˙ZidxdlÑ Zjdyd/Ñ Zkg fdzd{ÑZld|d}Ñ Zmd~dÑ ZnejodÄÉZpejodÅÉZqenZrdÇdQÑ ZsdÉd.Ñ ZtetZudÑd0Ñ ZvdÖd1Ñ Zwd˚dÜd2ÑZxdád3Ñ ZyG dàd_Ñ d_ÉZzG dâd`Ñ d`ezÉZ{G dädCÑ dCe|ÉZ}G dãdåÑ dåe~ÉZG dçdBÑ dBe|ÉZÄeÄZÅG dédLÑ dLe8ÉZÇG dèdDÑ dDÉZÉdêdAÑ ZÑdëdNÑ ZÖdídOÑ ZÜdìdTÑ ZádîdUÑ ZàdïdVÑ Zâd¸dñdWÑZäG dódfÑ dfÉZãeje|eãÉ G dòdgÑ dgeãÉZåG dôdhÑ dheåÉZçeçjéÉ  G döddÑ ddeãÉZèeèÉ ZêG dõdúÑ dúe~ÉZëG dùdûÑ dûeëÉZíG düdiÑ dieåÉZìeje
jîeìÉ G d†daÑ daeèÉZïG d°dbÑ dbeçÉZñG d¢dcÑ dceìÉZóeQd£i d§ç d•djÑ Zòd˝d¶d>ÑZôd˛dßd®ÑZöeòe
jîeöÉ dˇd©d™ÑZõeòe|eõÉ d´d¨Ñ Zúêd d≠dÆÑZùdØd∞Ñ ZûG d±d≤Ñ d≤ÉZüd≥d¥Ñ Z†dµd∂Ñ Z°d∑d∏Ñ Z¢dπd∫Ñ Z£eòej§eùÉ e•e0dªÉêrneòe0j¶eùÉ eQd£i dºç eQd£i dΩç dædkÑ Zßdød¿Ñ Z®d¡d¬Ñ Z©d√d;Ñ Z™êddƒdmÑZ´d≈d∆Ñ Z¨eßej§e¨É eße
jîe¨É e•e0dªÉêrÍeße0j¶e¨É d«d»Ñ Z≠eße|e≠É d…dYÑ ZÆi fd dÀÑZØdÃdÕÑ Z∞dŒdœÑ Z±d–d—Ñ Z≤d“dRÑ Z≥ejod”Éj¥Zµejod‘ej∂ej∑B Éj¥Z∏G d’dGÑ dGe|ÉZπd÷d◊Ñ Z∫dÿdŸÑ ZªG d⁄dEÑ dEe|ÉZºG d€d‹Ñ d‹eºÉZΩG d›dﬁÑ dﬁeºÉZæeºeΩeædﬂúZød‡d·Ñ Z¿G d‚d„Ñ d„e¡ÉZ¬d‰dMÑ Z√G dÂdFÑ dFe5jƒj≈ÉZ≈dÊdÁÑ Z∆dËdÈÑ Z«dÍdXÑ Z»dÎdÏÑ Z…dÌdSÑ Z dÓdÔÑ ZÀejÃdeNd	dÒç dÚdÛÑ ZÕeÕeŒÉ fdÙdıÑÉZœeÕdˆd˜Ñ ÉZ–dS (  aZ  
Package resource API
--------------------

A resource is a logical file contained within a package, or a logical
subdirectory thereof.  The package resource API expects resource names
to have their path parts separated with ``/``, *not* whatever the local
path separator is.  Do not use os.path operations to manipulate resource
names being passed into the API.

The package resource API is designed to work with normal filesystem packages,
.egg files, and unpacked .egg files.  It can also work in a limited way with
.zip files and with custom PEP 302 loaders that support the ``get_data()``
method.
È    )⁄absolute_importN)⁄get_importer)⁄six)⁄urllib⁄map⁄filter)⁄utime)⁄mkdir⁄rename⁄unlinkTF)⁄open)⁄isdir⁄splitÈ   )⁄
py31compat)⁄appdirs)⁄	packagingz&pkg_resources.extern.packaging.versionz)pkg_resources.extern.packaging.specifiersz+pkg_resources.extern.packaging.requirementsz&pkg_resources.extern.packaging.markersÈ   zPython 3.3 or later is requiredc               @   s   e Zd ZdZdS )⁄PEP440Warningza
    Used when there is an issue with a version or specifier not complying with
    PEP 440.
    N)⁄__name__⁄
__module__⁄__qualname__⁄__doc__© r   r   ˙8/usr/lib/python3/dist-packages/pkg_resources/__init__.pyr   n   s   r   c             C   s2   yt jj| ÉS  t jjk
r,   t jj| ÉS X d S )N)r   ⁄version⁄Version⁄InvalidVersion⁄LegacyVersion)⁄vr   r   r   ⁄parse_versionu   s    r    c             K   s"   t É j|É tjtj|| ÉÉ d S )N)⁄globals⁄update⁄_state_vars⁄dict⁄fromkeys)⁄vartype⁄kwr   r   r   ⁄_declare_state   s    r(   c              C   s<   i } t É }x,tjÉ D ] \}}|d|  || É| |< qW | S )NZ_sget_)r!   r#   ⁄items)⁄state⁄g⁄kr   r   r   r   ⁄__getstate__Ñ   s
    r-   c             C   s<   t É }x0| jÉ D ]$\}}|dt|   ||| |É qW | S )NZ_sset_)r!   r)   r#   )r*   r+   r,   r   r   r   r   ⁄__setstate__å   s     r.   c             C   s   | j É S )N)⁄copy)⁄valr   r   r   ⁄
_sget_dictì   s    r1   c             C   s   |j É  |j|É d S )N)⁄clearr"   )⁄key⁄obr*   r   r   r   ⁄
_sset_dictó   s    r5   c             C   s   | j É S )N)r-   )r0   r   r   r   ⁄_sget_objectú   s    r6   c             C   s   |j |É d S )N)r.   )r3   r4   r*   r   r   r   ⁄_sset_object†   s    r7   c              G   s   d S )Nr   )⁄argsr   r   r   ⁄<lambda>§   s    r9   c              C   sb   t É } tj| É}|dk	r^tjdkr^y&ddjtÉ ddÖ É|jdÉf } W n tk
r\   Y nX | S )aZ  Return this platform's maximum compatible version.

    distutils.util.get_platform() normally reports the minimum version
    of Mac OS X that would be required to *use* extensions produced by
    distutils.  But what we want when checking compatibility is to know the
    version of Mac OS X that we are *running*.  To allow usage of packages that
    explicitly require a newer version of Mac OS X, we must also know the
    current version of the OS.

    If this condition occurs for any other platform with a version in its
    platform strings, this function should be extended accordingly.
    N⁄darwinzmacosx-%s-%s⁄.È   r   )	⁄get_build_platform⁄macosVersionString⁄match⁄sys⁄platform⁄join⁄_macosx_vers⁄group⁄
ValueError)⁄plat⁄mr   r   r   ⁄get_supported_platformß   s    
&rH   ⁄require⁄
run_script⁄get_provider⁄get_distribution⁄load_entry_point⁄get_entry_map⁄get_entry_info⁄iter_entry_points⁄resource_string⁄resource_stream⁄resource_filename⁄resource_listdir⁄resource_exists⁄resource_isdir⁄declare_namespace⁄working_set⁄add_activation_listener⁄find_distributions⁄set_extraction_path⁄cleanup_resources⁄get_default_cache⁄Environment⁄
WorkingSet⁄ResourceManager⁄Distribution⁄Requirement⁄
EntryPoint⁄ResolutionError⁄VersionConflict⁄DistributionNotFound⁄UnknownExtra⁄ExtractionError⁄parse_requirements⁄	safe_name⁄safe_version⁄get_platform⁄compatible_platforms⁄yield_lines⁄split_sections⁄
safe_extra⁄to_filename⁄invalid_marker⁄evaluate_marker⁄ensure_directory⁄normalize_path⁄EGG_DIST⁄BINARY_DIST⁄SOURCE_DIST⁄CHECKOUT_DIST⁄DEVELOP_DIST⁄IMetadataProvider⁄IResourceProvider⁄FileMetadata⁄PathMetadata⁄EggMetadata⁄EmptyProvider⁄empty_provider⁄NullProvider⁄EggProvider⁄DefaultProvider⁄ZipProvider⁄register_finder⁄register_namespace_handler⁄register_loader_type⁄fixup_namespace_packagesr   ⁄run_main⁄AvailableDistributionsc               @   s   e Zd ZdZddÑ ZdS )rd   z.Abstract base for dependency resolution errorsc             C   s   | j jt| jÉ S )N)⁄	__class__r   ⁄reprr8   )⁄selfr   r   r   ⁄__repr__Ò   s    zResolutionError.__repr__N)r   r   r   r   rè   r   r   r   r   rd   Ó   s   c               @   s<   e Zd ZdZdZeddÑ ÉZeddÑ ÉZddÑ Zd	d
Ñ Z	dS )re   z™
    An already-installed version conflicts with the requested version.

    Should be initialized with the installed Distribution and the requested
    Requirement.
    z3{self.dist} is installed but {self.req} is requiredc             C   s
   | j d S )Nr   )r8   )ré   r   r   r   ⁄distˇ   s    zVersionConflict.distc             C   s
   | j d S )Nr   )r8   )ré   r   r   r   ⁄req  s    zVersionConflict.reqc             C   s   | j jf tÉ éS )N)⁄	_template⁄format⁄locals)ré   r   r   r   ⁄report  s    zVersionConflict.reportc             C   s   |s| S | j |f }t|é S )zt
        If required_by is non-empty, return a version of self that is a
        ContextualVersionConflict.
        )r8   ⁄ContextualVersionConflict)ré   ⁄required_byr8   r   r   r   ⁄with_context
  s    zVersionConflict.with_contextN)
r   r   r   r   rí   ⁄propertyrê   rë   rï   rò   r   r   r   r   re   ı   s   c               @   s&   e Zd ZdZejd ZeddÑ ÉZdS )rñ   zÖ
    A VersionConflict that accepts a third parameter, the set of the
    requirements that required the installed Distribution.
    z by {self.required_by}c             C   s
   | j d S )Nr<   )r8   )ré   r   r   r   ró     s    z%ContextualVersionConflict.required_byN)r   r   r   r   re   rí   rô   ró   r   r   r   r   rñ     s   
rñ   c               @   sH   e Zd ZdZdZeddÑ ÉZeddÑ ÉZeddÑ ÉZd	d
Ñ Z	ddÑ Z
dS )rf   z&A requested distribution was not foundzSThe '{self.req}' distribution was not found and is required by {self.requirers_str}c             C   s
   | j d S )Nr   )r8   )ré   r   r   r   rë   (  s    zDistributionNotFound.reqc             C   s
   | j d S )Nr   )r8   )ré   r   r   r   ⁄	requirers,  s    zDistributionNotFound.requirersc             C   s   | j s
dS dj| j ÉS )Nzthe applicationz, )rö   rB   )ré   r   r   r   ⁄requirers_str0  s    z"DistributionNotFound.requirers_strc             C   s   | j jf tÉ éS )N)rí   rì   rî   )ré   r   r   r   rï   6  s    zDistributionNotFound.reportc             C   s   | j É S )N)rï   )ré   r   r   r   ⁄__str__9  s    zDistributionNotFound.__str__N)r   r   r   r   rí   rô   rë   rö   rõ   rï   rú   r   r   r   r   rf   "  s   c               @   s   e Zd ZdZdS )rg   z>Distribution doesn't have an "extra feature" of the given nameN)r   r   r   r   r   r   r   r   rg   =  s   r<   c             C   s   |t | < dS )a  Register `provider_factory` to make providers for `loader_type`

    `loader_type` is the type or class of a PEP 302 ``module.__loader__``,
    and `provider_factory` is a function that, passed a *module* object,
    returns an ``IResourceProvider`` for that module.
    N)⁄_provider_factories)⁄loader_type⁄provider_factoryr   r   r   rà   K  s    c             C   st   t | tÉr$tj| Ép"tt| ÉÉd S ytj|  }W n& tk
rX   t	| É tj|  }Y nX t
|ddÉ}tt|É|ÉS )z?Return an IResourceProvider for the named module or requirementr   ⁄
__loader__N)⁄
isinstancerb   rX   ⁄findrI   ⁄strr@   ⁄modules⁄KeyError⁄
__import__⁄getattr⁄_find_adapterrù   )⁄moduleOrReq⁄module⁄loaderr   r   r   rK   U  s    
c             C   sd   | s\t jÉ d }|dkrLd}tjj|ÉrLttdÉrLtj|É}d|krL|d }| j|j	dÉÉ | d S )Nr   ⁄ z0/System/Library/CoreServices/SystemVersion.plist⁄	readPlistZProductVersionr;   )
rA   ⁄mac_ver⁄os⁄path⁄exists⁄hasattr⁄plistlibr≠   ⁄appendr   )⁄_cacher   ⁄plist⁄plist_contentr   r   r   rC   b  s    

rC   c             C   s   dddúj | | ÉS )NZppc)ZPowerPCZPower_Macintosh)⁄get)⁄machiner   r   r   ⁄_macosx_archr  s    r∫   c              C   s§   yddl m}  W n  tk
r0   ddlm}  Y nX | É }tjdkr†|jdÉ r†y<tÉ }tj	É d j
ddÉ}dt|d Ét|d	 Ét|Éf S  tk
rû   Y nX |S )
zƒReturn this platform's string for platform-specific distributions

    XXX Currently this is the same as ``distutils.util.get_platform()``, but it
    needs some hacks for Linux and Mac OS X.
    r   )rl   r:   zmacosx-È   ˙ ⁄_zmacosx-%d.%d-%sr   )⁄	sysconfigrl   ⁄ImportError⁄distutils.utilr@   rA   ⁄
startswithrC   rØ   ⁄uname⁄replace⁄intr∫   rE   )rl   rF   r   rπ   r   r   r   r=   v  s    r=   zmacosx-(\d+)\.(\d+)-(.*)zdarwin-(\d+)\.(\d+)\.(\d+)-(.*)c             C   sË   | dks|dks| |krdS t j|É}|r‰t j| É}|sîtj| É}|rêt|jdÉÉ}d|jdÉ|jdÉf }|dkr||dkså|dkrê|d	krêdS d
S |jdÉ|jdÉksº|jdÉ|jdÉkr¿d
S t|jdÉÉt|jdÉÉkr‡d
S dS d
S )z€Can code for the `provided` platform run on the `required` platform?

    Returns true if either platform is ``None``, or the platforms are equal.

    XXX Needs compatibility checks for Linux and other unixy OSes.
    NTr   z%s.%sr<   È   z10.3È   z10.4Fr   )r>   r?   ⁄darwinVersionStringrƒ   rD   )⁄provided⁄required⁄reqMac⁄provMac⁄
provDarwin⁄dversion⁄macosversionr   r   r   rm   ò  s*    


c             C   s<   t jdÉj}|d }|jÉ  ||d< t| Éd j||É dS )z@Locate distribution `dist_spec` and run its `script_name` scriptr   r   r   N)r@   ⁄	_getframe⁄	f_globalsr2   rI   rJ   )⁄	dist_spec⁄script_name⁄ns⁄namer   r   r   rJ   ∆  s
    c             C   s@   t | tjÉrtj| É} t | tÉr(t| É} t | tÉs<td| ÉÇ| S )z@Return a current distribution object for a Requirement or stringz-Expected string, Requirement, or Distribution)r°   r   ⁄string_typesrb   ⁄parserK   ra   ⁄	TypeError)rê   r   r   r   rL   ”  s    



c             C   s   t | Éj||ÉS )zDReturn `name` entry point of `group` for `dist` or raise ImportError)rL   rM   )rê   rD   r‘   r   r   r   rM   ﬁ  s    c             C   s   t | Éj|ÉS )z=Return the entry point map for `group`, or the full entry map)rL   rN   )rê   rD   r   r   r   rN   „  s    c             C   s   t | Éj||ÉS )z<Return the EntryPoint object for `group`+`name`, or ``None``)rL   rO   )rê   rD   r‘   r   r   r   rO   Ë  s    c               @   s<   e Zd ZddÑ ZddÑ ZddÑ ZddÑ Zd	d
Ñ ZddÑ ZdS )r{   c             C   s   dS )z;Does the package's distribution contain the named metadata?Nr   )r‘   r   r   r   ⁄has_metadataÓ  s    zIMetadataProvider.has_metadatac             C   s   dS )z'The named metadata resource as a stringNr   )r‘   r   r   r   ⁄get_metadataÒ  s    zIMetadataProvider.get_metadatac             C   s   dS )z“Yield named metadata resource as list of non-blank non-comment lines

       Leading and trailing whitespace is stripped from each line, and lines
       with ``#`` as the first non-blank character are omitted.Nr   )r‘   r   r   r   ⁄get_metadata_linesÙ  s    z$IMetadataProvider.get_metadata_linesc             C   s   dS )z>Is the named metadata a directory?  (like ``os.path.isdir()``)Nr   )r‘   r   r   r   ⁄metadata_isdir˙  s    z IMetadataProvider.metadata_isdirc             C   s   dS )z?List of metadata names in the directory (like ``os.listdir()``)Nr   )r‘   r   r   r   ⁄metadata_listdir˝  s    z"IMetadataProvider.metadata_listdirc             C   s   dS )z=Execute the named script in the supplied namespace dictionaryNr   )r“   ⁄	namespacer   r   r   rJ      s    zIMetadataProvider.run_scriptN)	r   r   r   rÿ   rŸ   r⁄   r€   r‹   rJ   r   r   r   r   r{   Ì  s   c               @   s@   e Zd ZdZddÑ ZddÑ ZddÑ Zdd	Ñ Zd
dÑ ZddÑ Z	dS )r|   z3An object that provides access to package resourcesc             C   s   dS )zdReturn a true filesystem path for `resource_name`

        `manager` must be an ``IResourceManager``Nr   )⁄manager⁄resource_namer   r   r   ⁄get_resource_filename  s    z'IResourceProvider.get_resource_filenamec             C   s   dS )ziReturn a readable file-like object for `resource_name`

        `manager` must be an ``IResourceManager``Nr   )rﬁ   rﬂ   r   r   r   ⁄get_resource_stream  s    z%IResourceProvider.get_resource_streamc             C   s   dS )zmReturn a string containing the contents of `resource_name`

        `manager` must be an ``IResourceManager``Nr   )rﬁ   rﬂ   r   r   r   ⁄get_resource_string  s    z%IResourceProvider.get_resource_stringc             C   s   dS )z,Does the package contain the named resource?Nr   )rﬂ   r   r   r   ⁄has_resource  s    zIResourceProvider.has_resourcec             C   s   dS )z>Is the named resource a directory?  (like ``os.path.isdir()``)Nr   )rﬂ   r   r   r   rV     s    z IResourceProvider.resource_isdirc             C   s   dS )z?List of resource names in the directory (like ``os.listdir()``)Nr   )rﬂ   r   r   r   rT     s    z"IResourceProvider.resource_listdirN)
r   r   r   r   r‡   r·   r‚   r„   rV   rT   r   r   r   r   r|     s   c               @   s¨   e Zd ZdZd'ddÑZeddÑ ÉZeddÑ ÉZd	d
Ñ ZddÑ Z	ddÑ Z
d(ddÑZddÑ ZddÑ Zd)ddÑZd*ddÑZd+ddÑZddÑ Zd,dd ÑZd!d"Ñ Zd#d$Ñ Zd%d&Ñ ZdS )-r_   zDA collection of active distributions on sys.path (or a similar list)Nc             C   sB   g | _ i | _i | _g | _|dkr&tj}x|D ]}| j|É q,W dS )z?Create working set from list of path entries (default=sys.path)N)⁄entries⁄
entry_keys⁄by_key⁄	callbacksr@   r∞   ⁄	add_entry)ré   r‰   ⁄entryr   r   r   ⁄__init__#  s    
zWorkingSet.__init__c             C   sZ   | É }yddl m} W n tk
r*   |S X y|j|É W n tk
rT   | j|ÉS X |S )z1
        Prepare the master working set.
        r   )⁄__requires__)⁄__main__rÎ   rø   rI   re   ⁄_build_from_requirements)⁄cls⁄wsrÎ   r   r   r   ⁄_build_master0  s    zWorkingSet._build_masterc             C   sn   | g É}t |É}|j|tÉ É}x|D ]}|j|É q$W x"tjD ]}||jkr>|j|É q>W |jtjddÖ< |S )zQ
        Build a working set from a requirement spec. Rewrites sys.path.
        N)ri   ⁄resolver^   ⁄addr@   r∞   r‰   rË   )rÓ   ⁄req_specrÔ   ⁄reqs⁄distsrê   rÈ   r   r   r   rÌ   D  s    

z#WorkingSet._build_from_requirementsc             C   s@   | j j|g É | jj|É x t|dÉD ]}| j||dÉ q&W dS )a›  Add a path item to ``.entries``, finding any distributions on it

        ``find_distributions(entry, True)`` is used to find distributions
        corresponding to the path entry, and they are added.  `entry` is
        always appended to ``.entries``, even if it is already present.
        (This is because ``sys.path`` can contain the same value more than
        once, and the ``.entries`` of the ``sys.path`` WorkingSet should always
        equal ``sys.path``.)
        TFN)rÂ   ⁄
setdefaultr‰   r¥   rZ   rÚ   )ré   rÈ   rê   r   r   r   rË   Z  s    
zWorkingSet.add_entryc             C   s   | j j|jÉ|kS )z9True if `dist` is the active distribution for its project)rÊ   r∏   r3   )ré   rê   r   r   r   ⁄__contains__i  s    zWorkingSet.__contains__c             C   s,   | j j|jÉ}|dk	r(||kr(t||ÉÇ|S )a–  Find a distribution matching requirement `req`

        If there is an active distribution for the requested project, this
        returns it as long as it meets the version requirement specified by
        `req`.  But, if there is an active distribution for the project and it
        does *not* meet the `req` requirement, ``VersionConflict`` is raised.
        If there is no active distribution for the requested project, ``None``
        is returned.
        N)rÊ   r∏   r3   re   )ré   rë   rê   r   r   r   r¢   m  s    

zWorkingSet.findc             c   sP   xJ| D ]B}|j |É}|dkr6x*|jÉ D ]
}|V  q&W q||kr|| V  qW dS )a  Yield entry point objects from `group` matching `name`

        If `name` is None, yields all entry points in `group` from all
        distributions in the working set, otherwise only ones matching
        both `group` and `name` are yielded (in distribution order).
        N)rN   ⁄values)ré   rD   r‘   rê   r‰   ⁄epr   r   r   rP   }  s    

zWorkingSet.iter_entry_pointsc             C   s>   t jdÉj}|d }|jÉ  ||d< | j|Éd j||É dS )z?Locate distribution for `requires` and run `script_name` scriptr   r   r   N)r@   rœ   r–   r2   rI   rJ   )ré   ⁄requiresr“   r”   r‘   r   r   r   rJ   å  s
    zWorkingSet.run_scriptc             c   sT   i }xJ| j D ]@}|| jkrqx.| j| D ] }||kr(d||< | j| V  q(W qW dS )z∏Yield distributions for non-duplicate projects in the working set

        The yield order is the order in which the items' path entries were
        added to the working set.
        r   N)r‰   rÂ   rÊ   )ré   ⁄seen⁄itemr3   r   r   r   ⁄__iter__î  s    
zWorkingSet.__iter__TFc             C   sû   |r|j | j||dç |dkr$|j}| jj|g É}| jj|jg É}| rX|j| jkrXdS || j|j< |j|krz|j|jÉ |j|krê|j|jÉ | j|É dS )a  Add `dist` to working set, associated with `entry`

        If `entry` is unspecified, it defaults to the ``.location`` of `dist`.
        On exit from this routine, `entry` is added to the end of the working
        set's ``.entries`` (if it wasn't already present).

        `dist` is only added to the working set if it's for a project that
        doesn't already have a distribution in the set, unless `replace=True`.
        If it's added, any callbacks registered with the ``subscribe()`` method
        will be called.
        )r√   N)	⁄	insert_onr‰   ⁄locationrÂ   rˆ   r3   rÊ   r¥   ⁄
_added_new)ré   rê   rÈ   ⁄insertr√   ⁄keys⁄keys2r   r   r   rÚ   •  s    

zWorkingSet.addc             C   sÜ  t |ÉdddÖ }i }i }g }tÉ }	tjtÉ}
êxP|êrÄ|jdÉ}||krLq2|	j||ÉsZq2|j|jÉ}|dkêr
| j	j|jÉ}|dksî||koê|êr | }|dkrƒ|dkr¥t
| jÉ}nt
g É}tg É}|j||||dç }||j< |dkêr |
j|dÉ}t||ÉÇ|j|É ||kêr,|
| }t||Éj|ÉÇ|j|jÉdddÖ }|j|É x(|D ] }|
| j|jÉ |j|	|< êqRW d||< q2W |S )aŒ  List all distributions needed to (recursively) meet `requirements`

        `requirements` must be a sequence of ``Requirement`` objects.  `env`,
        if supplied, should be an ``Environment`` instance.  If
        not supplied, it defaults to all distributions available within any
        entry or distribution in the working set.  `installer`, if supplied,
        will be invoked with each requirement that cannot be met by an
        already-installed distribution; it should return a ``Distribution`` or
        ``None``.

        Unless `replace_conflicting=True`, raises a VersionConflict exception
        if
        any requirements are found on the path that have the correct name but
        the wrong version.  Otherwise, if an `installer` is supplied it will be
        invoked to obtain the correct version of the requirement and activate
        it.

        `extras` is a list of the extras to be used with these requirements.
        This is important because extra requirements may look like `my_req;
        extra = "my_extra"`, which would otherwise be interpreted as a purely
        optional requirement.  Instead, we want to be able to assert that these
        requirements are truly required.
        Nr   r   )⁄replace_conflictingTÈˇˇˇˇr  )⁄list⁄
_ReqExtras⁄collections⁄defaultdict⁄set⁄pop⁄markers_passr∏   r3   rÊ   r^   r‰   r_   ⁄
best_matchrf   r¥   re   rò   r˙   ⁄extras⁄extendrÚ   ⁄project_name)ré   ⁄requirements⁄env⁄	installerr  r  ⁄	processed⁄best⁄to_activate⁄
req_extrasró   rë   rê   rÔ   rö   ⁄dependent_req⁄new_requirements⁄new_requirementr   r   r   rÒ   √  sN    









zWorkingSet.resolvec             C   s  t |É}|jÉ  i }i }|dkr4t| jÉ}||7 }n|| }| jg É}	t t|	j| ÉÉ xí|D ]ä}
xÑ||
 D ]x}|jÉ g}y|	j|||É}W n4 t	k
ræ } z|||< |r¨wjnP W Y dd}~X qjX t t|	j|ÉÉ |j
tj|ÉÉ P qjW q\W t |É}|jÉ  ||fS )as  Find all activatable distributions in `plugin_env`

        Example usage::

            distributions, errors = working_set.find_plugins(
                Environment(plugin_dirlist)
            )
            # add plugins+libs to sys.path
            map(working_set.add, distributions)
            # display errors
            print('Could not load', errors)

        The `plugin_env` should be an ``Environment`` instance that contains
        only distributions that are in the project's "plugin directory" or
        directories. The `full_env`, if supplied, should be an ``Environment``
        contains all currently-available distributions.  If `full_env` is not
        supplied, one is created automatically from the ``WorkingSet`` this
        method is called on, which will typically mean that every directory on
        ``sys.path`` will be scanned for distributions.

        `installer` is a standard installer callback as used by the
        ``resolve()`` method. The `fallback` flag indicates whether we should
        attempt to resolve older versions of a plugin if the newest version
        cannot be resolved.

        This method returns a 2-tuple: (`distributions`, `error_info`), where
        `distributions` is a list of the distributions found in `plugin_env`
        that were loadable, along with any other distributions that are needed
        to resolve their dependencies.  `error_info` is a dictionary mapping
        unloadable plugin distributions to an exception instance describing the
        error that occurred. Usually this will be a ``DistributionNotFound`` or
        ``VersionConflict`` instance.
        N)r  ⁄sortr^   r‰   rå   r   rÚ   ⁄as_requirementrÒ   rd   r"   r$   r%   )ré   ⁄
plugin_env⁄full_envr  ⁄fallback⁄plugin_projects⁄
error_info⁄distributionsr  ⁄
shadow_setr  rê   rë   ⁄	resolveesr   r   r   r   ⁄find_plugins  s4    $





zWorkingSet.find_pluginsc             G   s*   | j t|ÉÉ}x|D ]}| j|É qW |S )aæ  Ensure that distributions matching `requirements` are activated

        `requirements` must be a string or a (possibly-nested) sequence
        thereof, specifying the distributions and versions required.  The
        return value is a sequence of the distributions that needed to be
        activated to fulfill the requirements; all relevant distributions are
        included, even if they were already activated in this working set.
        )rÒ   ri   rÚ   )ré   r  ⁄neededrê   r   r   r   rI   s  s    	
zWorkingSet.requirec             C   s<   || j krdS | j j|É |s"dS x| D ]}||É q(W dS )zÉInvoke `callback` for all distributions

        If `existing=True` (default),
        call on all existing ones, as well.
        N)rÁ   r¥   )ré   ⁄callback⁄existingrê   r   r   r   ⁄	subscribeÉ  s    

zWorkingSet.subscribec             C   s   x| j D ]}||É qW d S )N)rÁ   )ré   rê   r'  r   r   r   r   ë  s    zWorkingSet._added_newc             C   s,   | j d d Ö | jjÉ | jjÉ | jd d Ö fS )N)r‰   rÂ   r/   rÊ   rÁ   )ré   r   r   r   r-   ï  s    zWorkingSet.__getstate__c             C   s@   |\}}}}|d d Ö | _ |jÉ | _|jÉ | _|d d Ö | _d S )N)r‰   r/   rÂ   rÊ   rÁ   )ré   ⁄e_k_b_cr‰   r  rÊ   rÁ   r   r   r   r.   õ  s
    

zWorkingSet.__setstate__)N)N)NTF)NNFN)NNT)T)r   r   r   r   rÍ   ⁄classmethodr   rÌ   rË   r˜   r¢   rP   rJ   r˝   rÚ   rÒ   r%  rI   r)  r   r-   r.   r   r   r   r   r_      s&   


 
\
S
c               @   s   e Zd ZdZdddÑZdS )r  z>
    Map each requirement to the extras that demanded it.
    Nc                s2   á fddÑ| j à f É|pd D É}à j p0t|ÉS )zª
        Evaluate markers for req against each extra that
        demanded it.

        Return False if the req has a marker and fails
        evaluation. Otherwise, return True.
        c             3   s   | ]}à j jd |iÉV  qdS )⁄extraN)⁄marker⁄evaluate)⁄.0r,  )rë   r   r   ˙	<genexpr>±  s   z*_ReqExtras.markers_pass.<locals>.<genexpr>N)N)r∏   r-  ⁄any)ré   rë   r  ⁄extra_evalsr   )rë   r   r  ®  s    	
z_ReqExtras.markers_pass)N)r   r   r   r   r  r   r   r   r   r  £  s   r  c               @   sx   e Zd ZdZdeÉ efddÑZddÑ ZddÑ Zdd	d
ÑZ	ddÑ Z
ddÑ ZdddÑZdddÑZddÑ ZddÑ ZddÑ ZdS )r^   z5Searchable snapshot of distributions on a search pathNc             C   s    i | _ || _|| _| j|É dS )a!  Snapshot distributions available on a search path

        Any distributions found on `search_path` are added to the environment.
        `search_path` should be a sequence of ``sys.path`` items.  If not
        supplied, ``sys.path`` is used.

        `platform` is an optional string specifying the name of the platform
        that platform-specific distributions must be compatible with.  If
        unspecified, it defaults to the current platform.  `python` is an
        optional string naming the desired version of Python (e.g. ``'3.3'``);
        it defaults to the current version.

        You may explicitly set `platform` (and/or `python`) to ``None`` if you
        wish to map *all* distributions, not just those compatible with the
        running platform or Python version.
        N)⁄_distmaprA   ⁄python⁄scan)ré   ⁄search_pathrA   r4  r   r   r   rÍ   ∫  s    zEnvironment.__init__c             C   s2   | j dkp|jdkp|j| j k}|o0t|j| jÉS )zÂIs distribution `dist` acceptable for this environment?

        The distribution must match the platform and python version
        requirements specified when this environment was created, or False
        is returned.
        N)r4  ⁄
py_versionrm   rA   )ré   rê   ⁄	py_compatr   r   r   ⁄can_add“  s    

zEnvironment.can_addc             C   s   | j |j j|É dS )z"Remove `dist` from the environmentN)r3  r3   ⁄remove)ré   rê   r   r   r   r:  ‡  s    zEnvironment.removec             C   s<   |dkrt j}x(|D ] }xt|ÉD ]}| j|É q"W qW dS )ad  Scan `search_path` for distributions usable in this environment

        Any distributions found are added to the environment.
        `search_path` should be a sequence of ``sys.path`` items.  If not
        supplied, ``sys.path`` is used.  Only distributions conforming to
        the platform/python version defined at initialization are added.
        N)r@   r∞   rZ   rÚ   )ré   r6  r¸   rê   r   r   r   r5  ‰  s
    
zEnvironment.scanc             C   s   |j É }| jj|g ÉS )a  Return a newest-to-oldest list of distributions for `project_name`

        Uses case-insensitive `project_name` comparison, assuming all the
        project's distributions use their project's name converted to all
        lowercase as their key.

        )⁄lowerr3  r∏   )ré   r  ⁄distribution_keyr   r   r   ⁄__getitem__Û  s    zEnvironment.__getitem__c             C   sL   | j |ÉrH|jÉ rH| jj|jg É}||krH|j|É |jtjdÉddç dS )zLAdd `dist` if we ``can_add()`` it and it has not already been added
        ⁄hashcmpT)r3   ⁄reverseN)	r9  ⁄has_versionr3  rˆ   r3   r¥   r  ⁄operator⁄
attrgetter)ré   rê   rı   r   r   r   rÚ   ˛  s
    
zEnvironment.addFc             C   sf   y|j |É}W n tk
r,   |s$Ç d}Y nX |dk	r:|S x| |j D ]}||krF|S qFW | j||ÉS )a∏  Find distribution best matching `req` and usable on `working_set`

        This calls the ``find(req)`` method of the `working_set` to see if a
        suitable distribution is already active.  (This may raise
        ``VersionConflict`` if an unsuitable version of the project is already
        active in the specified `working_set`.)  If a suitable distribution
        isn't active, this method returns the newest distribution in the
        environment that meets the ``Requirement`` in `req`.  If no suitable
        distribution is found, and `installer` is supplied, then the result of
        calling the environment's ``obtain(req, installer)`` method will be
        returned.
        N)r¢   re   r3   ⁄obtain)ré   rë   rX   r  r  rê   r   r   r   r    s    
zEnvironment.best_matchc             C   s   |dk	r||ÉS dS )aﬁ  Obtain a distribution matching `requirement` (e.g. via download)

        Obtain a distro that matches requirement (e.g. via download).  In the
        base ``Environment`` class, this routine just returns
        ``installer(requirement)``, unless `installer` is None, in which case
        None is returned instead.  This method is a hook that allows subclasses
        to attempt other ways of obtaining a distribution before falling back
        to the `installer` argument.Nr   )ré   ⁄requirementr  r   r   r   rC  #  s    	zEnvironment.obtainc             c   s&   x | j jÉ D ]}| | r|V  qW dS )z=Yield the unique project names of the available distributionsN)r3  r  )ré   r3   r   r   r   r˝   /  s    zEnvironment.__iter__c             C   s^   t |tÉr| j|É nDt |tÉrLx8|D ] }x|| D ]}| j|É q4W q&W ntd|f ÉÇ| S )z2In-place addition of a distribution or environmentzCan't add %r to environment)r°   ra   rÚ   r^   r◊   )ré   ⁄other⁄projectrê   r   r   r   ⁄__iadd__5  s    


zEnvironment.__iadd__c             C   s.   | j g dddç}x| |fD ]}||7 }qW |S )z4Add an environment or distribution to an environmentN)rA   r4  )rå   )ré   rE  ⁄newr  r   r   r   ⁄__add__A  s    zEnvironment.__add__)N)NF)N)r   r   r   r   rH   ⁄PY_MAJORrÍ   r9  r:  r5  r=  rÚ   r  rC  r˝   rG  rI  r   r   r   r   r^   ∑  s   



c               @   s   e Zd ZdZdS )rh   aT  An error occurred extracting a resource

    The following attributes are available from instances of this exception:

    manager
        The resource manager that raised this exception

    cache_path
        The base directory for resource extraction

    original_error
        The exception instance that caused extraction to fail
    N)r   r   r   r   r   r   r   r   rh   M  s   c               @   sÜ   e Zd ZdZdZddÑ ZddÑ ZddÑ Zd	d
Ñ ZddÑ Z	ddÑ Z
ddÑ ZddÑ Zf fddÑZeddÑ ÉZddÑ ZddÑ ZdddÑZdS )r`   z'Manage resource extraction and packagesNc             C   s
   i | _ d S )N)⁄cached_files)ré   r   r   r   rÍ   a  s    zResourceManager.__init__c             C   s   t |Éj|ÉS )zDoes the named resource exist?)rK   r„   )ré   ⁄package_or_requirementrﬂ   r   r   r   rU   d  s    zResourceManager.resource_existsc             C   s   t |Éj|ÉS )z,Is the named resource an existing directory?)rK   rV   )ré   rL  rﬂ   r   r   r   rV   h  s    zResourceManager.resource_isdirc             C   s   t |Éj| |ÉS )z4Return a true filesystem path for specified resource)rK   r‡   )ré   rL  rﬂ   r   r   r   rS   n  s    z!ResourceManager.resource_filenamec             C   s   t |Éj| |ÉS )z9Return a readable file-like object for specified resource)rK   r·   )ré   rL  rﬂ   r   r   r   rR   t  s    zResourceManager.resource_streamc             C   s   t |Éj| |ÉS )z%Return specified resource as a string)rK   r‚   )ré   rL  rﬂ   r   r   r   rQ   z  s    zResourceManager.resource_stringc             C   s   t |Éj|ÉS )z1List the contents of the named resource directory)rK   rT   )ré   rL  rﬂ   r   r   r   rT   Ä  s    z ResourceManager.resource_listdirc             C   sR   t jÉ d }| jptÉ }tjdÉjÉ }t|jf t	É éÉ}| |_
||_||_|ÇdS )z5Give an error message for problems extracting file(s)r   a  
            Can't extract file(s) to egg cache

            The following error occurred while trying to extract file(s)
            to the Python egg cache:

              {old_exc}

            The Python egg cache directory is currently set to:

              {cache_path}

            Perhaps your account does not have write access to this directory?
            You can change the cache directory by setting the PYTHON_EGG_CACHE
            environment variable to point to an accessible directory.
            N)r@   ⁄exc_info⁄extraction_pathr]   ⁄textwrap⁄dedent⁄lstriprh   rì   rî   rﬁ   ⁄
cache_path⁄original_error)ré   ⁄old_excrR  ⁄tmpl⁄errr   r   r   ⁄extraction_errorÜ  s    
z ResourceManager.extraction_errorc             C   sf   | j p
tÉ }tjj||d f|ûé }yt|É W n tk
rL   | jÉ  Y nX | j|É d| j	|< |S )aÆ  Return absolute location in cache for `archive_name` and `names`

        The parent directory of the resulting path will be created if it does
        not already exist.  `archive_name` should be the base filename of the
        enclosing egg (which may not be the name of the enclosing zipfile!),
        including its ".egg" extension.  `names`, if provided, should be a
        sequence of path name parts "under" the egg's extraction location.

        This method should only be called by resource providers that need to
        obtain an extraction location, and only for names they intend to
        extract, as it tracks the generated names for possible cleanup later.
        z-tmpr   )
rN  r]   rØ   r∞   rB   ⁄_bypass_ensure_directory⁄	ExceptionrW  ⁄_warn_unsafe_extraction_pathrK  )ré   ⁄archive_name⁄names⁄extract_path⁄target_pathr   r   r   ⁄get_cache_path¢  s    

zResourceManager.get_cache_pathc             C   sX   t jdkr | jt jd É r dS t j| Éj}|tj@ s@|tj@ rTd|  }tj	|t
É dS )aN  
        If the default extraction path is overridden and set to an insecure
        location, such as /tmp, it opens up an opportunity for an attacker to
        replace an extracted file with an unauthorized payload. Warn the user
        if a known insecure location is used.

        See Distribute #375 for more details.
        ⁄ntZwindirNzÀ%s is writable by group/others and vulnerable to attack when used with get_resource_filename. Consider a more secure location (set with .set_extraction_path or the PYTHON_EGG_CACHE environment variable).)rØ   r‘   r¡   ⁄environ⁄stat⁄st_mode⁄S_IWOTH⁄S_IWGRP⁄warnings⁄warn⁄UserWarning)r∞   ⁄mode⁄msgr   r   r   rZ  ª  s    
z,ResourceManager._warn_unsafe_extraction_pathc             C   s.   t jdkr*t j|ÉjdB d@ }t j||É dS )a4  Perform any platform-specific postprocessing of `tempname`

        This is where Mac header rewrites should be done; other platforms don't
        have anything special they should do.

        Resource providers should call this method ONLY after successfully
        extracting a compressed resource.  They must NOT call it on resources
        that are already in the filesystem.

        `tempname` is the current (temporary) name of the file, and `filename`
        is the name it will be renamed to by the caller after this routine
        returns.
        ⁄posixim  iˇ  N)rØ   r‘   rb  rc  ⁄chmod)ré   ⁄tempname⁄filenameri  r   r   r   ⁄postprocess’  s    
zResourceManager.postprocessc             C   s   | j rtdÉÇ|| _dS )a“  Set the base path where resources will be extracted to, if needed.

        If you do not call this routine before any extractions take place, the
        path defaults to the return value of ``get_default_cache()``.  (Which
        is based on the ``PYTHON_EGG_CACHE`` environment variable, with various
        platform-specific fallbacks.  See that routine's documentation for more
        details.)

        Resources are extracted to subdirectories of this path based upon
        information given by the ``IResourceProvider``.  You may set this to a
        temporary directory, but then you must call ``cleanup_resources()`` to
        delete the extracted files when done.  There is no guarantee that
        ``cleanup_resources()`` will be able to remove all extracted files.

        (Note: you may not change the extraction path for a given resource
        manager once resources have been extracted, unless you first call
        ``cleanup_resources()``.)
        z5Can't change extraction path, files already extractedN)rK  rE   rN  )ré   r∞   r   r   r   r[   È  s    z#ResourceManager.set_extraction_pathFc             C   s   dS )aB  
        Delete all extracted resource files and directories, returning a list
        of the file and directory names that could not be successfully removed.
        This function does not have any concurrency protection, so it should
        generally only be called when the extraction path is a temporary
        directory exclusive to a single process.  This method is not
        automatically called; you must call it explicitly or register it as an
        ``atexit`` function if you wish to ensure cleanup of a temporary
        directory used for extractions.
        Nr   )ré   ⁄forcer   r   r   r\     s    z!ResourceManager.cleanup_resources)F)r   r   r   r   rN  rÍ   rU   rV   rS   rR   rQ   rT   rW  r_  ⁄staticmethodrZ  ro  r[   r\   r   r   r   r   r`   ]  s   c               C   s   t jjdÉptjddçS )zå
    Return the ``PYTHON_EGG_CACHE`` environment variable
    or a platform-relevant user cache dir for an app
    named "Python-Eggs".
    ZPYTHON_EGG_CACHEzPython-Eggs)⁄appname)rØ   ra  r∏   r   ⁄user_cache_dirr   r   r   r   r]     s    c             C   s   t jdd| ÉS )zèConvert an arbitrary string to a standard distribution name

    Any runs of non-alphanumeric/. characters are replaced with a single '-'.
    z[^A-Za-z0-9.]+˙-)⁄re⁄sub)r‘   r   r   r   rj     s    c             C   sD   yt tjj| ÉÉS  tjjk
r>   | jddÉ} tjdd| ÉS X dS )zB
    Convert an arbitrary string to a standard version string
    rº   r;   z[^A-Za-z0-9.]+rt  N)r£   r   r   r   r   r√   ru  rv  )r   r   r   r   rk   %  s
    c             C   s   t jdd| ÉjÉ S )z±Convert an arbitrary string to a standard 'extra' name

    Any runs of non-alphanumeric characters are replaced with a single '_',
    and the result is always lowercased.
    z[^A-Za-z0-9.-]+rΩ   )ru  rv  r;  )r,  r   r   r   rp   1  s    c             C   s   | j ddÉS )z|Convert a project or version name to its filename-escaped form

    Any '-' characters are currently replaced with '_'.
    rt  rΩ   )r√   )r‘   r   r   r   rq   :  s    c             C   s>   yt | É W n, tk
r8 } zd|_d|_|S d}~X nX dS )zo
    Validate text as a PEP 508 environment marker; return an exception
    if invalid or False otherwise.
    NF)rs   ⁄SyntaxErrorrn  ⁄lineno)⁄text⁄er   r   r   rr   B  s    c             C   sH   yt jj| É}|jÉ S  t jjk
rB } zt|ÉÇW Y dd}~X nX dS )zŸ
    Evaluate a PEP 508 environment marker.
    Return a boolean indicating the marker result in this environment.
    Raise SyntaxError if marker is invalid.

    This implementation uses the 'pyparsing' module.
    N)r   ⁄markers⁄Markerr.  ⁄InvalidMarkerrw  )ry  r,  r-  rz  r   r   r   rs   P  s
    c               @   s¨   e Zd ZdZdZdZdZddÑ ZddÑ ZddÑ Z	d	d
Ñ Z
ddÑ ZddÑ ZddÑ ZddÑ ZddÑ ZddÑ ZddÑ ZddÑ ZddÑ ZddÑ Zdd Ñ Zd!d"Ñ Zd#d$Ñ Zd%d&Ñ ZdS )'rÇ   zETry to implement resources and metadata for arbitrary PEP 302 loadersNc             C   s(   t |dd É| _tjjt |ddÉÉ| _d S )Nr†   ⁄__file__r¨   )rß   r´   rØ   r∞   ⁄dirname⁄module_path)ré   r™   r   r   r   rÍ   f  s    zNullProvider.__init__c             C   s   | j | j|ÉS )N)⁄_fnrÄ  )ré   rﬁ   rﬂ   r   r   r   r‡   j  s    z"NullProvider.get_resource_filenamec             C   s   t j| j||ÉÉS )N)⁄io⁄BytesIOr‚   )ré   rﬁ   rﬂ   r   r   r   r·   m  s    z NullProvider.get_resource_streamc             C   s   | j | j| j|ÉÉS )N)⁄_getrÅ  rÄ  )ré   rﬁ   rﬂ   r   r   r   r‚   p  s    z NullProvider.get_resource_stringc             C   s   | j | j| j|ÉÉS )N)⁄_hasrÅ  rÄ  )ré   rﬂ   r   r   r   r„   s  s    zNullProvider.has_resourcec             C   s   | j o| j| j| j |ÉÉS )N)⁄egg_inforÖ  rÅ  )ré   r‘   r   r   r   rÿ   v  s    zNullProvider.has_metadatac             C   s2   | j s
dS | j| j| j |ÉÉ}tjr.|jdÉS |S )Nr¨   zutf-8)rÜ  rÑ  rÅ  r   ⁄PY3⁄decode)ré   r‘   ⁄valuer   r   r   rŸ   y  s    zNullProvider.get_metadatac             C   s   t | j|ÉÉS )N)rn   rŸ   )ré   r‘   r   r   r   r⁄     s    zNullProvider.get_metadata_linesc             C   s   | j | j| j|ÉÉS )N)⁄_isdirrÅ  rÄ  )ré   rﬂ   r   r   r   rV   Ç  s    zNullProvider.resource_isdirc             C   s   | j o| j| j| j |ÉÉS )N)rÜ  rä  rÅ  )ré   r‘   r   r   r   r€   Ö  s    zNullProvider.metadata_isdirc             C   s   | j | j| j|ÉÉS )N)⁄_listdirrÅ  rÄ  )ré   rﬂ   r   r   r   rT   à  s    zNullProvider.resource_listdirc             C   s   | j r| j| j| j |ÉÉS g S )N)rÜ  rã  rÅ  )ré   r‘   r   r   r   r‹   ã  s    zNullProvider.metadata_listdirc       
      C   sÃ   d| }| j |És$tdjf tÉ éÉÇ| j|ÉjddÉ}|jddÉ}| j| j|É}||d< tj	j
|Érät|ÉjÉ }t||dÉ}t|||É n>dd	lm} t|Éd|jdÉ|f||< t||dÉ}	t|	||É d S )
Nzscripts/z<Script {script!r} not found in metadata at {self.egg_info!r}z
⁄
˙r~  ⁄execr   )⁄cache)rÿ   rd   rì   rî   rŸ   r√   rÅ  rÜ  rØ   r∞   r±   r   ⁄read⁄compileré  ⁄	linecacherè  ⁄lenr   )
ré   r“   r›   ⁄script⁄script_text⁄script_filename⁄source⁄coderè  ⁄script_coder   r   r   rJ   ê  s"    

zNullProvider.run_scriptc             C   s   t dÉÇd S )Nz9Can't perform this operation for unregistered loader type)⁄NotImplementedError)ré   r∞   r   r   r   rÖ  ß  s    zNullProvider._hasc             C   s   t dÉÇd S )Nz9Can't perform this operation for unregistered loader type)rö  )ré   r∞   r   r   r   rä  ¨  s    zNullProvider._isdirc             C   s   t dÉÇd S )Nz9Can't perform this operation for unregistered loader type)rö  )ré   r∞   r   r   r   rã  ±  s    zNullProvider._listdirc             C   s    |rt jj|f|jdÉûé S |S )N˙/)rØ   r∞   rB   r   )ré   ⁄baserﬂ   r   r   r   rÅ  ∂  s    zNullProvider._fnc             C   s$   t | jdÉr| jj|ÉS tdÉÇd S )N⁄get_dataz=Can't perform this operation for loaders without 'get_data()')r≤   r´   rù  rö  )ré   r∞   r   r   r   rÑ  ª  s    zNullProvider._get)r   r   r   r   ⁄egg_namerÜ  r´   rÍ   r‡   r·   r‚   r„   rÿ   rŸ   r⁄   rV   r€   rT   r‹   rJ   rÖ  rä  rã  rÅ  rÑ  r   r   r   r   rÇ   _  s,   c               @   s    e Zd ZdZddÑ ZddÑ ZdS )rÉ   z&Provider based on a virtual filesystemc             C   s   t j| |É | jÉ  d S )N)rÇ   rÍ   ⁄_setup_prefix)ré   r™   r   r   r   rÍ   …  s    zEggProvider.__init__c             C   s^   | j }d }xN||krXt|ÉrBtjj|É| _tjj|dÉ| _|| _P |}tjj	|É\}}qW d S )NzEGG-INFO)
rÄ  ⁄_is_egg_pathrØ   r∞   ⁄basenamerû  rB   rÜ  ⁄egg_rootr   )ré   r∞   ⁄oldrú  r   r   r   rü  Õ  s    
zEggProvider._setup_prefixN)r   r   r   r   rÍ   rü  r   r   r   r   rÉ   ∆  s   c               @   sD   e Zd ZdZddÑ ZddÑ ZddÑ Zdd	Ñ Zd
dÑ Ze	ddÑ ÉZ
dS )rÑ   z6Provides access to package resources in the filesystemc             C   s   t jj|ÉS )N)rØ   r∞   r±   )ré   r∞   r   r   r   rÖ  ﬂ  s    zDefaultProvider._hasc             C   s   t jj|ÉS )N)rØ   r∞   r   )ré   r∞   r   r   r   rä  ‚  s    zDefaultProvider._isdirc             C   s
   t j|ÉS )N)rØ   ⁄listdir)ré   r∞   r   r   r   rã  Â  s    zDefaultProvider._listdirc             C   s   t | j| j|ÉdÉS )N⁄rb)r   rÅ  rÄ  )ré   rﬁ   rﬂ   r   r   r   r·   Ë  s    z#DefaultProvider.get_resource_streamc          	   C   s   t |dÉè
}|jÉ S Q R X d S )Nr•  )r   rê  )ré   r∞   ⁄streamr   r   r   rÑ  Î  s    zDefaultProvider._getc             C   s   t tdtd ÉÉ}t|| É d S )N⁄SourceFileLoader)rß   ⁄importlib_machinery⁄typerà   )rÓ   ⁄
loader_clsr   r   r   ⁄	_registerÔ  s
    
zDefaultProvider._registerN)r   r   r   r   rÖ  rä  rã  r·   rÑ  r+  r´  r   r   r   r   rÑ   ‹  s   c               @   s8   e Zd ZdZdZddÑ  ZZddÑ ZddÑ Zd	d
Ñ Z	dS )rÄ   z.Provider that returns nothing for all requestsNc             C   s   dS )NFr   )ré   r∞   r   r   r   r9     s    zEmptyProvider.<lambda>c             C   s   dS )Nr¨   r   )ré   r∞   r   r   r   rÑ    s    zEmptyProvider._getc             C   s   g S )Nr   )ré   r∞   r   r   r   rã    s    zEmptyProvider._listdirc             C   s   d S )Nr   )ré   r   r   r   rÍ   	  s    zEmptyProvider.__init__)
r   r   r   r   rÄ  rä  rÖ  rÑ  rã  rÍ   r   r   r   r   rÄ   ¸  s   c               @   s    e Zd ZdZeddÑ ÉZeZdS )⁄ZipManifestsz
    zip manifest builder
    c          
      s4   t j|Éè â á fddÑà jÉ D É}t|ÉS Q R X dS )a  
        Build a dictionary similar to the zipimport directory
        caches, except instead of tuples, store ZipInfo objects.

        Use a platform-specific path separator (os.sep) for the path keys
        for compatibility with pypy on Windows.
        c             3   s&   | ]}|j d tjÉà j|ÉfV  qdS )rõ  N)r√   rØ   ⁄sep⁄getinfo)r/  r‘   )⁄zfiler   r   r0     s   z%ZipManifests.build.<locals>.<genexpr>N)⁄zipfile⁄ZipFile⁄namelistr$   )rÓ   r∞   r)   r   )rØ  r   ⁄build  s    	
zZipManifests.buildN)r   r   r   r   r+  r≥  ⁄loadr   r   r   r   r¨    s   r¨  c               @   s$   e Zd ZdZejddÉZddÑ ZdS )⁄MemoizedZipManifestsz%
    Memoized zipfile manifests.
    ⁄manifest_modzmanifest mtimec             C   sR   t jj|É}t j|Éj}|| ks.| | j|krH| j|É}| j||É| |< | | jS )zW
        Load a manifest at path or return a suitable manifest already loaded.
        )	rØ   r∞   ⁄normpathrb  ⁄st_mtime⁄mtimer≥  r∂  ⁄manifest)ré   r∞   rπ  r∫  r   r   r   r¥  1  s    
zMemoizedZipManifests.loadN)r   r   r   r   r  ⁄
namedtupler∂  r¥  r   r   r   r   rµ  +  s   rµ  c               @   sö   e Zd ZdZdZeÉ ZddÑ ZddÑ ZddÑ Z	e
d	d
Ñ ÉZddÑ ZeddÑ ÉZddÑ ZddÑ ZddÑ ZddÑ ZddÑ ZddÑ ZddÑ ZddÑ Zdd Ñ ZdS )!rÖ   z"Resource support for zips and eggsNc             C   s    t j| |É | jjtj | _d S )N)rÉ   rÍ   r´   ⁄archiverØ   r≠  ⁄zip_pre)ré   r™   r   r   r   rÍ   E  s    zZipProvider.__init__c             C   sP   |j tjÉ}|| jjkrdS |j| jÉr:|t| jÉd Ö S td|| jf ÉÇd S )Nr¨   z%s is not a subpath of %s)	⁄rstriprØ   r≠  r´   rº  r¡   rΩ  rì  ⁄AssertionError)ré   ⁄fspathr   r   r   ⁄_zipinfo_nameI  s    zZipProvider._zipinfo_namec             C   sP   | j | }|j| jtj Ér:|t| jÉd d Ö jtjÉS td|| jf ÉÇd S )Nr   z%s is not a subpath of %s)rΩ  r¡   r¢  rØ   r≠  rì  r   rø  )ré   ⁄zip_pathr¿  r   r   r   ⁄_partsU  s
    
zZipProvider._partsc             C   s   | j j| jjÉS )N)⁄_zip_manifestsr¥  r´   rº  )ré   r   r   r   ⁄zipinfo_  s    zZipProvider.zipinfoc             C   s`   | j stdÉÇ| j|É}| jÉ }dj| j|ÉÉ|krTx|D ]}| j|| j|ÉÉ q:W | j||ÉS )Nz5resource_filename() only supported for .egg, not .ziprõ  )rû  rö  ⁄_resource_to_zip⁄_get_eager_resourcesrB   r√  ⁄_extract_resource⁄_eager_to_zip)ré   rﬁ   rﬂ   r¬  ⁄eagersr‘   r   r   r   r‡   c  s    

z!ZipProvider.get_resource_filenamec             C   s"   | j }| jd }tj|É}||fS )Nr   r   r  )r   r   r  )⁄	file_size⁄	date_time⁄time⁄mktime)⁄zip_stat⁄sizerÃ  ⁄	timestampr   r   r   ⁄_get_date_and_sizep  s    

zZipProvider._get_date_and_sizec       
      C   sn  || j É krDx*| j É | D ]}| j|tjj||ÉÉ}qW tjj|ÉS | j| j| É\}}tsdt	dÉÇy‰|j
| j| j|ÉÉ}| j||Érä|S tdtjj|Édç\}}	tj|| jj|ÉÉ tj|É t|	||fÉ |j|	|É yt|	|É W n\ tjk
êrD   tjj|Éêr>| j||Éêr|S tjdkêr>t|É t|	|É |S Ç Y nX W n  tjk
êrh   |jÉ  Y nX |S )Nz>"os.rename" and "os.unlink" are not supported on this platformz	.$extract)⁄dirr`  )⁄_indexr»  rØ   r∞   rB   r  r“  r≈  ⁄WRITE_SUPPORT⁄IOErrorr_  rû  r√  ⁄_is_current⁄_mkstemp⁄writer´   rù  ⁄closer   ro  r
   ⁄error⁄isfiler‘   r   rW  )
ré   rﬁ   r¬  r‘   ⁄lastr—  r–  ⁄	real_path⁄outf⁄tmpnamr   r   r   r»  y  sD    

zZipProvider._extract_resourcec       	   	   C   sx   | j | j| É\}}tjj|És$dS tj|É}|j|ksB|j|krFdS | jj	|É}t
|dÉè}|jÉ }W dQ R X ||kS )zK
        Return True if the file_path is current for this zip_path
        Fr•  N)r“  r≈  rØ   r∞   r‹  rb  ⁄st_sizer∏  r´   rù  r   rê  )	ré   ⁄	file_pathr¬  r—  r–  rb  ⁄zip_contents⁄f⁄file_contentsr   r   r   r◊  ∞  s    
zZipProvider._is_currentc             C   sB   | j d kr<g }x&dD ]}| j|Ér|j| j|ÉÉ qW || _ | j S )N˙native_libs.txt˙eager_resources.txt)rÊ  rÁ  )r   rÿ   r  r⁄   )ré   r   r‘   r   r   r   r«  ¿  s    


z ZipProvider._get_eager_resourcesc             C   sê   y| j S  tk
rä   i }xd| jD ]Z}|jtjÉ}xH|rztjj|d dÖ É}||krj|| j|d É P q4|jÉ g||< q4W q"W || _ |S X d S )Nr   r  r  )	⁄	_dirindex⁄AttributeErrorr≈  r   rØ   r≠  rB   r¥   r  )ré   ⁄indr∞   ⁄parts⁄parentr   r   r   r‘  …  s    zZipProvider._indexc             C   s    | j |É}|| jkp|| jÉ kS )N)r¡  r≈  r‘  )ré   r¿  r¬  r   r   r   rÖ  ⁄  s    
zZipProvider._hasc             C   s   | j |É| jÉ kS )N)r¡  r‘  )ré   r¿  r   r   r   rä  ﬁ  s    zZipProvider._isdirc             C   s   t | jÉ j| j|Éf ÉÉS )N)r  r‘  r∏   r¡  )ré   r¿  r   r   r   rã  ·  s    zZipProvider._listdirc             C   s   | j | j| j|ÉÉS )N)r¡  rÅ  r¢  )ré   rﬂ   r   r   r   r…  ‰  s    zZipProvider._eager_to_zipc             C   s   | j | j| j|ÉÉS )N)r¡  rÅ  rÄ  )ré   rﬂ   r   r   r   r∆  Á  s    zZipProvider._resource_to_zip)r   r   r   r   r   rµ  rƒ  rÍ   r¡  r√  rô   r≈  r‡   rq  r“  r»  r◊  r«  r‘  rÖ  rä  rã  r…  r∆  r   r   r   r   rÖ   ?  s$   
	7	c               @   s8   e Zd ZdZddÑ ZddÑ ZddÑ Zdd	Ñ Zd
dÑ ZdS )r}   a*  Metadata handler for standalone PKG-INFO files

    Usage::

        metadata = FileMetadata("/path/to/PKG-INFO")

    This provider rejects all data and metadata requests except for PKG-INFO,
    which is treated as existing, and will be the contents of the file at
    the provided location.
    c             C   s
   || _ d S )N)r∞   )ré   r∞   r   r   r   rÍ   ˙  s    zFileMetadata.__init__c             C   s   |dkot jj| jÉS )NzPKG-INFO)rØ   r∞   r‹  )ré   r‘   r   r   r   rÿ   ˝  s    zFileMetadata.has_metadatac          	   C   sD   |dkrt dÉÇtj| jdddçè}|jÉ }W d Q R X | j|É |S )NzPKG-INFOz(No metadata except PKG-INFO is availablezutf-8r√   )⁄encoding⁄errors)r•   rÇ  r   r∞   rê  ⁄_warn_on_replacement)ré   r‘   r‰  ⁄metadatar   r   r   rŸ      s    
zFileMetadata.get_metadatac             C   s2   dj dÉ}||kr.d}|jf tÉ é}tj|É d S )Ns   ÔøΩzutf-8z2{self.path} could not be properly decoded in UTF-8)rà  rì   rî   rf  rg  )ré   r  ⁄replacement_charrU  rj  r   r   r   rÔ  	  s
    
z!FileMetadata._warn_on_replacementc             C   s   t | j|ÉÉS )N)rn   rŸ   )ré   r‘   r   r   r   r⁄     s    zFileMetadata.get_metadata_linesN)	r   r   r   r   rÍ   rÿ   rŸ   rÔ  r⁄   r   r   r   r   r}   Ó  s   
	c               @   s   e Zd ZdZddÑ ZdS )r~   as  Metadata provider for egg directories

    Usage::

        # Development eggs:

        egg_info = "/path/to/PackageName.egg-info"
        base_dir = os.path.dirname(egg_info)
        metadata = PathMetadata(base_dir, egg_info)
        dist_name = os.path.splitext(os.path.basename(egg_info))[0]
        dist = Distribution(basedir, project_name=dist_name, metadata=metadata)

        # Unpacked egg directories:

        egg_path = "/path/to/PackageName-ver-pyver-etc.egg"
        metadata = PathMetadata(egg_path, os.path.join(egg_path,'EGG-INFO'))
        dist = Distribution.from_filename(egg_path, metadata=metadata)
    c             C   s   || _ || _d S )N)rÄ  rÜ  )ré   r∞   rÜ  r   r   r   rÍ   )  s    zPathMetadata.__init__N)r   r   r   r   rÍ   r   r   r   r   r~     s   c               @   s   e Zd ZdZddÑ ZdS )r   z Metadata provider for .egg filesc             C   sD   |j tj | _|| _|jr0tjj|j |jÉ| _n|j | _| j	É  dS )z-Create a metadata provider from a zipimporterN)
rº  rØ   r≠  rΩ  r´   ⁄prefixr∞   rB   rÄ  rü  )ré   ⁄importerr   r   r   rÍ   1  s    zEggMetadata.__init__N)r   r   r   r   rÍ   r   r   r   r   r   .  s   r$   )⁄_distribution_findersc             C   s   |t | < dS )ax  Register `distribution_finder` to find distributions in sys.path items

    `importer_type` is the type or class of a PEP 302 "Importer" (sys.path item
    handler), and `distribution_finder` is a callable that, passed a path
    item and the importer instance, yields ``Distribution`` instances found on
    that path item.  See ``pkg_resources.find_on_path`` for an example.N)rÙ  )⁄importer_type⁄distribution_finderr   r   r   rÜ   @  s    c             C   s   t | É}tt|É}||| |ÉS )z.Yield distributions accessible via `path_item`)r   r®   rÙ  )⁄	path_item⁄onlyrÛ  ⁄finderr   r   r   rZ   J  s    
c       	      c   sŒ   | j jdÉrdS t| É}|jdÉr2tj||dçV  |r:dS xé|jdÉD ]Ä}t|ÉrÜtj	j
||É}ttj|É|É}xT|D ]
}|V  qvW qF|jÉ jdÉrFtj	j
||É}ttj|ÉÉ}||_tj|||ÉV  qFW dS )z@
    Find eggs in zip files; possibly multiple nested eggs.
    z.whlNzPKG-INFO)r  rõ  z
.dist-info)rº  ⁄endswithr   rÿ   ra   ⁄from_filenamerT   r†  rØ   r∞   rB   ⁄find_eggs_in_zip⁄	zipimport⁄zipimporterr;  rÜ  ⁄from_location)	rÛ  r˜  r¯  r  ⁄subitem⁄subpathrı   rê   ⁄submetar   r   r   r¸  Q  s$    

r¸  c             C   s   f S )Nr   )rÛ  r˜  r¯  r   r   r   ⁄find_nothingo  s    r  c             C   s   ddÑ }t | |ddçS )aL  
    Given a list of filenames, return them in descending order
    by version number.

    >>> names = 'bar', 'foo', 'Python-2.7.10.egg', 'Python-2.7.2.egg'
    >>> _by_version_descending(names)
    ['Python-2.7.10.egg', 'Python-2.7.2.egg', 'foo', 'bar']
    >>> names = 'Setuptools-1.2.3b1.egg', 'Setuptools-1.2.3.egg'
    >>> _by_version_descending(names)
    ['Setuptools-1.2.3.egg', 'Setuptools-1.2.3b1.egg']
    >>> names = 'Setuptools-1.2.3b1.egg', 'Setuptools-1.2.3.post1.egg'
    >>> _by_version_descending(names)
    ['Setuptools-1.2.3.post1.egg', 'Setuptools-1.2.3b1.egg']
    c             S   s2   t jj| É\} }tj| jdÉ|gÉ}ddÑ |D ÉS )z6
        Parse each component of the filename
        rt  c             S   s   g | ]}t jj|ÉëqS r   )r   r   r÷   )r/  ⁄partr   r   r   ˙
<listcomp>ã  s    z?_by_version_descending.<locals>._by_version.<locals>.<listcomp>)rØ   r∞   ⁄splitext⁄	itertools⁄chainr   )r‘   ⁄extrÎ  r   r   r   ⁄_by_versionÖ  s    z+_by_version_descending.<locals>._by_versionT)r3   r?  )⁄sorted)r\  r
  r   r   r   ⁄_by_version_descendingv  s    r  c       
      #   sú   t àÉâtàÉr4tjàtàtjjàdÉÉdçV  dS tàÉ}á áfddÑ|D É}t	|É}x>|D ]6}tjjà|É}t
à|à É}x||ÉD ]
}	|	V  qÜW q^W dS )z6Yield distributions accessible on a sys.path directoryzEGG-INFO)r  Nc             3   s   | ]}t à|à Ér|V  qd S )N)⁄dist_factory)r/  rÈ   )r¯  r˜  r   r   r0  ¢  s   zfind_on_path.<locals>.<genexpr>)⁄_normalize_cached⁄_is_unpacked_eggra   r˚  r~   rØ   r∞   rB   ⁄safe_listdirr  r  )
rÛ  r˜  r¯  r‰   ⁄filtered⁄path_item_entriesrÈ   ⁄fullpath⁄factoryrê   r   )r¯  r˜  r   ⁄find_on_pathê  s    
r  c             C   sL   |j É }tt|jdÉÉ}|r tS | r2t|Ér2tS | rF|jdÉrFtS tÉ S )z9
    Return a dist_factory for a path_item and entry
    ˙	.egg-info˙
.dist-infoz	.egg-link)r  r  )	r;  r1  r   r˙  ⁄distributions_from_metadatar†  rZ   ⁄resolve_egg_link⁄NoDists)r˜  rÈ   r¯  r;  ⁄is_metar   r   r   r  ∞  s    r  c               @   s*   e Zd ZdZddÑ ZejreZddÑ ZdS )r  zS
    >>> bool(NoDists())
    False

    >>> list(NoDists()('anything'))
    []
    c             C   s   dS )NFr   )ré   r   r   r   ⁄__bool__…  s    zNoDists.__bool__c             C   s   t f ÉS )N)⁄iter)ré   r  r   r   r   ⁄__call__Œ  s    zNoDists.__call__N)	r   r   r   r   r  r   ⁄PY2⁄__nonzero__r  r   r   r   r   r  ¡  s
   r  c             C   st   y
t j| ÉS  ttfk
r"   Y nN tk
rn } z2|jtjtjtjfkpVt	|ddÉdk}|s^Ç W Y dd}~X nX f S )zI
    Attempt to list contents of path, but suppress some exceptions.
    ⁄winerrorNi  )
rØ   r§  ⁄PermissionError⁄NotADirectoryError⁄OSError⁄errno⁄ENOTDIR⁄EACCES⁄ENOENTrß   )r∞   rz  ⁄	ignorabler   r   r   r  “  s    
r  c             c   sf   t jj| É}t jj| Ér:tt j| ÉÉdkr.d S t|| É}nt| É}t jj| É}t	j
|||tdçV  d S )Nr   )⁄
precedence)rØ   r∞   r  r   rì  r§  r~   r}   r°  ra   rˇ  rz   )r∞   ⁄rootr  rÈ   r   r   r   r  Á  s    r  c          	   c   s8   t | Éè&}x|D ]}|jÉ }|r|V  qW W dQ R X dS )z1
    Yield non-empty lines from file at path
    N)r   ⁄strip)r∞   r‰  ⁄liner   r   r   ⁄non_empty_linesˆ  s
    

r.  c                s.   t à É}á fddÑ|D É}tt|É}t|f ÉS )za
    Given a path to an .egg-link, resolve distributions
    present in the referenced path.
    c             3   s$   | ]}t jjt jjà É|ÉV  qd S )N)rØ   r∞   rB   r  )r/  ⁄ref)r∞   r   r   r0    s   z#resolve_egg_link.<locals>.<genexpr>)r.  r   rZ   ⁄next)r∞   ⁄referenced_paths⁄resolved_paths⁄dist_groupsr   )r∞   r   r    s
    

r  ⁄
FileFinder)⁄_namespace_handlers)⁄_namespace_packagesc             C   s   |t | < dS )aö  Register `namespace_handler` to declare namespace packages

    `importer_type` is the type or class of a PEP 302 "Importer" (sys.path item
    handler), and `namespace_handler` is a callable like this::

        def namespace_handler(importer, path_entry, moduleName, module):
            # return a path_entry to use for child packages

    Namespace handlers are only called if the importer object has already
    agreed that it can handle the relevant path item, and they should only
    return a subpath if the module __path__ does not already contain an
    equivalent subpath.  For an example namespace handler, see
    ``pkg_resources.file_ns_handler``.
    N)r5  )rı  ⁄namespace_handlerr   r   r   rá     s    c             C   s¿   t |É}|dkrdS |j| É}|dkr*dS tjj| É}|dkrbtj| É }tj| < g |_t| É nt	|dÉsvt
d| ÉÇtt|É}|||| |É}|dk	rº|j}|j|É |j| É t|| |É |S )zEEnsure that named package includes a subpath of path_item (if needed)N⁄__path__zNot a package:)r   ⁄find_moduler@   r§   r∏   ⁄types⁄
ModuleTyper8  ⁄_set_parent_nsr≤   r◊   r®   r5  r¥   ⁄load_module⁄_rebuild_mod_path)⁄packageNamer˜  rÛ  r´   r™   ⁄handlerr  r∞   r   r   r   ⁄
_handle_ns*  s*    






rA  c                s`   ddÑ t jD ÉâáfddÑâá áfddÑ}t| tÉs8dS | j|dç d	dÑ | D É|jddÖ< dS )
zq
    Rebuild module.__path__ ensuring that all entries are ordered
    corresponding to their sys.path order
    c             S   s   g | ]}t |ÉëqS r   )r  )r/  ⁄pr   r   r   r  I  s    z%_rebuild_mod_path.<locals>.<listcomp>c                s(   y
à j | ÉS  tk
r"   tdÉS X dS )z/
        Workaround for #520 and #513.
        ⁄infN)⁄indexrE   ⁄float)rÈ   )⁄sys_pathr   r   ⁄safe_sys_path_indexK  s    
z._rebuild_mod_path.<locals>.safe_sys_path_indexc                s<   | j tjÉ}à jdÉd }|d| Ö }àttjj|ÉÉÉS )zR
        Return the ordinal of the path based on its position in sys.path
        r;   r   N)r   rØ   r≠  ⁄countr  rB   )r∞   ⁄
path_parts⁄module_partsrÎ  )⁄package_namerG  r   r   ⁄position_in_sys_pathT  s    z/_rebuild_mod_path.<locals>.position_in_sys_pathN)r3   c             S   s   g | ]}t |ÉëqS r   )r  )r/  rB  r   r   r   r  b  s    )r@   r∞   r°   r  r  r8  )⁄	orig_pathrK  r™   rL  r   )rK  rG  rF  r   r>  D  s    		
r>  c             C   s“   t jÉ  z∫| tkrdS tjd }}d| krädj| jdÉddÖ É}t|É |tkrZt|É ytj	| j
}W n tk
rà   td|ÉÇY nX tj|g Éj| É tj| g É x|D ]}t| |É qÆW W dt jÉ  X dS )z9Declare that package 'packageName' is a namespace packageNr;   r   zNot a package:r  )⁄_imp⁄acquire_lockr6  r@   r∞   rB   r   rW   r¶   r§   r8  rÈ  r◊   rˆ   r¥   rA  ⁄release_lock)r?  r∞   rÏ  r˜  r   r   r   rW   e  s&    
c          
   C   sJ   t jÉ  z2x,tj|f ÉD ]}t|| É}|rt||É qW W dt jÉ  X dS )zDEnsure that previously-declared namespace packages include path_itemN)rN  rO  r6  r∏   rA  râ   rP  )r˜  rÏ  ⁄packager  r   r   r   râ   Ü  s    
c             C   sF   t jj||jdÉd É}t|É}x |jD ]}t|É|kr(P q(W |S dS )zBCompute an ns-package subpath for a filesystem or zipfile importerr;   r   Nr  )rØ   r∞   rB   r   r  r8  )rÛ  r˜  r?  r™   r  ⁄
normalizedr¸   r   r   r   ⁄file_ns_handlerí  s    rS  c             C   s   d S )Nr   )rÛ  r˜  r?  r™   r   r   r   ⁄null_ns_handler¶  s    rT  c             C   s   t jjt jj| ÉÉS )z1Normalize a file/dir name for comparison purposes)rØ   r∞   ⁄normcase⁄realpath)rn  r   r   r   ru   ≠  s    c             C   s2   y||  S  t k
r,   t| É || < }|S X d S )N)r•   ru   )rn  rµ   ⁄resultr   r   r   r  ≤  s
    r  c             C   s   | j É jdÉS )z7
    Determine if given path appears to be an egg.
    z.egg)r;  r˙  )r∞   r   r   r   r†  ∫  s    r†  c             C   s    t | Éotjjtjj| ddÉÉS )z@
    Determine if given path appears to be an unpacked egg.
    zEGG-INFOzPKG-INFO)r†  rØ   r∞   r‹  rB   )r∞   r   r   r   r  ¡  s    r  c             C   s<   | j dÉ}|jÉ }|r8dj|É}ttj| |tj|  É d S )Nr;   )r   r  rB   ⁄setattrr@   r§   )r?  rÎ  r‘   rÏ  r   r   r   r<  À  s
    

r<  c             c   sh   t | tjÉr>xV| jÉ D ]"}|jÉ }|r|jdÉ r|V  qW n&x$| D ]}xt|ÉD ]
}|V  qRW qDW dS )z9Yield non-empty/non-comment lines of a string or sequence˙#N)r°   r   r’   ⁄
splitlinesr,  r¡   rn   )⁄strs⁄s⁄ssr   r   r   rn   ”  s    
z\w+(\.\w+)*$zñ
    (?P<name>[^-]+) (
        -(?P<ver>[^-]+) (
            -py(?P<pyver>[^-]+) (
                -(?P<plat>.+)
            )?
        )?
    )?
    c               @   så   e Zd ZdZf f dfddÑZddÑ ZddÑ Zdd
dÑZddÑ ZdddÑZ	e
jdÉZedddÑÉZeddÑ ÉZedddÑÉZedddÑÉZdS )rc   z3Object representing an advertised importable objectNc             C   s<   t |Éstd|ÉÇ|| _|| _t|É| _t|É| _|| _d S )NzInvalid module name)⁄MODULErE   r‘   ⁄module_name⁄tuple⁄attrsr  rê   )ré   r‘   r_  ra  r  rê   r   r   r   rÍ   Û  s    


zEntryPoint.__init__c             C   sH   d| j | jf }| jr*|ddj| jÉ 7 }| jrD|ddj| jÉ 7 }|S )Nz%s = %s˙:r;   z [%s]˙,)r‘   r_  ra  rB   r  )ré   r\  r   r   r   rú   ¸  s    zEntryPoint.__str__c             C   s   dt | É S )NzEntryPoint.parse(%r))r£   )ré   r   r   r   rè   	  s    zEntryPoint.__repr__Tc             O   s6   | s|s|rt jdtddç |r.| j||é | jÉ S )zH
        Require packages for this EntryPoint, then resolve it.
        zJParameters to load are deprecated.  Call .resolve and .require separately.r<   )⁄
stacklevel)rf  rg  ⁄DeprecationWarningrI   rÒ   )ré   rI   r8   ⁄kwargsr   r   r   r¥  	  s    zEntryPoint.loadc             C   sV   t | jdgddç}ytjt| j|ÉS  tk
rP } ztt|ÉÉÇW Y dd}~X nX dS )zD
        Resolve the entry point from its module and attrs.
        r   r   )⁄fromlist⁄levelN)	r¶   r_  ⁄	functools⁄reducerß   ra  rÈ  rø   r£   )ré   r™   ⁄excr   r   r   rÒ   	  s
    zEntryPoint.resolvec             C   sN   | j r| j rtd| ÉÇ| jj| j É}tj|||| j dç}tttj|ÉÉ d S )Nz&Can't require() without a distribution)r  )	r  rê   rg   r˙   rX   rÒ   r  r   rÚ   )ré   r  r  rÙ   r)   r   r   r   rI    	  s
    
zEntryPoint.requirez]\s*(?P<name>.+?)\s*=\s*(?P<module>[\w.]+)\s*(:\s*(?P<attr>[\w.]+))?\s*(?P<extras>\[.*\])?\s*$c             C   sf   | j j|É}|sd}t||ÉÇ|jÉ }| j|d É}|d rJ|d jdÉnf }| |d |d |||ÉS )a  Parse a single entry point from string `src`

        Entry point syntax follows the form::

            name = some.module:some.attr [extra1, extra2]

        The entry name and module name are required, but the ``:attrs`` and
        ``[extras]`` parts are optional
        z9EntryPoint must be in 'name=module:attrs [extras]' formatr  ⁄attrr;   r‘   r™   )⁄patternr?   rE   ⁄	groupdict⁄_parse_extrasr   )rÓ   ⁄srcrê   rG   rj  ⁄resr  ra  r   r   r   r÷   6	  s    
zEntryPoint.parsec             C   s(   |sf S t jd| É}|jr"tÉ Ç|jS )N⁄x)rb   r÷   ⁄specsrE   r  )rÓ   ⁄extras_specrë   r   r   r   ro  J	  s    zEntryPoint._parse_extrasc             C   sZ   t |Éstd|ÉÇi }x>t|ÉD ]2}| j||É}|j|krHtd||jÉÇ|||j< q W |S )zParse an entry point groupzInvalid group namezDuplicate entry point)r^  rE   rn   r÷   r‘   )rÓ   rD   ⁄linesrê   ⁄thisr-  r˘   r   r   r   ⁄parse_groupS	  s    

zEntryPoint.parse_groupc             C   sx   t |tÉr|jÉ }nt|É}i }xR|D ]J\}}|dkrD|s<q&tdÉÇ|jÉ }||kr^td|ÉÇ| j|||É||< q&W |S )z!Parse a map of entry point groupsNz%Entry points must be listed in groupszDuplicate group name)r°   r$   r)   ro   rE   r,  rw  )rÓ   ⁄datarê   ⁄mapsrD   ru  r   r   r   ⁄	parse_map`	  s    


zEntryPoint.parse_map)T)NN)N)N)N)r   r   r   r   rÍ   rú   rè   r¥  rÒ   rI   ru  rë  rm  r+  r÷   ro  rw  rz  r   r   r   r   rc     s    	


	c             C   s>   | sdS t jj| É}|d jdÉr:t jj|d dÖ d ÉS | S )Nr¨   r   zmd5=r  r  )r¨   )r   r÷   ⁄urlparser¡   ⁄
urlunparse)rˇ   ⁄parsedr   r   r   ⁄_remove_md5_fragmentt	  s    r~  c             C   s@   ddÑ }t || É}tt|ÉdÉ}|jdÉ\}}}t|jÉ Ép>dS )zÑ
    Given an iterable of lines from a Metadata file, return
    the value of the Version field, if present, or None otherwise.
    c             S   s   | j É jdÉS )Nzversion:)r;  r¡   )r-  r   r   r   ⁄is_version_lineÇ	  s    z+_version_from_file.<locals>.is_version_liner¨   rb  N)r   r0  r  ⁄	partitionrk   r,  )ru  r  ⁄version_linesr-  rΩ   râ  r   r   r   ⁄_version_from_file}	  s
    
rÇ  c               @   sn  e Zd ZdZdZddddedefddÑZedKddÑÉZ	dd	Ñ Z
ed
dÑ ÉZddÑ ZddÑ ZddÑ ZddÑ ZddÑ ZddÑ ZddÑ ZeddÑ ÉZeddÑ ÉZddÑ Zed d!Ñ ÉZed"d#Ñ ÉZed$d%Ñ ÉZd&d'Ñ Zf fd(d)ÑZd*d+Ñ ZdLd-d.ÑZd/d0Ñ Zd1d2Ñ Z d3d4Ñ Z!d5d6Ñ Z"edMd7d8ÑÉZ#d9d:Ñ Z$d;d<Ñ Z%dNd=d>ÑZ&d?d@Ñ Z'dOdAdBÑZ(dCdDÑ Z)dEdFÑ Z*dGdHÑ Z+edIdJÑ ÉZ,dS )Pra   z5Wrap an actual or potential sys.path entry w/metadatazPKG-INFONc             C   sF   t |pdÉ| _|d k	r t|É| _|| _|| _|| _|| _|p>t| _	d S )NZUnknown)
rj   r  rk   ⁄_versionr7  rA   rˇ   r*  rÅ   ⁄	_provider)ré   rˇ   r  r  r   r7  rA   r*  r   r   r   rÍ   é	  s    
zDistribution.__init__c             K   s~   d gd \}}}}t jj|É\}}	|	jÉ tkr^t|	jÉ  } t|É}
|
r^|
jddddÉ\}}}}| ||f||||dú|óéjÉ S )Nrª   r‘   ⁄verZpyverrF   )r  r   r7  rA   )rØ   r∞   r  r;  ⁄_distributionImpl⁄EGG_NAMErD   ⁄_reload_version)rÓ   rˇ   r°  r  r'   r  r   r7  rA   r	  r?   r   r   r   rˇ  õ	  s    
zDistribution.from_locationc             C   s   | S )Nr   )ré   r   r   r   rà  ¨	  s    zDistribution._reload_versionc             C   s(   | j | j| jt| jÉ| jpd| jp$dfS )Nr¨   )⁄parsed_versionr*  r3   r~  rˇ   r7  rA   )ré   r   r   r   r>  Ø	  s    zDistribution.hashcmpc             C   s
   t | jÉS )N)⁄hashr>  )ré   r   r   r   ⁄__hash__∫	  s    zDistribution.__hash__c             C   s   | j |j k S )N)r>  )ré   rE  r   r   r   ⁄__lt__Ω	  s    zDistribution.__lt__c             C   s   | j |j kS )N)r>  )ré   rE  r   r   r   ⁄__le__¿	  s    zDistribution.__le__c             C   s   | j |j kS )N)r>  )ré   rE  r   r   r   ⁄__gt__√	  s    zDistribution.__gt__c             C   s   | j |j kS )N)r>  )ré   rE  r   r   r   ⁄__ge__∆	  s    zDistribution.__ge__c             C   s   t || jÉsdS | j|jkS )NF)r°   rå   r>  )ré   rE  r   r   r   ⁄__eq__…	  s    zDistribution.__eq__c             C   s
   | |k S )Nr   )ré   rE  r   r   r   ⁄__ne__œ	  s    zDistribution.__ne__c             C   s0   y| j S  tk
r*   | jjÉ  | _ }|S X d S )N)⁄_keyrÈ  r  r;  )ré   r3   r   r   r   r3   ÷	  s
    zDistribution.keyc             C   s   t | dÉst| jÉ| _| jS )N⁄_parsed_version)r≤   r    r   rì  )ré   r   r   r   râ  ﬁ	  s    
zDistribution.parsed_versionc             C   sX   t jj}t| j|É}|sd S | js&d S tjdÉjÉ jddÉ}t	j
|jf t| ÉétÉ d S )Na>  
            '{project_name} ({version})' is being parsed as a legacy,
            non PEP 440,
            version. You may find odd behavior and sort order.
            In particular it will be sorted as less than 0.0. It
            is recommended to migrate to PEP 440 compatible
            versions.
            rå  rº   )r   r   r   r°   rì  rO  rP  r,  r√   rf  rg  rì   ⁄varsr   )ré   ⁄LV⁄	is_legacyrU  r   r   r   ⁄_warn_legacy_versionÂ	  s    z!Distribution._warn_legacy_versionc             C   sL   y| j S  tk
rF   t| j| jÉÉ}|d krBd}t|| j | ÉÇ|S X d S )Nz(Missing 'Version:' header and/or %s file)rÉ  rÈ  rÇ  ⁄_get_metadata⁄PKG_INFOrE   )ré   r   rU  r   r   r   r   ˇ	  s    zDistribution.versionc             C   s2   y| j S  tk
r*   | j| jÉ É| _ Y nX | j S )z~
        A map of extra to its list of (direct) requirements
        for this distribution, including the null extra.
        )Z_Distribution__dep_maprÈ  ⁄_filter_extras⁄_build_dep_map)ré   r   r   r   ⁄_dep_map

  s
    zDistribution._dep_mapc             C   sv   xpt td| ÉÉD ]^}|}| j|É}|jdÉ\}}}|oFt|ÉpFt|É }|rPg }t|ÉpZd}| j|g Éj|É qW | S )z§
        Given a mapping of extras to dependencies, strip off
        environment markers and filter out any dependencies
        not matching the markers.
        Nrb  )	r  r   r  rÄ  rr   rs   rp   rˆ   r  )⁄dmr,  ⁄	new_extrarÙ   rΩ   r-  ⁄fails_markerr   r   r   rö  
  s    

zDistribution._filter_extrasc             C   sH   i }x>dD ]6}x0t | j|ÉÉD ]\}}|j|g Éjt|ÉÉ qW q
W |S )N˙requires.txt˙depends.txt)r†  r°  )ro   rò  rˆ   r  ri   )ré   rù  r‘   r,  rÙ   r   r   r   rõ  ,
  s
    
zDistribution._build_dep_mapc             C   sj   | j }g }|j|jdf ÉÉ xH|D ]@}y|j|t|É É W q" tk
r`   td| |f ÉÇY q"X q"W |S )z@List of Requirements needed for this distro if `extras` are usedNz%s has no such extra feature %r)rú  r  r∏   rp   r•   rg   )ré   r  rù  ⁄depsr	  r   r   r   r˙   3
  s    
zDistribution.requiresc             c   s(   | j |Ér$x| j|ÉD ]
}|V  qW d S )N)rÿ   r⁄   )ré   r‘   r-  r   r   r   rò  A
  s    
zDistribution._get_metadataFc             C   sZ   |dkrt j}| j||dç |t jkrVt| jÉ x$| jdÉD ]}|t jkr<t|É q<W dS )z>Ensure distribution is importable on `path` (default=sys.path)N)r√   znamespace_packages.txt)r@   r∞   r˛   râ   rˇ   rò  r§   rW   )ré   r∞   r√   ⁄pkgr   r   r   ⁄activateF
  s    


zDistribution.activatec             C   s8   dt | jÉt | jÉ| jptf }| jr4|d| j 7 }|S )z@Return what this distribution's standard .egg filename should bez
%s-%s-py%srt  )rq   r  r   r7  rJ  rA   )ré   rn  r   r   r   rû  Q
  s    zDistribution.egg_namec             C   s    | j rd| | j f S t| ÉS d S )Nz%s (%s))rˇ   r£   )ré   r   r   r   rè   \
  s    zDistribution.__repr__c             C   s@   yt | dd É}W n tk
r(   d }Y nX |p0d}d| j|f S )Nr   z[unknown version]z%s %s)rß   rE   r  )ré   r   r   r   r   rú   b
  s    
zDistribution.__str__c             C   s   |j dÉrt|ÉÇt| j|ÉS )zADelegate all unrecognized public attributes to .metadata providerrΩ   )r¡   rÈ  rß   rÑ  )ré   rl  r   r   r   ⁄__getattr__j
  s    
zDistribution.__getattr__c             K   s   | j t|Étjj|É|f|éS )N)rˇ  r  rØ   r∞   r°  )rÓ   rn  r  r'   r   r   r   r˚  p
  s    zDistribution.from_filenamec             C   s<   t | jtjjÉr"d| j| jf }nd| j| jf }tj|ÉS )z?Return a ``Requirement`` that matches this distribution exactlyz%s==%sz%s===%s)r°   râ  r   r   r   r  rb   r÷   )ré   ⁄specr   r   r   r  w
  s    zDistribution.as_requirementc             C   s.   | j ||É}|dkr&td||ff ÉÇ|jÉ S )z=Return the `name` entry point of `group` or raise ImportErrorNzEntry point %r not found)rO   rø   r¥  )ré   rD   r‘   r˘   r   r   r   rM   Ä
  s    zDistribution.load_entry_pointc             C   sP   y
| j }W n, tk
r6   tj| jdÉ| É }| _ Y nX |dk	rL|j|i ÉS |S )z=Return the entry point map for `group`, or the full entry mapzentry_points.txtN)⁄_ep_maprÈ  rc   rz  rò  r∏   )ré   rD   ⁄ep_mapr   r   r   rN   á
  s    
zDistribution.get_entry_mapc             C   s   | j |Éj|ÉS )z<Return the EntryPoint object for `group`+`name`, or ``None``)rN   r∏   )ré   rD   r‘   r   r   r   rO   ì
  s    zDistribution.get_entry_infoc       
      C   s2  |p| j }|sdS t|É}tjj|É}ddÑ |D É}x¥t|ÉD ]v\}}||kr\|rVP q¥dS q>||kr>| jtkr>| rà|||dÖ kràdS |tjkrö| j	É  |j
||É |j
||É P q>W |tjkr | j	É  |r‹|j
d|É n
|j|É dS xBy|j||d É}	W n tk
êr   P Y qÏX ||	= ||	= |	}qÏW dS )a‰  Ensure self.location is on path

        If replace=False (default):
            - If location is already in path anywhere, do nothing.
            - Else:
              - If it's an egg and its parent directory is on path,
                insert just ahead of the parent.
              - Else: add to the end of path.
        If replace=True:
            - If location is already on path anywhere (not eggs)
              or higher priority than its parent (eggs)
              do nothing.
            - Else:
              - If it's an egg and its parent directory is on path,
                insert just ahead of the parent,
                removing any lower-priority entries.
              - Else: add it to the front of path.
        Nc             S   s   g | ]}|rt |Ép|ëqS r   )r  )r/  rB  r   r   r   r  ±
  s    z*Distribution.insert_on.<locals>.<listcomp>r   r   )rˇ   r  rØ   r∞   r  ⁄	enumerater*  rv   r@   ⁄check_version_conflictr  r¥   rD  rE   )
ré   r∞   ⁄locr√   ⁄nloc⁄bdir⁄npathrB  r¸   ⁄npr   r   r   r˛   ó
  sB    



zDistribution.insert_onc             C   s¨   | j dkrd S tj| jdÉÉ}t| jÉ}x~| jdÉD ]p}|tjks4||ks4|tkrTq4|dkr^q4t	tj| dd É}|rêt|Éj
|És4|j
| jÉrêq4td||| jf É q4W d S )	N⁄
setuptoolsznamespace_packages.txtztop_level.txt⁄pkg_resources⁄siter~  zIModule %s was already imported from %s, but %s is being added to sys.path)r±  r∞  r≤  )r3   r$   r%   rò  ru   rˇ   r@   r§   r6  rß   r¡   ⁄issue_warning)ré   ⁄nspr´  ⁄modname⁄fnr   r   r   r™  €
  s"    

z#Distribution.check_version_conflictc             C   s4   y
| j  W n$ tk
r.   tdt| É É dS X dS )NzUnbuilt egg for FT)r   rE   r≥  rç   )ré   r   r   r   r@  Ò
  s    
zDistribution.has_versionc             K   sD   d}x$|j É D ]}|j|t| |dÉÉ qW |jd| jÉ | jf |éS )z@Copy this distribution, substituting in any changed keyword argsz<project_name version py_version platform location precedenceNr  )r   rˆ   rß   rÑ  rå   )ré   r'   r\  rl  r   r   r   ⁄clone˘
  s
    zDistribution.clonec             C   s   ddÑ | j D ÉS )Nc             S   s   g | ]}|r|ëqS r   r   )r/  ⁄depr   r   r   r    s    z'Distribution.extras.<locals>.<listcomp>)rú  )ré   r   r   r   r    s    zDistribution.extras)N)NF)N)N)NF)-r   r   r   r   rô  rJ  rv   rÍ   r+  rˇ  rà  rô   r>  rã  rå  rç  ré  rè  rê  rë  r3   râ  ró  r   rú  rq  rö  rõ  r˙   rò  r§  rû  rè   rú   r•  r˚  r  rM   rN   rO   r˛   r™  r@  r∑  r  r   r   r   r   ra   ä	  sR   

	

Dc               @   s   e Zd ZddÑ ZdS )⁄EggInfoDistributionc             C   s   t | j| jÉÉ}|r|| _| S )aÒ  
        Packages installed by distutils (e.g. numpy or scipy),
        which uses an old safe_version, and so
        their version numbers can get mangled when
        converted to filenames (e.g., 1.11.0.dev0+2329eae to
        1.11.0.dev0_2329eae). These distributions will not be
        parsed properly
        downstream by Distribution and safe_version, so
        take an extra step and try to get the version number from
        the metadata file itself instead of the filename.
        )rÇ  rò  rô  rÉ  )ré   ⁄
md_versionr   r   r   rà    s    z#EggInfoDistribution._reload_versionN)r   r   r   rà  r   r   r   r   rπ    s   rπ  c               @   s>   e Zd ZdZdZejdÉZeddÑ ÉZ	eddÑ ÉZ
dd	Ñ Zd
S )⁄DistInfoDistributionzV
    Wrap an actual or potential sys.path entry
    w/metadata, .dist-info style.
    ZMETADATAz([\(,])\s*(\d.*?)\s*([,\)])c             C   s@   y| j S  tk
r:   | j| jÉ}tjjÉ j|É| _ | j S X dS )zParse and cache metadataN)⁄	_pkg_inforÈ  rŸ   rô  ⁄email⁄parser⁄Parser⁄parsestr)ré   r  r   r   r   ⁄_parsed_pkg_info!  s    z%DistInfoDistribution._parsed_pkg_infoc             C   s,   y| j S  tk
r&   | jÉ | _ | j S X d S )N)⁄_DistInfoDistribution__dep_maprÈ  ⁄_compute_dependencies)ré   r   r   r   rú  +  s
    
zDistInfoDistribution._dep_mapc                s¢   dg i }| _ g â x&| jjdÉp"g D ]}à jt|ÉÉ q$W á fddÑ}t|dÉÉ}|d j|É x<| jjdÉppg D ](}t|jÉ É}tt||ÉÉ| É||< qrW |S )z+Recompute this distribution's dependencies.NzRequires-Distc             3   s0   x*à D ]"}|j  s"|j jd| iÉr|V  qW d S )Nr,  )r-  r.  )r,  rë   )rÙ   r   r   ⁄reqs_for_extra<  s    
zBDistInfoDistribution._compute_dependencies.<locals>.reqs_for_extrazProvides-Extra)	r¬  r¡  ⁄get_allr  ri   ⁄	frozensetrp   r,  r  )ré   rù  rë   rƒ  ⁄commonr,  ⁄s_extrar   )rÙ   r   r√  3  s    z*DistInfoDistribution._compute_dependenciesN)r   r   r   r   rô  ru  rë  ⁄EQEQrô   r¡  rú  r√  r   r   r   r   rª    s   

rª  )z.eggz	.egg-infoz
.dist-infoc              O   s^   d}t É }y"xtj|Éj|kr(|d7 }qW W n tk
r@   Y nX tj| d|d i|óé d S )Nr   rd  )r!   r@   rœ   r–   rE   rf  rg  )r8   r'   rh  r+   r   r   r   r≥  R  s    r≥  c               @   s   e Zd ZddÑ ZdS )⁄RequirementParseErrorc             C   s   dj | jÉS )Nrº   )rB   r8   )ré   r   r   r   rú   `  s    zRequirementParseError.__str__N)r   r   r   rú   r   r   r   r   r   _  s   r   c             c   sÇ   t t| ÉÉ}xp|D ]h}d|kr0|d|jdÉÖ }|jdÉrp|ddÖ jÉ }y|t|É7 }W n tk
rn   dS X t|ÉV  qW dS )zäYield ``Requirement`` objects for each specification in `strs`

    `strs` must be a string, or a (possibly-nested) iterable thereof.
    z #N˙\r<   È˛ˇˇˇ)r  rn   r¢   r˙  r,  r0  ⁄StopIterationrb   )r[  ru  r-  r   r   r   ri   d  s    

c                   sP   e Zd Zá fddÑZddÑ ZddÑ ZddÑ Zd	d
Ñ ZddÑ Ze	ddÑ ÉZ
á  ZS )rb   c                s»   yt t| Éj|É W n2 tjjk
rF } ztt|ÉÉÇW Y dd}~X nX | j| _	t
| jÉ}||jÉ  | _| _ddÑ | jD É| _ttt| jÉÉ| _| j| jt| jÉ| jr∞t| jÉndf| _t| jÉ| _dS )z>DO NOT CALL THIS UNDOCUMENTED METHOD; use Requirement.parse()!Nc             S   s   g | ]}|j |jfëqS r   )rA  r   )r/  r¶  r   r   r   r  Ö  s    z(Requirement.__init__.<locals>.<listcomp>)⁄superrb   rÍ   r   r  ⁄InvalidRequirementr   r£   r‘   ⁄unsafe_namerj   r;  r  r3   ⁄	specifierrs  r`  r   rp   r  r∆  r-  ⁄hashCmprä  ⁄_Requirement__hash)ré   ⁄requirement_stringrz  r  )rå   r   r   rÍ   {  s    
zRequirement.__init__c             C   s   t |tÉo| j|jkS )N)r°   rb   r“  )ré   rE  r   r   r   rê  è  s    
zRequirement.__eq__c             C   s
   | |k S )Nr   )ré   rE  r   r   r   rë  ï  s    zRequirement.__ne__c             C   s0   t |tÉr |j| jkrdS |j}| jj|ddçS )NFT)⁄prereleases)r°   ra   r3   r   r—  ⁄contains)ré   r¸   r   r   r   r˜   ò  s
    
zRequirement.__contains__c             C   s   | j S )N)r”  )ré   r   r   r   rã  §  s    zRequirement.__hash__c             C   s   dt | É S )NzRequirement.parse(%r))r£   )ré   r   r   r   rè   ß  s    zRequirement.__repr__c             C   s   t | É\}|S )N)ri   )r\  rë   r   r   r   r÷   ™  s    
zRequirement.parse)r   r   r   rÍ   rê  rë  r˜   rã  rè   rq  r÷   ⁄__classcell__r   r   )rå   r   rb   z  s   c             C   s   t | kr| t f S | S )zJ
    Ensure object appears in the mro even
    for old-style classes.
    )⁄object)⁄classesr   r   r   ⁄_always_object∞  s    
r⁄  c             C   s<   t tjt|dt|ÉÉÉÉ}x|D ]}|| kr | | S q W dS )z2Return an adapter factory for `ob` from `registry`rå   N)r⁄  ⁄inspect⁄getmrorß   r©  )⁄registryr4   r:  ⁄tr   r   r   r®   ∫  s    
r®   c             C   s   t jj| É}tj|ddç dS )z1Ensure that the parent directory of `path` existsT)⁄exist_okN)rØ   r∞   r  r   ⁄makedirs)r∞   r  r   r   r   rt   ¬  s    c             C   s@   t stdÉÇt| É\}}|r<|r<t|É r<t|É t|dÉ dS )z/Sandbox-bypassing version of ensure_directory()z*"os.mkdir" not supported on this platform.iÌ  N)r’  r÷  r   r   rX  r	   )r∞   r  rn  r   r   r   rX  »  s    rX  c             c   sz   d}g }xbt | ÉD ]V}|jdÉr^|jdÉrR|s2|r<||fV  |ddÖ jÉ }g }qhtd|ÉÇq|j|É qW ||fV  dS )as  Split a string or iterable thereof into (section, content) pairs

    Each ``section`` is a stripped version of the section header ("[section]")
    and each ``content`` is a list of stripped lines excluding blank lines and
    comment-only lines.  If there are any such lines before the first section
    header, they're returned in a first ``section`` of ``None``.
    N˙[˙]r   zInvalid section headingr  )rn   r¡   r˙  r,  rE   r¥   )r\  ⁄section⁄contentr-  r   r   r   ro   “  s    


c              O   s&   t j}ztt _tj| |éS |t _X d S )N)rØ   r   ⁄os_open⁄tempfile⁄mkstemp)r8   r'   ⁄old_openr   r   r   rÿ  Ï  s
    rÿ  ⁄ignore)⁄categoryr¥   c             O   s   | ||é | S )Nr   )r‰  r8   rf  r   r   r   ⁄_call_asideˇ  s    
rÎ  c                s.   t É â à | d< | já fddÑtà ÉD ÉÉ dS )z=Set up global resource manager (deliberately not state-saved)Z_managerc             3   s&   | ]}|j d És|tà |ÉfV  qdS )rΩ   N)r¡   rß   )r/  r‘   )rﬁ   r   r   r0  
  s   z_initialize.<locals>.<genexpr>N)r`   r"   r”  )r+   r   )rﬁ   r   ⁄_initialize  s
    
rÏ  c              C   s|   t jÉ } td| dç | j}| j}| j}| j}|}tddÑ | D ÉÉ |ddÑ ddç g | _t	t
| jtjÉÉ tÉ jtÉ É d	S )
aE  
    Prepare the master working set and make the ``require()``
    API available.

    This function has explicit effects on the global state
    of pkg_resources. It is intended to be invoked once at
    the initialization of this module.

    Invocation by other packages is unsupported and done
    at their own risk.
    rÿ  )rX   c             s   s   | ]}|j d dçV  qdS )F)r√   N)r§  )r/  rê   r   r   r   r0  +  s   z1_initialize_master_working_set.<locals>.<genexpr>c             S   s   | j ddçS )NT)r√   )r§  )rê   r   r   r   r9   /  s    z0_initialize_master_working_set.<locals>.<lambda>F)r(  N)r_   r   r(   rI   rP   r)  rJ   r`  r‰   r  r   rË   r@   r∞   r!   r"   rî   )rX   rI   rP   rY   rJ   rä   r   r   r   ⁄_initialize_master_working_set  s     
rÌ  )r   r   )r   r   r  )N)N)F)F)F)F)N)—r   ⁄
__future__r   r@   rØ   rÇ  rÕ  ru  r:  r∞  r˝  rf  rb  ri  ⁄pkgutilrA  rA   r  r≥   ⁄email.parserrΩ  r%  rÊ  rO  r  r€  r   rN  rø   ⁄imp⁄pkg_resources.externr   ⁄pkg_resources.extern.six.movesr   r   r   r   r	   r
   r   r’  r   rÂ  ⁄os.pathr   r   ⁄importlib.machinery⁄	machineryr®  r   r¨   r   r   r   r¶   ⁄version_info⁄RuntimeErrorr  r"  r#  rI   rX   rY   ⁄resources_streamr\   ⁄resource_dirrR   r[   rV   rQ   rP   rT   rS   rU   rÙ  r5  r6  ⁄RuntimeWarningr   r    r#   r(   r-   r.   r1   r5   r6   r7   ⁄
_sget_none⁄
_sset_nonerH   ⁄__all__rY  rd   re   rñ   rf   rg   rù   r   rJ  rv   rw   rx   ry   rz   rà   rK   rC   r∫   r=   rë  r>   r«   rl   rm   rJ   rä   rL   rM   rN   rO   r{   r|   rÿ  r_   r$   r  r^   rã   rh   r`   r]   rj   rk   rp   rq   rr   rs   rÇ   rÉ   rÑ   r´  rÄ   rÅ   r¨  rµ  rÖ   r˛  r}   r~   r   rÜ   rZ   r¸  r  r  r  r  r  r  r  r.  r  ⁄ImpImporterr≤   r4  rá   rA  r>  rW   râ   rS  rT  ru   r  r†  r  r<  rn   r?   r^  ⁄VERBOSE⁄
IGNORECASErá  rc   r~  rÇ  ra   rπ  rª  rÜ  r≥  rE   r   ri   r  rb   r⁄  r®   rt   rX  ro   rÿ  ⁄filterwarningsrÎ  r!   rÏ  rÌ  r   r   r   r   ⁄<module>   sﬁ  




 


.

     5	
d
 -'




 !!

	 	  ~36

„               @   s   d S )N© r   r   r   ˙@/usr/lib/python3/dist-packages/pkg_resources/_vendor/__init__.py⁄<module>   s    „               @   sÇ  d Z d1ZdjeeeÉÉZddlZddlZejd dkZ	e	r>eZ
ejjdÉràddlZejÉ d d ZejdÉrrd	Zqéejd
ÉrÇdZqédZnejZd2ddÑZd3ddÑZd4ddÑZd5ddÑZd6ddÑZd7ddÑZG ddÑ deÉZddÑ Zdd Ñ Zd!d"Ñ Zd#d$Ñ Zed	kêrÑyddlZeZW nn ek
êrÇ   ydd%l m!Z! eZW nB ek
êr|   yddl"Z#eZW n ek
êrv   eZY nX Y nX Y nX e$d&kêr~d'Z%d(Z&d8Z'e(d)É ee%e&d*d+çZ)x$e'D ]Z*e(d,e*e+e)e*Éf É êq∂W e(d-É ee%e&ÉZ)x$e'D ]Z*e(d,e*e+e)e*Éf É êqÓW e(d.É ee%ÉZ)x$e'D ]Z*e(d,e*e+e)e*Éf É êq$W e(d/É ee%dd0çZ)x$e'D ]Z*e(d,e*e+e)e*Éf É êq^W dS )9zyUtilities for determining application-specific dirs.

See <http://github.com/ActiveState/appdirs> for details and usage.
È   È   È    ⁄.NÈ   ⁄java⁄Windows⁄win32ZMac⁄darwinZlinux2Fc             C   s∆   t dkr^|dkr| }|rdpd}tjjt|ÉÉ}| r¨|dk	rNtjj||| É}q¨tjj|| É}nNt dkrÜtjjdÉ}| r¨tjj|| É}n&tjdtjjd	ÉÉ}| r¨tjj|| É}| r¬|r¬tjj||É}|S )
aJ  Return full path to the user-specific data dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "roaming" (boolean, default False) can be set True to use the Windows
            roaming appdata directory. That means that for users on a Windows
            network setup for roaming profiles, this user data will be
            sync'd on login. See
            <http://technet.microsoft.com/en-us/library/cc766489(WS.10).aspx>
            for a discussion of issues.

    Typical user data directories are:
        Mac OS X:               ~/Library/Application Support/<AppName>
        Unix:                   ~/.local/share/<AppName>    # or in $XDG_DATA_HOME, if defined
        Win XP (not roaming):   C:\Documents and Settings\<username>\Application Data\<AppAuthor>\<AppName>
        Win XP (roaming):       C:\Documents and Settings\<username>\Local Settings\Application Data\<AppAuthor>\<AppName>
        Win 7  (not roaming):   C:\Users\<username>\AppData\Local\<AppAuthor>\<AppName>
        Win 7  (roaming):       C:\Users\<username>\AppData\Roaming\<AppAuthor>\<AppName>

    For Unix, we follow the XDG spec and support $XDG_DATA_HOME.
    That means, by default "~/.local/share/<AppName>".
    r   N⁄CSIDL_APPDATA⁄CSIDL_LOCAL_APPDATAFr	   z~/Library/Application Support/⁄XDG_DATA_HOMEz~/.local/share)⁄system⁄os⁄path⁄normpath⁄_get_win_folder⁄join⁄
expanduser⁄getenv)⁄appname⁄	appauthor⁄version⁄roaming⁄constr   © r   ˙?/usr/lib/python3/dist-packages/pkg_resources/_vendor/appdirs.py⁄user_data_dir-   s&     r   c                s
  t dkrR|dkrà }tjjtdÉÉ}à rÓ|dk	rBtjj||à É}qÓtjj|à É}nút dkrztjjdÉ}à rÓtjj|à É}nttjdtjjdd	gÉÉ}d
dÑ |j	tjÉD É}à r–|rætjjà |Éâ á fddÑ|D É}|r‚tjj|É}n|d }|S à oÙ|êrtjj||É}|S )ai  Return full path to the user-shared data dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "multipath" is an optional parameter only applicable to *nix
            which indicates that the entire list of data dirs should be
            returned. By default, the first item from XDG_DATA_DIRS is
            returned, or '/usr/local/share/<AppName>',
            if XDG_DATA_DIRS is not set

    Typical user data directories are:
        Mac OS X:   /Library/Application Support/<AppName>
        Unix:       /usr/local/share/<AppName> or /usr/share/<AppName>
        Win XP:     C:\Documents and Settings\All Users\Application Data\<AppAuthor>\<AppName>
        Vista:      (Fail! "C:\ProgramData" is a hidden *system* directory on Vista.)
        Win 7:      C:\ProgramData\<AppAuthor>\<AppName>   # Hidden, but writeable on Win 7.

    For Unix, this is using the $XDG_DATA_DIRS[0] default.

    WARNING: Do not use this on Windows. See the Vista-Fail note above for why.
    r   N⁄CSIDL_COMMON_APPDATAFr	   z/Library/Application Support⁄XDG_DATA_DIRSz/usr/local/sharez
/usr/sharec             S   s    g | ]}t jj|jt jÉÉëqS r   )r   r   r   ⁄rstrip⁄sep)⁄.0⁄xr   r   r   ˙
<listcomp>ï   s    z!site_data_dir.<locals>.<listcomp>c                s   g | ]}t jj|à gÉëqS r   )r   r    r   )r!   r"   )r   r   r   r#   ô   s    r   )
r   r   r   r   r   r   r   r   ⁄pathsep⁄split)r   r   r   ⁄	multipathr   ⁄pathlistr   )r   r   ⁄site_data_dird   s4    
r(   c             C   sX   t dkrt| |d|É}n&tjdtjjdÉÉ}| r>tjj|| É}| rT|rTtjj||É}|S )a“  Return full path to the user-specific config dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "roaming" (boolean, default False) can be set True to use the Windows
            roaming appdata directory. That means that for users on a Windows
            network setup for roaming profiles, this user data will be
            sync'd on login. See
            <http://technet.microsoft.com/en-us/library/cc766489(WS.10).aspx>
            for a discussion of issues.

    Typical user data directories are:
        Mac OS X:               same as user_data_dir
        Unix:                   ~/.config/<AppName>     # or in $XDG_CONFIG_HOME, if defined
        Win *:                  same as user_data_dir

    For Unix, we follow the XDG spec and support $XDG_CONFIG_HOME.
    That means, by deafult "~/.config/<AppName>".
    r   r	   N⁄XDG_CONFIG_HOMEz	~/.config)r   r	   )r   r   r   r   r   r   r   )r   r   r   r   r   r   r   r   ⁄user_config_dir¶   s    r*   c                sí   t d	kr*tà |É}à ré|rétjj||É}ndtjddÉ}ddÑ |jtjÉD É}à rt|rbtjjà |Éâ á fddÑ|D É}|rÜtjj|É}n|d }|S )
a  Return full path to the user-shared data dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "multipath" is an optional parameter only applicable to *nix
            which indicates that the entire list of config dirs should be
            returned. By default, the first item from XDG_CONFIG_DIRS is
            returned, or '/etc/xdg/<AppName>', if XDG_CONFIG_DIRS is not set

    Typical user data directories are:
        Mac OS X:   same as site_data_dir
        Unix:       /etc/xdg/<AppName> or $XDG_CONFIG_DIRS[i]/<AppName> for each value in
                    $XDG_CONFIG_DIRS
        Win *:      same as site_data_dir
        Vista:      (Fail! "C:\ProgramData" is a hidden *system* directory on Vista.)

    For Unix, this is using the $XDG_CONFIG_DIRS[0] default, if multipath=False

    WARNING: Do not use this on Windows. See the Vista-Fail note above for why.
    r   r	   ⁄XDG_CONFIG_DIRSz/etc/xdgc             S   s    g | ]}t jj|jt jÉÉëqS r   )r   r   r   r   r    )r!   r"   r   r   r   r#   Ù   s    z#site_config_dir.<locals>.<listcomp>c                s   g | ]}t jj|à gÉëqS r   )r   r    r   )r!   r"   )r   r   r   r#   ¯   s    r   )r   r	   )r   r(   r   r   r   r   r%   r$   )r   r   r   r&   r   r'   r   )r   r   ⁄site_config_dirŒ   s    
r,   Tc             C   sÃ   t dkrd|dkr| }tjjtdÉÉ}| r≤|dk	rBtjj||| É}ntjj|| É}|r≤tjj|dÉ}nNt dkråtjjdÉ}| r≤tjj|| É}n&tjdtjjd	ÉÉ}| r≤tjj|| É}| r»|r»tjj||É}|S )
a  Return full path to the user-specific cache dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "opinion" (boolean) can be False to disable the appending of
            "Cache" to the base app data dir for Windows. See
            discussion below.

    Typical user cache directories are:
        Mac OS X:   ~/Library/Caches/<AppName>
        Unix:       ~/.cache/<AppName> (XDG default)
        Win XP:     C:\Documents and Settings\<username>\Local Settings\Application Data\<AppAuthor>\<AppName>\Cache
        Vista:      C:\Users\<username>\AppData\Local\<AppAuthor>\<AppName>\Cache

    On Windows the only suggestion in the MSDN docs is that local settings go in
    the `CSIDL_LOCAL_APPDATA` directory. This is identical to the non-roaming
    app data dir (the default returned by `user_data_dir` above). Apps typically
    put cache data somewhere *under* the given dir here. Some examples:
        ...\Mozilla\Firefox\Profiles\<ProfileName>\Cache
        ...\Acme\SuperApp\Cache\1.0
    OPINION: This function appends "Cache" to the `CSIDL_LOCAL_APPDATA` value.
    This can be disabled with the `opinion=False` option.
    r   Nr   F⁄Cacher	   z~/Library/Caches⁄XDG_CACHE_HOMEz~/.cache)r   r   r   r   r   r   r   r   )r   r   r   ⁄opinionr   r   r   r   ⁄user_cache_dir  s(    !r0   c             C   sà   t dkr tjjtjjdÉ| É}nNt dkrLt| ||É}d}|rntjj|dÉ}n"t| ||É}d}|rntjj|dÉ}| rÑ|rÑtjj||É}|S )aø  Return full path to the user-specific log dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "opinion" (boolean) can be False to disable the appending of
            "Logs" to the base app data dir for Windows, and "log" to the
            base cache dir for Unix. See discussion below.

    Typical user cache directories are:
        Mac OS X:   ~/Library/Logs/<AppName>
        Unix:       ~/.cache/<AppName>/log  # or under $XDG_CACHE_HOME if defined
        Win XP:     C:\Documents and Settings\<username>\Local Settings\Application Data\<AppAuthor>\<AppName>\Logs
        Vista:      C:\Users\<username>\AppData\Local\<AppAuthor>\<AppName>\Logs

    On Windows the only suggestion in the MSDN docs is that local settings
    go in the `CSIDL_LOCAL_APPDATA` directory. (Note: I'm interested in
    examples of what some windows apps use for a logs dir.)

    OPINION: This function appends "Logs" to the `CSIDL_LOCAL_APPDATA`
    value for Windows and appends "log" to the user cache dir for Unix.
    This can be disabled with the `opinion=False` option.
    r	   z~/Library/Logsr   F⁄Logs⁄log)r   r   r   r   r   r   r0   )r   r   r   r/   r   r   r   r   ⁄user_log_dir:  s      
r3   c               @   sb   e Zd ZdZdddÑZeddÑ ÉZedd	Ñ ÉZed
dÑ ÉZeddÑ ÉZ	eddÑ ÉZ
eddÑ ÉZdS )⁄AppDirsz1Convenience wrapper for getting application dirs.NFc             C   s"   || _ || _|| _|| _|| _d S )N)r   r   r   r   r&   )⁄selfr   r   r   r   r&   r   r   r   ⁄__init__o  s
    zAppDirs.__init__c             C   s   t | j| j| j| jdçS )N)r   r   )r   r   r   r   r   )r5   r   r   r   r   w  s    
zAppDirs.user_data_dirc             C   s   t | j| j| j| jdçS )N)r   r&   )r(   r   r   r   r&   )r5   r   r   r   r(   |  s    
zAppDirs.site_data_dirc             C   s   t | j| j| j| jdçS )N)r   r   )r*   r   r   r   r   )r5   r   r   r   r*   Å  s    
zAppDirs.user_config_dirc             C   s   t | j| j| j| jdçS )N)r   r&   )r,   r   r   r   r&   )r5   r   r   r   r,   Ü  s    
zAppDirs.site_config_dirc             C   s   t | j| j| jdçS )N)r   )r0   r   r   r   )r5   r   r   r   r0   ã  s    
zAppDirs.user_cache_dirc             C   s   t | j| j| jdçS )N)r   )r3   r   r   r   )r5   r   r   r   r3   ê  s    
zAppDirs.user_log_dir)NNFF)⁄__name__⁄
__module__⁄__qualname__⁄__doc__r6   ⁄propertyr   r(   r*   r,   r0   r3   r   r   r   r   r4   m  s    
r4   c             C   s:   ddl }ddddú|  }|j|jdÉ}|j||É\}}|S )zñThis is a fallback technique at best. I'm not sure if using the
    registry for this guarantees us the correct answer for all CSIDL_*
    names.
    r   N⁄AppDatazCommon AppDatazLocal AppData)r
   r   r   z@Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders)⁄_winreg⁄OpenKey⁄HKEY_CURRENT_USER⁄QueryValueEx)⁄
csidl_namer=   ⁄shell_folder_name⁄key⁄dir⁄typer   r   r   ⁄_get_win_folder_from_registryò  s    rF   c             C   s†   ddl m}m} |jdt|| ÉddÉ}y`t|É}d}x|D ]}t|Édkr:d}P q:W |rÑydd l}|j|É}W n t	k
rÇ   Y nX W n t
k
rö   Y nX |S )Nr   )⁄shellcon⁄shellFÈˇ   T)⁄win32com.shellrG   rH   ⁄SHGetFolderPath⁄getattr⁄unicode⁄ord⁄win32api⁄GetShortPathName⁄ImportError⁄UnicodeError)rA   rG   rH   rD   ⁄has_high_char⁄crO   r   r   r   ⁄_get_win_folder_with_pywin32≠  s$    

rU   c             C   sà   dd l }ddddú|  }|jdÉ}|jjjd |d d|É d}x|D ]}t|ÉdkrBd	}P qBW |rÇ|jdÉ}|jjj|j|dÉrÇ|}|jS )
Nr   È   È#   È   )r
   r   r   i   FrI   T)	⁄ctypes⁄create_unicode_buffer⁄windll⁄shell32⁄SHGetFolderPathWrN   ⁄kernel32⁄GetShortPathNameW⁄value)rA   rY   ⁄csidl_const⁄bufrS   rT   ⁄buf2r   r   r   ⁄_get_win_folder_with_ctypes»  s"    


rd   c             C   sÿ   dd l }ddlm} ddlm} |jjd }|jd|É}|jj	}|j
d t|j| Éd |jj|É |jj|jÉ ÉjdÉ}d}x|D ]}	t|	Édkr~d	}P q~W |r‘|jd|É}|jj	}
tj|||Ér‘|jj|jÉ ÉjdÉ}|S )
Nr   )⁄jna)r   È   rT   ˙ FrI   T)⁄array⁄com.sunre   ⁄com.sun.jna.platformr   ⁄WinDef⁄MAX_PATH⁄zeros⁄Shell32⁄INSTANCErK   rL   ⁄ShlObj⁄SHGFP_TYPE_CURRENT⁄Native⁄toString⁄tostringr   rN   ⁄Kernel32⁄kernalrP   )rA   rh   re   r   ⁄buf_sizerb   rH   rD   rS   rT   ⁄kernelr   r   r   ⁄_get_win_folder_with_jna‚  s&    
ry   )r[   ⁄__main__ZMyAppZ	MyCompanyz%-- app dirs (with optional 'version')z1.0)r   z%s: %sz)
-- app dirs (without optional 'version')z+
-- app dirs (without optional 'appauthor')z(
-- app dirs (with disabled 'appauthor'))r   )r   r   r   )NNNF)NNNF)NNNF)NNNF)NNNT)NNNT)r   r(   r*   r,   r0   r3   ),r:   ⁄__version_info__r   ⁄map⁄str⁄__version__⁄sysr   ⁄version_info⁄PY3rM   ⁄platform⁄
startswith⁄java_ver⁄os_namer   r   r(   r*   r,   r0   r3   ⁄objectr4   rF   rU   rd   ry   rJ   ⁄win32comr   rQ   rY   r[   ⁄com.sun.jna⁄comr7   r   r   ⁄props⁄print⁄dirs⁄proprL   r   r   r   r   ⁄<module>	   s~   


7
B
(
3
9
3+

  




„               @   sT   d dl mZmZmZ ddlmZmZmZmZm	Z	m
Z
mZmZ dddddd	d
dgZdS )È    )⁄absolute_import⁄division⁄print_functionÈ   )⁄
__author__⁄__copyright__⁄	__email__⁄__license__⁄__summary__⁄	__title__⁄__uri__⁄__version__r   r
   r   r   r   r   r	   r   N)⁄
__future__r   r   r   ⁄	__about__r   r   r   r	   r
   r   r   r   ⁄__all__© r   r   ˙J/usr/lib/python3/dist-packages/pkg_resources/_vendor/packaging/__init__.py⁄<module>   s   (
„               @   sP   d dl mZmZmZ dddddddd	gZd
ZdZdZdZdZ	dZ
dZde	 ZdS )È    )⁄absolute_import⁄division⁄print_function⁄	__title__⁄__summary__⁄__uri__⁄__version__⁄
__author__⁄	__email__⁄__license__⁄__copyright__⁄	packagingz"Core utilities for Python packagesz!https://github.com/pypa/packagingz16.8z)Donald Stufft and individual contributorszdonald@stufft.ioz"BSD or Apache License, Version 2.0zCopyright 2014-2016 %sN)⁄
__future__r   r   r   ⁄__all__r   r   r   r   r	   r
   r   r   © r   r   ˙K/usr/lib/python3/dist-packages/pkg_resources/_vendor/packaging/__about__.py⁄<module>   s   

„               @   sV   d dl mZmZmZ d dlZejd  dkZejd  dkZerDefZ	ne
fZ	ddÑ ZdS )È    )⁄absolute_import⁄division⁄print_functionNÈ   È   c                s&   G á áfddÑdàÉ}t j|df i ÉS )z/
    Create a base class with a metaclass.
    c                   s   e Zd Zá áfddÑZdS )z!with_metaclass.<locals>.metaclassc                s   à|à |ÉS )N© )⁄cls⁄name⁄
this_bases⁄d)⁄bases⁄metar   ˙I/usr/lib/python3/dist-packages/pkg_resources/_vendor/packaging/_compat.py⁄__new__   s    z)with_metaclass.<locals>.metaclass.__new__N)⁄__name__⁄
__module__⁄__qualname__r   r   )r   r   r   r   ⁄	metaclass   s   r   Ztemporary_class)⁄typer   )r   r   r   r   )r   r   r   ⁄with_metaclass   s    r   )⁄
__future__r   r   r   ⁄sys⁄version_info⁄PY2⁄PY3⁄str⁄string_types⁄
basestringr   r   r   r   r   ⁄<module>   s   „               @   sD   d dl mZmZmZ G ddÑ deÉZeÉ ZG ddÑ deÉZeÉ ZdS )È    )⁄absolute_import⁄division⁄print_functionc               @   sT   e Zd ZddÑ ZddÑ ZddÑ ZddÑ Zd	d
Ñ ZddÑ ZddÑ Z	ddÑ Z
ddÑ ZdS )⁄Infinityc             C   s   dS )Nr   © )⁄selfr   r   ˙M/usr/lib/python3/dist-packages/pkg_resources/_vendor/packaging/_structures.py⁄__repr__	   s    zInfinity.__repr__c             C   s   t t| ÉÉS )N)⁄hash⁄repr)r   r   r   r   ⁄__hash__   s    zInfinity.__hash__c             C   s   dS )NFr   )r   ⁄otherr   r   r   ⁄__lt__   s    zInfinity.__lt__c             C   s   dS )NFr   )r   r   r   r   r   ⁄__le__   s    zInfinity.__le__c             C   s   t || jÉS )N)⁄
isinstance⁄	__class__)r   r   r   r   r   ⁄__eq__   s    zInfinity.__eq__c             C   s   t || jÉ S )N)r   r   )r   r   r   r   r   ⁄__ne__   s    zInfinity.__ne__c             C   s   dS )NTr   )r   r   r   r   r   ⁄__gt__   s    zInfinity.__gt__c             C   s   dS )NTr   )r   r   r   r   r   ⁄__ge__   s    zInfinity.__ge__c             C   s   t S )N)⁄NegativeInfinity)r   r   r   r   ⁄__neg__!   s    zInfinity.__neg__N)⁄__name__⁄
__module__⁄__qualname__r	   r   r   r   r   r   r   r   r   r   r   r   r   r      s   r   c               @   sT   e Zd ZddÑ ZddÑ ZddÑ ZddÑ Zd	d
Ñ ZddÑ ZddÑ Z	ddÑ Z
ddÑ ZdS )r   c             C   s   dS )Nz	-Infinityr   )r   r   r   r   r	   )   s    zNegativeInfinity.__repr__c             C   s   t t| ÉÉS )N)r
   r   )r   r   r   r   r   ,   s    zNegativeInfinity.__hash__c             C   s   dS )NTr   )r   r   r   r   r   r   /   s    zNegativeInfinity.__lt__c             C   s   dS )NTr   )r   r   r   r   r   r   2   s    zNegativeInfinity.__le__c             C   s   t || jÉS )N)r   r   )r   r   r   r   r   r   5   s    zNegativeInfinity.__eq__c             C   s   t || jÉ S )N)r   r   )r   r   r   r   r   r   8   s    zNegativeInfinity.__ne__c             C   s   dS )NFr   )r   r   r   r   r   r   ;   s    zNegativeInfinity.__gt__c             C   s   dS )NFr   )r   r   r   r   r   r   >   s    zNegativeInfinity.__ge__c             C   s   t S )N)r   )r   r   r   r   r   A   s    zNegativeInfinity.__neg__N)r   r   r   r	   r   r   r   r   r   r   r   r   r   r   r   r   r   '   s   r   N)⁄
__future__r   r   r   ⁄objectr   r   r   r   r   r   ⁄<module>   s   „            	   @   s@  d dl mZmZmZ d dlZd dlZd dlZd dlZd dlm	Z	m
Z
mZmZ d dlmZmZmZmZ d dlmZ ddlmZ ddlmZmZ d	d
dddgZG dd	Ñ d	eÉZG dd
Ñ d
eÉZG ddÑ deÉZG ddÑ deÉZG ddÑ deÉZG ddÑ deÉZ G ddÑ deÉZ!edÉedÉB edÉB edÉB edÉB edÉB edÉB ed ÉB ed!ÉB ed"ÉB ed#ÉB ed$ÉB ed%ÉB ed&ÉB ed'ÉB ed(ÉB ed)ÉB ed*ÉB Z"d#d"ddddd+úZ#e"j$d,d-Ñ É ed.Éed/ÉB ed0ÉB ed1ÉB ed2ÉB ed3ÉB ed4ÉB ed5ÉB Z%e%ed6ÉB ed7ÉB Z&e&j$d8d-Ñ É ed9Éed:ÉB Z'e'j$d;d-Ñ É ed<Éed=ÉB Z(e"e'B Z)ee)e& e) ÉZ*e*j$d>d-Ñ É ed?Éj+É Z,ed@Éj+É Z-eÉ Z.e*ee,e. e- ÉB Z/e.e/ee(e. É >  ee. e Z0dAdBÑ Z1dSdDdEÑZ2dFd-Ñ dGd-Ñ ej3ej4ej5ej6ej7ej8dHúZ9dIdJÑ Z:eÉ Z;dKdLÑ Z<dMdNÑ Z=dOdPÑ Z>dQdÑ Z?G dRdÑ deÉZ@dS )TÈ    )⁄absolute_import⁄division⁄print_functionN)⁄ParseException⁄ParseResults⁄stringStart⁄	stringEnd)⁄
ZeroOrMore⁄Group⁄Forward⁄QuotedString)⁄LiteralÈ   )⁄string_types)⁄	Specifier⁄InvalidSpecifier⁄InvalidMarker⁄UndefinedComparison⁄UndefinedEnvironmentName⁄Marker⁄default_environmentc               @   s   e Zd ZdZdS )r   zE
    An invalid marker was found, users should refer to PEP 508.
    N)⁄__name__⁄
__module__⁄__qualname__⁄__doc__© r   r   ˙I/usr/lib/python3/dist-packages/pkg_resources/_vendor/packaging/markers.pyr      s   c               @   s   e Zd ZdZdS )r   zP
    An invalid operation was attempted on a value that doesn't support it.
    N)r   r   r   r   r   r   r   r   r      s   c               @   s   e Zd ZdZdS )r   z\
    A name was attempted to be used that does not exist inside of the
    environment.
    N)r   r   r   r   r   r   r   r   r   %   s   c               @   s,   e Zd ZddÑ ZddÑ ZddÑ ZddÑ Zd	S )
⁄Nodec             C   s
   || _ d S )N)⁄value)⁄selfr   r   r   r   ⁄__init__.   s    zNode.__init__c             C   s
   t | jÉS )N)⁄strr   )r   r   r   r   ⁄__str__1   s    zNode.__str__c             C   s   dj | jjt| ÉÉS )Nz<{0}({1!r})>)⁄format⁄	__class__r   r!   )r   r   r   r   ⁄__repr__4   s    zNode.__repr__c             C   s   t Çd S )N)⁄NotImplementedError)r   r   r   r   ⁄	serialize7   s    zNode.serializeN)r   r   r   r    r"   r%   r'   r   r   r   r   r   ,   s   r   c               @   s   e Zd ZddÑ ZdS )⁄Variablec             C   s   t | ÉS )N)r!   )r   r   r   r   r'   =   s    zVariable.serializeN)r   r   r   r'   r   r   r   r   r(   ;   s   r(   c               @   s   e Zd ZddÑ ZdS )⁄Valuec             C   s
   dj | ÉS )Nz"{0}")r#   )r   r   r   r   r'   C   s    zValue.serializeN)r   r   r   r'   r   r   r   r   r)   A   s   r)   c               @   s   e Zd ZddÑ ZdS )⁄Opc             C   s   t | ÉS )N)r!   )r   r   r   r   r'   I   s    zOp.serializeN)r   r   r   r'   r   r   r   r   r*   G   s   r*   ⁄implementation_version⁄platform_python_implementation⁄implementation_name⁄python_full_version⁄platform_release⁄platform_version⁄platform_machine⁄platform_system⁄python_version⁄sys_platform⁄os_namezos.namezsys.platformzplatform.versionzplatform.machinezplatform.python_implementation⁄python_implementation⁄extra)zos.namezsys.platformzplatform.versionzplatform.machinezplatform.python_implementationr6   c             C   s   t tj|d |d ÉÉS )Nr   )r(   ⁄ALIASES⁄get)⁄s⁄l⁄tr   r   r   ⁄<lambda>i   s    r=   z===z==z>=z<=z!=z~=˙>˙<znot in⁄inc             C   s   t |d ÉS )Nr   )r*   )r:   r;   r<   r   r   r   r=   w   s    ˙'˙"c             C   s   t |d ÉS )Nr   )r)   )r:   r;   r<   r   r   r   r=   z   s    ⁄and⁄orc             C   s   t |d ÉS )Nr   )⁄tuple)r:   r;   r<   r   r   r   r=   Å   s    ˙(˙)c             C   s    t | tÉrddÑ | D ÉS | S d S )Nc             S   s   g | ]}t |ÉëqS r   )⁄_coerce_parse_result)⁄.0⁄ir   r   r   ˙
<listcomp>è   s    z(_coerce_parse_result.<locals>.<listcomp>)⁄
isinstancer   )⁄resultsr   r   r   rH   ç   s    
rH   Tc             C   s®   t | tttfÉstÇt | tÉrHt| ÉdkrHt | d ttfÉrHt| d ÉS t | tÉrÇddÑ | D É}|rndj|ÉS ddj|É d S n"t | tÉr†djdd	Ñ | D ÉÉS | S d S )
Nr   r   c             s   s   | ]}t |d dçV  qdS )F)⁄firstN)⁄_format_marker)rI   ⁄mr   r   r   ˙	<genexpr>†   s    z!_format_marker.<locals>.<genexpr>˙ rF   rG   c             S   s   g | ]}|j É ëqS r   )r'   )rI   rP   r   r   r   rK   ¶   s    z"_format_marker.<locals>.<listcomp>)rL   ⁄listrE   r   ⁄AssertionError⁄lenrO   ⁄join)⁄markerrN   ⁄innerr   r   r   rO   î   s    


rO   c             C   s   | |kS )Nr   )⁄lhs⁄rhsr   r   r   r=   ¨   s    c             C   s   | |kS )Nr   )rY   rZ   r   r   r   r=   ≠   s    )r@   znot inr?   z<=z==z!=z>=r>   c             C   sl   yt dj|jÉ |gÉÉ}W n tk
r.   Y nX |j| ÉS tj|jÉ É}|d krbtdj|| |ÉÉÇ|| |ÉS )N⁄ z#Undefined {0!r} on {1!r} and {2!r}.)	r   rV   r'   r   ⁄contains⁄
_operatorsr9   r   r#   )rY   ⁄oprZ   ⁄spec⁄operr   r   r   ⁄_eval_op∑   s    
ra   c             C   s&   | j |tÉ}|tkr"tdj|ÉÉÇ|S )Nz/{0!r} does not exist in evaluation environment.)r9   ⁄
_undefinedr   r#   )⁄environment⁄namer   r   r   r   ⁄_get_envÀ   s
    re   c       	      C   s‘   g g}x∫| D ]≤}t |tttfÉs$tÇt |tÉrD|d jt||ÉÉ qt |tÉr†|\}}}t |tÉrvt||j	É}|j	}n|j	}t||j	É}|d jt
|||ÉÉ q|dks¨tÇ|dkr|jg É qW tddÑ |D ÉÉS )	Nr   rC   rD   c             s   s   | ]}t |ÉV  qd S )N)⁄all)rI   ⁄itemr   r   r   rQ   Ó   s    z$_evaluate_markers.<locals>.<genexpr>Èˇˇˇˇrh   )rC   rD   )rL   rS   rE   r   rT   ⁄append⁄_evaluate_markersr(   re   r   ra   ⁄any)	⁄markersrc   ⁄groupsrW   rY   r^   rZ   ⁄	lhs_value⁄	rhs_valuer   r   r   rj   ÷   s"    




rj   c             C   s2   dj | É}| j}|dkr.||d t| jÉ 7 }|S )Nz{0.major}.{0.minor}.{0.micro}⁄finalr   )r#   ⁄releaselevelr!   ⁄serial)⁄info⁄version⁄kindr   r   r   ⁄format_full_versionÒ   s
    
rv   c              C   sl   t tdÉr ttjjÉ} tjj}nd} d}|| tjtjÉ tj	É tj
É tjÉ tjÉ tjÉ tjÉ d dÖ tjdúS )N⁄implementation⁄0r[   È   )r-   r+   r5   r1   r/   r2   r0   r.   r,   r3   r4   )⁄hasattr⁄sysrv   rw   rt   rd   ⁄os⁄platform⁄machine⁄release⁄systemr3   r6   )⁄iverr-   r   r   r   r   ˘   s     

c               @   s.   e Zd ZddÑ ZddÑ ZddÑ Zd
dd	ÑZdS )r   c             C   s`   yt tj|ÉÉ| _W nF tk
rZ } z*dj|||j|jd Ö É}t|ÉÇW Y d d }~X nX d S )Nz+Invalid marker: {0!r}, parse error at {1!r}È   )rH   ⁄MARKER⁄parseString⁄_markersr   r#   ⁄locr   )r   rW   ⁄e⁄err_strr   r   r   r      s    zMarker.__init__c             C   s
   t | jÉS )N)rO   rÖ   )r   r   r   r   r"     s    zMarker.__str__c             C   s   dj t| ÉÉS )Nz<Marker({0!r})>)r#   r!   )r   r   r   r   r%     s    zMarker.__repr__Nc             C   s$   t É }|dk	r|j|É t| j|ÉS )a$  Evaluate a marker.

        Return the boolean from evaluating the given marker against the
        environment. environment is an optional argument to override all or
        part of the determined environment.

        The environment is determined from the current Python process.
        N)r   ⁄updaterj   rÖ   )r   rc   ⁄current_environmentr   r   r   ⁄evaluate   s    	
zMarker.evaluate)N)r   r   r   r    r"   r%   rã   r   r   r   r   r     s   )T)A⁄
__future__r   r   r   ⁄operatorr|   r}   r{   ⁄pkg_resources.extern.pyparsingr   r   r   r   r	   r
   r   r   r   ⁄L⁄_compatr   ⁄
specifiersr   r   ⁄__all__⁄
ValueErrorr   r   r   ⁄objectr   r(   r)   r*   ⁄VARIABLEr8   ⁄setParseAction⁄VERSION_CMP⁄	MARKER_OP⁄MARKER_VALUE⁄BOOLOP⁄
MARKER_VAR⁄MARKER_ITEM⁄suppress⁄LPAREN⁄RPAREN⁄MARKER_EXPR⁄MARKER_ATOMrÉ   rH   rO   ⁄lt⁄le⁄eq⁄ne⁄ge⁄gtr]   ra   rb   re   rj   rv   r   r   r   r   r   r   ⁄<module>   sx   Ü
	6


„               @   sr  d dl mZmZmZ d dlZd dlZd dlmZmZm	Z	m
Z
 d dlmZmZmZmZmZ d dlmZ d dlmZ ddlmZmZ dd	lmZmZmZ G d
dÑ deÉZeejej ÉZ edÉj!É Z"edÉj!É Z#edÉj!É Z$edÉj!É Z%edÉj!É Z&edÉj!É Z'edÉj!É Z(edÉZ)e ee)Ée  B Z*ee ee*É ÉZ+e+dÉZ,e+Z-edÉdÉZ.e(e. Z/e-ee&e- É Z0e"ee0É e# dÉZ1eej2ej3ej4B ÉZ5eej2ej3ej4B ÉZ6e5e6A Z7ee7ee&e7 É dddçdÉZ8ee$e8 e% e8B ÉZ9e9j:ddÑ É e	e9ÉdÉZ;e;j:ddÑ É e	eÉ ÉdÉZej:d dÑ É e'Z<e<e Z=e;ee=É Z>e/ee=É Z?e,ee1É e?e>B  Z@ee@ e ZAG d!d"Ñ d"eBÉZCdS )#È    )⁄absolute_import⁄division⁄print_functionN)⁄stringStart⁄	stringEnd⁄originalTextFor⁄ParseException)⁄
ZeroOrMore⁄Word⁄Optional⁄Regex⁄Combine)⁄Literal)⁄parseÈ   )⁄MARKER_EXPR⁄Marker)⁄LegacySpecifier⁄	Specifier⁄SpecifierSetc               @   s   e Zd ZdZdS )⁄InvalidRequirementzJ
    An invalid requirement was found, users should refer to PEP 508.
    N)⁄__name__⁄
__module__⁄__qualname__⁄__doc__© r   r   ˙N/usr/lib/python3/dist-packages/pkg_resources/_vendor/packaging/requirements.pyr      s   r   ˙[˙]˙(˙)˙,˙;˙@z-_.⁄namez[^ ]+⁄url⁄extrasF)⁄
joinString⁄adjacent⁄	_raw_specc             C   s
   |j pdS )N⁄ )r)   )⁄s⁄l⁄tr   r   r   ⁄<lambda>6   s    r.   ⁄	specifierc             C   s   |d S )Nr   r   )r+   r,   r-   r   r   r   r.   9   s    ⁄markerc             C   s   t | |j|jÖ ÉS )N)r   ⁄_original_start⁄_original_end)r+   r,   r-   r   r   r   r.   =   s    c               @   s(   e Zd ZdZddÑ ZddÑ ZddÑ ZdS )	⁄Requirementz¡Parse a requirement.

    Parse a given requirement string into its parts, such as name, specifier,
    URL, and extras. Raises InvalidRequirement on a badly-formed requirement
    string.
    c             C   s‹   yt j|É}W n@ tk
rN } z$tdj||j|jd Ö ÉÉÇW Y d d }~X nX |j| _|jrötj|jÉ}|j	ot|j
 sà|j	 rê|j
 rêtdÉÇ|j| _nd | _t|jr≤|jjÉ ng É| _t|jÉ| _|jr“|jnd | _d S )Nz+Invalid requirement, parse error at "{0!r}"È   zInvalid URL given)⁄REQUIREMENT⁄parseStringr   r   ⁄format⁄locr$   r%   ⁄urlparse⁄scheme⁄netloc⁄setr&   ⁄asListr   r/   r0   )⁄self⁄requirement_string⁄req⁄e⁄
parsed_urlr   r   r   ⁄__init__X   s"    *
zRequirement.__init__c             C   sz   | j g}| jr*|jdjdjt| jÉÉÉÉ | jr@|jt| jÉÉ | jrX|jdj| jÉÉ | j	rp|jdj| j	ÉÉ dj|ÉS )Nz[{0}]r!   z@ {0}z; {0}r*   )
r$   r&   ⁄appendr7   ⁄join⁄sortedr/   ⁄strr%   r0   )r>   ⁄partsr   r   r   ⁄__str__m   s    zRequirement.__str__c             C   s   dj t| ÉÉS )Nz<Requirement({0!r})>)r7   rG   )r>   r   r   r   ⁄__repr__~   s    zRequirement.__repr__N)r   r   r   r   rC   rI   rJ   r   r   r   r   r3   K   s   r3   )D⁄
__future__r   r   r   ⁄string⁄re⁄pkg_resources.extern.pyparsingr   r   r   r   r	   r
   r   r   r   r   ⁄L⁄%pkg_resources.extern.six.moves.urllibr   r9   ⁄markersr   r   ⁄
specifiersr   r   r   ⁄
ValueErrorr   ⁄ascii_letters⁄digits⁄ALPHANUM⁄suppress⁄LBRACKET⁄RBRACKET⁄LPAREN⁄RPAREN⁄COMMA⁄	SEMICOLON⁄AT⁄PUNCTUATION⁄IDENTIFIER_END⁄
IDENTIFIER⁄NAME⁄EXTRA⁄URI⁄URL⁄EXTRAS_LIST⁄EXTRAS⁄
_regex_str⁄VERBOSE⁄
IGNORECASE⁄VERSION_PEP440⁄VERSION_LEGACY⁄VERSION_ONE⁄VERSION_MANY⁄_VERSION_SPEC⁄setParseAction⁄VERSION_SPEC⁄MARKER_SEPERATOR⁄MARKER⁄VERSION_AND_MARKER⁄URL_AND_MARKER⁄NAMED_REQUIREMENTr5   ⁄objectr3   r   r   r   r   ⁄<module>   sZ   
„               @   sÊ   d dl mZmZmZ d dlZd dlZd dlZd dlZddlm	Z	m
Z
 ddlmZmZmZ G ddÑ deÉZG dd	Ñ d	e
ejeÉÉZG d
dÑ deÉZG ddÑ deÉZddÑ ZG ddÑ deÉZejdÉZddÑ ZddÑ ZG ddÑ deÉZdS )È    )⁄absolute_import⁄division⁄print_functionNÈ   )⁄string_types⁄with_metaclass)⁄Version⁄LegacyVersion⁄parsec               @   s   e Zd ZdZdS )⁄InvalidSpecifierzH
    An invalid specifier was found, users should refer to PEP 440.
    N)⁄__name__⁄
__module__⁄__qualname__⁄__doc__© r   r   ˙L/usr/lib/python3/dist-packages/pkg_resources/_vendor/packaging/specifiers.pyr      s   r   c               @   sÄ   e Zd ZejddÑ ÉZejddÑ ÉZejddÑ ÉZejddÑ ÉZej	d	d
Ñ ÉZ
e
jdd
Ñ ÉZ
ejdddÑÉZejdddÑÉZdS )⁄BaseSpecifierc             C   s   dS )zé
        Returns the str representation of this Specifier like object. This
        should be representative of the Specifier itself.
        Nr   )⁄selfr   r   r   ⁄__str__   s    zBaseSpecifier.__str__c             C   s   dS )zF
        Returns a hash value for this Specifier like object.
        Nr   )r   r   r   r   ⁄__hash__   s    zBaseSpecifier.__hash__c             C   s   dS )zq
        Returns a boolean representing whether or not the two Specifier like
        objects are equal.
        Nr   )r   ⁄otherr   r   r   ⁄__eq__$   s    zBaseSpecifier.__eq__c             C   s   dS )zu
        Returns a boolean representing whether or not the two Specifier like
        objects are not equal.
        Nr   )r   r   r   r   r   ⁄__ne__+   s    zBaseSpecifier.__ne__c             C   s   dS )zg
        Returns whether or not pre-releases as a whole are allowed by this
        specifier.
        Nr   )r   r   r   r   ⁄prereleases2   s    zBaseSpecifier.prereleasesc             C   s   dS )zd
        Sets whether or not pre-releases as a whole are allowed by this
        specifier.
        Nr   )r   ⁄valuer   r   r   r   9   s    Nc             C   s   dS )zR
        Determines if the given item is contained within this specifier.
        Nr   )r   ⁄itemr   r   r   r   ⁄contains@   s    zBaseSpecifier.containsc             C   s   dS )zï
        Takes an iterable of items and filters them so that only items which
        are contained within this specifier are allowed in it.
        Nr   )r   ⁄iterabler   r   r   r   ⁄filterF   s    zBaseSpecifier.filter)N)N)r   r   r   ⁄abc⁄abstractmethodr   r   r   r   ⁄abstractpropertyr   ⁄setterr   r   r   r   r   r   r      s   r   c               @   s†   e Zd Zi Zd ddÑZddÑ ZddÑ Zd	d
Ñ ZddÑ ZddÑ Z	ddÑ Z
ddÑ ZeddÑ ÉZeddÑ ÉZeddÑ ÉZejddÑ ÉZddÑ Zd!ddÑZd"ddÑZdS )#⁄_IndividualSpecifier⁄ Nc             C   sF   | j j|É}|stdj|ÉÉÇ|jdÉjÉ |jdÉjÉ f| _|| _d S )NzInvalid specifier: '{0}'⁄operator⁄version)⁄_regex⁄searchr   ⁄format⁄group⁄strip⁄_spec⁄_prereleases)r   ⁄specr   ⁄matchr   r   r   ⁄__init__R   s    z_IndividualSpecifier.__init__c             C   s0   | j d k	rdj| jÉnd}dj| jjt| É|ÉS )Nz, prereleases={0!r}r$   z<{0}({1!r}{2})>)r-   r)   r   ⁄	__class__r   ⁄str)r   ⁄prer   r   r   ⁄__repr___   s    z_IndividualSpecifier.__repr__c             C   s   dj | jé S )Nz{0}{1})r)   r,   )r   r   r   r   r   l   s    z_IndividualSpecifier.__str__c             C   s
   t | jÉS )N)⁄hashr,   )r   r   r   r   r   o   s    z_IndividualSpecifier.__hash__c             C   sL   t |tÉr0y| j|É}W q@ tk
r,   tS X nt || jÉs@tS | j|jkS )N)⁄
isinstancer   r1   r   ⁄NotImplementedr,   )r   r   r   r   r   r   r   s    
z_IndividualSpecifier.__eq__c             C   sL   t |tÉr0y| j|É}W q@ tk
r,   tS X nt || jÉs@tS | j|jkS )N)r6   r   r1   r   r7   r,   )r   r   r   r   r   r   }   s    
z_IndividualSpecifier.__ne__c             C   s   t | dj| j| ÉÉS )Nz_compare_{0})⁄getattrr)   ⁄
_operators)r   ⁄opr   r   r   ⁄_get_operatorà   s    z"_IndividualSpecifier._get_operatorc             C   s   t |ttfÉst|É}|S )N)r6   r	   r   r
   )r   r&   r   r   r   ⁄_coerce_versionã   s    z$_IndividualSpecifier._coerce_versionc             C   s
   | j d S )Nr   )r,   )r   r   r   r   r%   ê   s    z_IndividualSpecifier.operatorc             C   s
   | j d S )Nr   )r,   )r   r   r   r   r&   î   s    z_IndividualSpecifier.versionc             C   s   | j S )N)r-   )r   r   r   r   r   ò   s    z _IndividualSpecifier.prereleasesc             C   s
   || _ d S )N)r-   )r   r   r   r   r   r   ú   s    c             C   s
   | j |ÉS )N)r   )r   r   r   r   r   ⁄__contains__†   s    z!_IndividualSpecifier.__contains__c             C   s<   |d kr| j }| j|É}|jr(| r(dS | j| jÉ|| jÉS )NF)r   r<   ⁄is_prereleaser;   r%   r&   )r   r   r   r   r   r   r   £   s    
z_IndividualSpecifier.containsc             c   så   d}g }d|d k	r|ndi}xL|D ]D}| j |É}| j|f|ér"|jr\|pL| j r\|j|É q"d}|V  q"W | rà|ràx|D ]
}|V  qzW d S )NFr   T)r<   r   r>   r   ⁄append)r   r   r   ⁄yielded⁄found_prereleases⁄kwr&   ⁄parsed_versionr   r   r   r   ∂   s    




z_IndividualSpecifier.filter)r$   N)N)N)r   r   r   r9   r0   r4   r   r   r   r   r;   r<   ⁄propertyr%   r&   r   r"   r=   r   r   r   r   r   r   r#   N   s    

r#   c               @   sv   e Zd ZdZejde d ejejB ÉZdddddd	d
úZ	ddÑ Z
ddÑ ZddÑ ZddÑ ZddÑ ZddÑ ZddÑ ZdS )⁄LegacySpecifiera€  
        (?P<operator>(==|!=|<=|>=|<|>))
        \s*
        (?P<version>
            [^,;\s)]* # Since this is a "legacy" specifier, and the version
                      # string can be just about anything, we match everything
                      # except for whitespace, a semi-colon for marker support,
                      # a closing paren since versions can be enclosed in
                      # them, and a comma since it's a version separator.
        )
        z^\s*z\s*$⁄equal⁄	not_equal⁄less_than_equal⁄greater_than_equal⁄	less_than⁄greater_than)z==z!=z<=z>=˙<˙>c             C   s   t |tÉstt|ÉÉ}|S )N)r6   r	   r2   )r   r&   r   r   r   r<   Ú   s    
zLegacySpecifier._coerce_versionc             C   s   || j |ÉkS )N)r<   )r   ⁄prospectiver.   r   r   r   ⁄_compare_equal˜   s    zLegacySpecifier._compare_equalc             C   s   || j |ÉkS )N)r<   )r   rN   r.   r   r   r   ⁄_compare_not_equal˙   s    z"LegacySpecifier._compare_not_equalc             C   s   || j |ÉkS )N)r<   )r   rN   r.   r   r   r   ⁄_compare_less_than_equal˝   s    z(LegacySpecifier._compare_less_than_equalc             C   s   || j |ÉkS )N)r<   )r   rN   r.   r   r   r   ⁄_compare_greater_than_equal   s    z+LegacySpecifier._compare_greater_than_equalc             C   s   || j |Ék S )N)r<   )r   rN   r.   r   r   r   ⁄_compare_less_than  s    z"LegacySpecifier._compare_less_thanc             C   s   || j |ÉkS )N)r<   )r   rN   r.   r   r   r   ⁄_compare_greater_than  s    z%LegacySpecifier._compare_greater_thanN)r   r   r   ⁄
_regex_str⁄re⁄compile⁄VERBOSE⁄
IGNORECASEr'   r9   r<   rO   rP   rQ   rR   rS   rT   r   r   r   r   rE   ÷   s    rE   c                s   t jà Éá fddÑÉ}|S )Nc                s   t |tÉsdS à | ||ÉS )NF)r6   r   )r   rN   r.   )⁄fnr   r   ⁄wrapped  s    
z)_require_version_compare.<locals>.wrapped)⁄	functools⁄wraps)rZ   r[   r   )rZ   r   ⁄_require_version_compare
  s    r^   c            	   @   s∏   e Zd ZdZejde d ejejB ÉZdddddd	d
ddúZ	e
ddÑ ÉZe
ddÑ ÉZe
ddÑ ÉZe
ddÑ ÉZe
ddÑ ÉZe
ddÑ ÉZe
ddÑ ÉZddÑ ZeddÑ ÉZejddÑ ÉZd S )!⁄	Specifiera  
        (?P<operator>(~=|==|!=|<=|>=|<|>|===))
        (?P<version>
            (?:
                # The identity operators allow for an escape hatch that will
                # do an exact string match of the version you wish to install.
                # This will not be parsed by PEP 440 and we cannot determine
                # any semantic meaning from it. This operator is discouraged
                # but included entirely as an escape hatch.
                (?<====)  # Only match for the identity operator
                \s*
                [^\s]*    # We just match everything, except for whitespace
                          # since we are only testing for strict identity.
            )
            |
            (?:
                # The (non)equality operators allow for wild card and local
                # versions to be specified so we have to define these two
                # operators separately to enable that.
                (?<===|!=)            # Only match for equals and not equals

                \s*
                v?
                (?:[0-9]+!)?          # epoch
                [0-9]+(?:\.[0-9]+)*   # release
                (?:                   # pre release
                    [-_\.]?
                    (a|b|c|rc|alpha|beta|pre|preview)
                    [-_\.]?
                    [0-9]*
                )?
                (?:                   # post release
                    (?:-[0-9]+)|(?:[-_\.]?(post|rev|r)[-_\.]?[0-9]*)
                )?

                # You cannot use a wild card and a dev or local version
                # together so group them with a | and make them optional.
                (?:
                    (?:[-_\.]?dev[-_\.]?[0-9]*)?         # dev release
                    (?:\+[a-z0-9]+(?:[-_\.][a-z0-9]+)*)? # local
                    |
                    \.\*  # Wild card syntax of .*
                )?
            )
            |
            (?:
                # The compatible operator requires at least two digits in the
                # release segment.
                (?<=~=)               # Only match for the compatible operator

                \s*
                v?
                (?:[0-9]+!)?          # epoch
                [0-9]+(?:\.[0-9]+)+   # release  (We have a + instead of a *)
                (?:                   # pre release
                    [-_\.]?
                    (a|b|c|rc|alpha|beta|pre|preview)
                    [-_\.]?
                    [0-9]*
                )?
                (?:                                   # post release
                    (?:-[0-9]+)|(?:[-_\.]?(post|rev|r)[-_\.]?[0-9]*)
                )?
                (?:[-_\.]?dev[-_\.]?[0-9]*)?          # dev release
            )
            |
            (?:
                # All other operators only allow a sub set of what the
                # (non)equality operators do. Specifically they do not allow
                # local versions to be specified nor do they allow the prefix
                # matching wild cards.
                (?<!==|!=|~=)         # We have special cases for these
                                      # operators so we want to make sure they
                                      # don't match here.

                \s*
                v?
                (?:[0-9]+!)?          # epoch
                [0-9]+(?:\.[0-9]+)*   # release
                (?:                   # pre release
                    [-_\.]?
                    (a|b|c|rc|alpha|beta|pre|preview)
                    [-_\.]?
                    [0-9]*
                )?
                (?:                                   # post release
                    (?:-[0-9]+)|(?:[-_\.]?(post|rev|r)[-_\.]?[0-9]*)
                )?
                (?:[-_\.]?dev[-_\.]?[0-9]*)?          # dev release
            )
        )
        z^\s*z\s*$Z
compatiblerF   rG   rH   rI   rJ   rK   Z	arbitrary)z~=z==z!=z<=z>=rL   rM   z===c             C   sN   dj ttjddÑ t|ÉÉÉd dÖ É}|d7 }| jdÉ||ÉoL| jdÉ||ÉS )	N⁄.c             S   s   | j dÉ o| j dÉ S )N⁄post⁄dev)⁄
startswith)⁄xr   r   r   ⁄<lambda>ê  s   z/Specifier._compare_compatible.<locals>.<lambda>r   z.*z>=z==Èˇˇˇˇ)⁄join⁄list⁄	itertools⁄	takewhile⁄_version_splitr;   )r   rN   r.   ⁄prefixr   r   r   ⁄_compare_compatibleÇ  s    
zSpecifier._compare_compatiblec             C   sp   |j dÉrPt|jÉ}t|d dÖ É}tt|ÉÉ}|d t|ÉÖ }t||É\}}nt|É}|jsht|jÉ}||kS )Nz.*È   È˛ˇˇˇ)⁄endswithr   ⁄publicrk   r2   ⁄len⁄_pad_version⁄local)r   rN   r.   r   r   r   rO   ù  s    


zSpecifier._compare_equalc             C   s   | j ||É S )N)rO   )r   rN   r.   r   r   r   rP   ¿  s    zSpecifier._compare_not_equalc             C   s   |t |ÉkS )N)r   )r   rN   r.   r   r   r   rQ   ƒ  s    z"Specifier._compare_less_than_equalc             C   s   |t |ÉkS )N)r   )r   rN   r.   r   r   r   rR   »  s    z%Specifier._compare_greater_than_equalc             C   s>   t |É}||k sdS |j r:|jr:t |jÉt |jÉkr:dS dS )NFT)r   r>   ⁄base_version)r   rN   r.   r   r   r   rS   Ã  s    zSpecifier._compare_less_thanc             C   s`   t |É}||ksdS |j r:|jr:t |jÉt |jÉkr:dS |jd k	r\t |jÉt |jÉkr\dS dS )NFT)r   ⁄is_postreleaseru   rt   )r   rN   r.   r   r   r   rT   Â  s    
zSpecifier._compare_greater_thanc             C   s   t |ÉjÉ t |ÉjÉ kS )N)r2   ⁄lower)r   rN   r.   r   r   r   ⁄_compare_arbitrary  s    zSpecifier._compare_arbitraryc             C   sR   | j d k	r| j S | j\}}|d
krN|dkr@|jdÉr@|d dÖ }t|ÉjrNdS d	S )N˙==˙>=˙<=˙~=˙===z.*rn   TF)ry   rz   r{   r|   r}   ro   )r-   r,   rp   r
   r>   )r   r%   r&   r   r   r   r     s    


zSpecifier.prereleasesc             C   s
   || _ d S )N)r-   )r   r   r   r   r   r     s    N)r   r   r   rU   rV   rW   rX   rY   r'   r9   r^   rm   rO   rP   rQ   rR   rS   rT   rx   rD   r   r"   r   r   r   r   r_     s*   ^#r_   z^([0-9]+)((?:a|b|c|rc)[0-9]+)$c             C   sD   g }x:| j dÉD ],}tj|É}|r2|j|jÉ É q|j|É qW |S )Nr`   )⁄split⁄_prefix_regexr(   ⁄extend⁄groupsr?   )r&   ⁄resultr   r/   r   r   r   rk   '  s    
rk   c          	   C   sÊ   g g  }}|j ttjddÑ | ÉÉÉ |j ttjddÑ |ÉÉÉ |j | t|d Éd Ö É |j |t|d Éd Ö É |jddgtdt|d Ét|d É É É |jddgtdt|d Ét|d É É É ttj|é Éttj|é ÉfS )Nc             S   s   | j É S )N)⁄isdigit)rd   r   r   r   re   6  s    z_pad_version.<locals>.<lambda>c             S   s   | j É S )N)rÉ   )rd   r   r   r   re   7  s    r   r   ⁄0)r?   rh   ri   rj   rr   ⁄insert⁄max⁄chain)⁄left⁄right⁄
left_split⁄right_splitr   r   r   rs   2  s    
&&rs   c               @   så   e Zd ZdddÑZddÑ ZddÑ Zd	d
Ñ ZddÑ ZddÑ ZddÑ Z	ddÑ Z
ddÑ ZeddÑ ÉZejddÑ ÉZddÑ ZdddÑZd ddÑZdS )!⁄SpecifierSetr$   Nc             C   sr   ddÑ |j dÉD É}tÉ }xB|D ]:}y|jt|ÉÉ W q  tk
rX   |jt|ÉÉ Y q X q W t|É| _|| _d S )Nc             S   s   g | ]}|j É r|j É ëqS r   )r+   )⁄.0⁄sr   r   r   ˙
<listcomp>R  s    z)SpecifierSet.__init__.<locals>.<listcomp>˙,)	r~   ⁄set⁄addr_   r   rE   ⁄	frozenset⁄_specsr-   )r   ⁄
specifiersr   ⁄parsed⁄	specifierr   r   r   r0   O  s    

zSpecifierSet.__init__c             C   s*   | j d k	rdj| jÉnd}djt| É|ÉS )Nz, prereleases={0!r}r$   z<SpecifierSet({0!r}{1})>)r-   r)   r   r2   )r   r3   r   r   r   r4   d  s    zSpecifierSet.__repr__c             C   s   dj tddÑ | jD ÉÉÉS )Nrê   c             s   s   | ]}t |ÉV  qd S )N)r2   )rç   ré   r   r   r   ˙	<genexpr>n  s    z'SpecifierSet.__str__.<locals>.<genexpr>)rg   ⁄sortedrî   )r   r   r   r   r   m  s    zSpecifierSet.__str__c             C   s
   t | jÉS )N)r5   rî   )r   r   r   r   r   p  s    zSpecifierSet.__hash__c             C   sò   t |tÉrt|É}nt |tÉs"tS tÉ }t| j|jB É|_| jd krX|jd k	rX|j|_n<| jd k	rv|jd krv| j|_n| j|jkrå| j|_ntdÉÇ|S )NzFCannot combine SpecifierSets with True and False prerelease overrides.)r6   r   rå   r7   rì   rî   r-   ⁄
ValueError)r   r   ró   r   r   r   ⁄__and__s  s    





zSpecifierSet.__and__c             C   sF   t |tÉrt|É}n&t |tÉr,tt|ÉÉ}nt |tÉs:tS | j|jkS )N)r6   r   rå   r#   r2   r7   rî   )r   r   r   r   r   r   ä  s    



zSpecifierSet.__eq__c             C   sF   t |tÉrt|É}n&t |tÉr,tt|ÉÉ}nt |tÉs:tS | j|jkS )N)r6   r   rå   r#   r2   r7   rî   )r   r   r   r   r   r   î  s    



zSpecifierSet.__ne__c             C   s
   t | jÉS )N)rr   rî   )r   r   r   r   ⁄__len__û  s    zSpecifierSet.__len__c             C   s
   t | jÉS )N)⁄iterrî   )r   r   r   r   ⁄__iter__°  s    zSpecifierSet.__iter__c             C   s.   | j d k	r| j S | jsd S tddÑ | jD ÉÉS )Nc             s   s   | ]}|j V  qd S )N)r   )rç   ré   r   r   r   rò   ≥  s    z+SpecifierSet.prereleases.<locals>.<genexpr>)r-   rî   ⁄any)r   r   r   r   r   §  s
    
zSpecifierSet.prereleasesc             C   s
   || _ d S )N)r-   )r   r   r   r   r   r   µ  s    c             C   s
   | j |ÉS )N)r   )r   r   r   r   r   r=   π  s    zSpecifierSet.__contains__c                sN   t à ttfÉstà Éâ àd kr$| jâà r4à jr4dS tá áfddÑ| jD ÉÉS )NFc             3   s   | ]}|j à àd çV  qdS ))r   N)r   )rç   ré   )r   r   r   r   rò   ’  s   z(SpecifierSet.contains.<locals>.<genexpr>)r6   r	   r   r
   r   r>   ⁄allrî   )r   r   r   r   )r   r   r   r   º  s    zSpecifierSet.containsc             C   sº   |d kr| j }| jr:x | jD ]}|j|t|Édç}qW |S g }g }xZ|D ]R}t|ttfÉsdt|É}n|}t|tÉrtqH|jrê| rê|sö|j	|É qH|j	|É qHW | r¥|r¥|d kr¥|S |S d S )N)r   )
r   rî   r   ⁄boolr6   r	   r   r
   r>   r?   )r   r   r   r.   ⁄filteredrA   r   rC   r   r   r   r   Ÿ  s*    


zSpecifierSet.filter)r$   N)N)N)r   r   r   r0   r4   r   r   rõ   r   r   rú   rû   rD   r   r"   r=   r   r   r   r   r   r   rå   M  s   
	


rå   )⁄
__future__r   r   r   r   r\   ri   rV   ⁄_compatr   r   r&   r   r	   r
   rö   r   ⁄ABCMeta⁄objectr   r#   rE   r^   r_   rW   r   rk   rs   rå   r   r   r   r   ⁄<module>   s&   9 	4	  
„               @   s˛   d dl mZmZmZ d dlZd dlZd dlZddlmZ ddddd	gZ	ej
d
ddddddgÉZddÑ ZG ddÑ deÉZG ddÑ deÉZG ddÑ deÉZejdejÉZddddddúZddÑ ZddÑ ZdZG d dÑ deÉZd!d"Ñ Zejd#ÉZd$d%Ñ Zd&d'Ñ ZdS )(È    )⁄absolute_import⁄division⁄print_functionNÈ   )⁄Infinity⁄parse⁄Version⁄LegacyVersion⁄InvalidVersion⁄VERSION_PATTERN⁄_Version⁄epoch⁄release⁄dev⁄pre⁄post⁄localc             C   s&   yt | ÉS  tk
r    t| ÉS X dS )z—
    Parse the given version string and return either a :class:`Version` object
    or a :class:`LegacyVersion` object depending on if the given version is
    a valid PEP 440 version or a legacy version.
    N)r   r
   r	   )⁄version© r   ˙I/usr/lib/python3/dist-packages/pkg_resources/_vendor/packaging/version.pyr      s    c               @   s   e Zd ZdZdS )r
   zF
    An invalid version was found, users should refer to PEP 440.
    N)⁄__name__⁄
__module__⁄__qualname__⁄__doc__r   r   r   r   r
   $   s   c               @   sL   e Zd ZddÑ ZddÑ ZddÑ ZddÑ Zd	d
Ñ ZddÑ ZddÑ Z	ddÑ Z
dS )⁄_BaseVersionc             C   s
   t | jÉS )N)⁄hash⁄_key)⁄selfr   r   r   ⁄__hash__,   s    z_BaseVersion.__hash__c             C   s   | j |ddÑ ÉS )Nc             S   s   | |k S )Nr   )⁄s⁄or   r   r   ⁄<lambda>0   s    z%_BaseVersion.__lt__.<locals>.<lambda>)⁄_compare)r   ⁄otherr   r   r   ⁄__lt__/   s    z_BaseVersion.__lt__c             C   s   | j |ddÑ ÉS )Nc             S   s   | |kS )Nr   )r   r    r   r   r   r!   3   s    z%_BaseVersion.__le__.<locals>.<lambda>)r"   )r   r#   r   r   r   ⁄__le__2   s    z_BaseVersion.__le__c             C   s   | j |ddÑ ÉS )Nc             S   s   | |kS )Nr   )r   r    r   r   r   r!   6   s    z%_BaseVersion.__eq__.<locals>.<lambda>)r"   )r   r#   r   r   r   ⁄__eq__5   s    z_BaseVersion.__eq__c             C   s   | j |ddÑ ÉS )Nc             S   s   | |kS )Nr   )r   r    r   r   r   r!   9   s    z%_BaseVersion.__ge__.<locals>.<lambda>)r"   )r   r#   r   r   r   ⁄__ge__8   s    z_BaseVersion.__ge__c             C   s   | j |ddÑ ÉS )Nc             S   s   | |kS )Nr   )r   r    r   r   r   r!   <   s    z%_BaseVersion.__gt__.<locals>.<lambda>)r"   )r   r#   r   r   r   ⁄__gt__;   s    z_BaseVersion.__gt__c             C   s   | j |ddÑ ÉS )Nc             S   s   | |kS )Nr   )r   r    r   r   r   r!   ?   s    z%_BaseVersion.__ne__.<locals>.<lambda>)r"   )r   r#   r   r   r   ⁄__ne__>   s    z_BaseVersion.__ne__c             C   s   t |tÉstS || j|jÉS )N)⁄
isinstancer   ⁄NotImplementedr   )r   r#   ⁄methodr   r   r   r"   A   s    
z_BaseVersion._compareN)r   r   r   r   r$   r%   r&   r'   r(   r)   r"   r   r   r   r   r   *   s   r   c               @   s`   e Zd ZddÑ ZddÑ ZddÑ ZeddÑ ÉZed	d
Ñ ÉZeddÑ ÉZ	eddÑ ÉZ
eddÑ ÉZdS )r	   c             C   s   t |É| _t| jÉ| _d S )N)⁄str⁄_version⁄_legacy_cmpkeyr   )r   r   r   r   r   ⁄__init__J   s    
zLegacyVersion.__init__c             C   s   | j S )N)r.   )r   r   r   r   ⁄__str__N   s    zLegacyVersion.__str__c             C   s   dj tt| ÉÉÉS )Nz<LegacyVersion({0})>)⁄format⁄reprr-   )r   r   r   r   ⁄__repr__Q   s    zLegacyVersion.__repr__c             C   s   | j S )N)r.   )r   r   r   r   ⁄publicT   s    zLegacyVersion.publicc             C   s   | j S )N)r.   )r   r   r   r   ⁄base_versionX   s    zLegacyVersion.base_versionc             C   s   d S )Nr   )r   r   r   r   r   \   s    zLegacyVersion.localc             C   s   dS )NFr   )r   r   r   r   ⁄is_prerelease`   s    zLegacyVersion.is_prereleasec             C   s   dS )NFr   )r   r   r   r   ⁄is_postreleased   s    zLegacyVersion.is_postreleaseN)r   r   r   r0   r1   r4   ⁄propertyr5   r6   r   r7   r8   r   r   r   r   r	   H   s   z(\d+ | [a-z]+ | \.| -)⁄czfinal-˙@)r   ⁄preview˙-⁄rcr   c             c   sb   xVt j| ÉD ]H}tj||É}| s|dkr,q|d dÖ dkrJ|jdÉV  qd| V  qW dV  d S )N⁄.r   ⁄
0123456789È   ⁄*z*final)⁄_legacy_version_component_re⁄split⁄_legacy_version_replacement_map⁄get⁄zfill)r   ⁄partr   r   r   ⁄_parse_version_partsr   s    rI   c             C   sÜ   d}g }xlt | jÉ ÉD ]\}|jdÉrh|dk rJx|rH|d dkrH|jÉ  q.W x|rf|d dkrf|jÉ  qLW |j|É qW t|É}||fS )	Nr   rB   z*finalz*final-Z00000000ÈˇˇˇˇrJ   rJ   )rI   ⁄lower⁄
startswith⁄pop⁄append⁄tuple)r   r   ⁄partsrH   r   r   r   r/   É   s    
r/   aó  
    v?
    (?:
        (?:(?P<epoch>[0-9]+)!)?                           # epoch
        (?P<release>[0-9]+(?:\.[0-9]+)*)                  # release segment
        (?P<pre>                                          # pre-release
            [-_\.]?
            (?P<pre_l>(a|b|c|rc|alpha|beta|pre|preview))
            [-_\.]?
            (?P<pre_n>[0-9]+)?
        )?
        (?P<post>                                         # post release
            (?:-(?P<post_n1>[0-9]+))
            |
            (?:
                [-_\.]?
                (?P<post_l>post|rev|r)
                [-_\.]?
                (?P<post_n2>[0-9]+)?
            )
        )?
        (?P<dev>                                          # dev release
            [-_\.]?
            (?P<dev_l>dev)
            [-_\.]?
            (?P<dev_n>[0-9]+)?
        )?
    )
    (?:\+(?P<local>[a-z0-9]+(?:[-_\.][a-z0-9]+)*))?       # local version
c               @   s|   e Zd Zejde d ejejB ÉZddÑ Z	ddÑ Z
ddÑ Zed	d
Ñ ÉZeddÑ ÉZeddÑ ÉZeddÑ ÉZeddÑ ÉZdS )r   z^\s*z\s*$c          	   C   s‡   | j j|É}|stdj|ÉÉÇt|jdÉr8t|jdÉÉndtddÑ |jdÉjdÉD ÉÉt	|jdÉ|jd	ÉÉt	|jd
É|jdÉpÜ|jdÉÉt	|jdÉ|jdÉÉt
|jdÉÉdç| _t| jj| jj| jj| jj| jj| jjÉ| _d S )NzInvalid version: '{0}'r   r   c             s   s   | ]}t |ÉV  qd S )N)⁄int)⁄.0⁄ir   r   r   ˙	<genexpr>œ   s    z#Version.__init__.<locals>.<genexpr>r   r?   Zpre_lZpre_nZpost_lZpost_n1Zpost_n2Zdev_lZdev_nr   )r   r   r   r   r   r   )⁄_regex⁄searchr
   r2   r   ⁄grouprQ   rO   rD   ⁄_parse_letter_version⁄_parse_local_versionr.   ⁄_cmpkeyr   r   r   r   r   r   r   )r   r   ⁄matchr   r   r   r0   ∆   s.    

zVersion.__init__c             C   s   dj tt| ÉÉÉS )Nz<Version({0})>)r2   r3   r-   )r   r   r   r   r4   È   s    zVersion.__repr__c             C   sÓ   g }| j jdkr$|jdj| j jÉÉ |jdjddÑ | j jD ÉÉÉ | j jd k	rl|jdjddÑ | j jD ÉÉÉ | j jd k	rê|jdj| j jd	 ÉÉ | j jd k	r¥|jd
j| j jd	 ÉÉ | j j	d k	r‰|jdjdjddÑ | j j	D ÉÉÉÉ dj|ÉS )Nr   z{0}!r?   c             s   s   | ]}t |ÉV  qd S )N)r-   )rR   ⁄xr   r   r   rT   Ù   s    z"Version.__str__.<locals>.<genexpr>⁄ c             s   s   | ]}t |ÉV  qd S )N)r-   )rR   r\   r   r   r   rT   ¯   s    z.post{0}r   z.dev{0}z+{0}c             s   s   | ]}t |ÉV  qd S )N)r-   )rR   r\   r   r   r   rT     s    )
r.   r   rN   r2   ⁄joinr   r   r   r   r   )r   rP   r   r   r   r1   Ï   s     zVersion.__str__c             C   s   t | ÉjddÉd S )N˙+r   r   )r-   rD   )r   r   r   r   r5   
  s    zVersion.publicc             C   sL   g }| j jdkr$|jdj| j jÉÉ |jdjddÑ | j jD ÉÉÉ dj|ÉS )Nr   z{0}!r?   c             s   s   | ]}t |ÉV  qd S )N)r-   )rR   r\   r   r   r   rT     s    z'Version.base_version.<locals>.<genexpr>r]   )r.   r   rN   r2   r^   r   )r   rP   r   r   r   r6     s
    zVersion.base_versionc             C   s$   t | É}d|kr |jddÉd S d S )Nr_   r   )r-   rD   )r   ⁄version_stringr   r   r   r     s    zVersion.localc             C   s   t | jjp| jjÉS )N)⁄boolr.   r   r   )r   r   r   r   r7   !  s    zVersion.is_prereleasec             C   s   t | jjÉS )N)ra   r.   r   )r   r   r   r   r8   %  s    zVersion.is_postreleaseN)r   r   r   ⁄re⁄compiler   ⁄VERBOSE⁄
IGNORECASErU   r0   r4   r1   r9   r5   r6   r   r7   r8   r   r   r   r   r   ø   s   
#c             C   sx   | rZ|d krd}| j É } | dkr&d} n(| dkr4d} n| dkrBd	} n| dkrNd} | t|ÉfS |  rt|rtd} | t|ÉfS d S )Nr   ⁄alpha⁄a⁄beta⁄br:   r   r<   r>   ⁄rev⁄rr   )r:   r   r<   )rj   rk   )rK   rQ   )⁄letter⁄numberr   r   r   rX   *  s     
rX   z[\._-]c             C   s$   | dk	r t ddÑ tj| ÉD ÉÉS dS )zR
    Takes a string like abc.1.twelve and turns it into ("abc", 1, "twelve").
    Nc             s   s&   | ]}|j É s|jÉ nt|ÉV  qd S )N)⁄isdigitrK   rQ   )rR   rH   r   r   r   rT   R  s   z'_parse_local_version.<locals>.<genexpr>)rO   ⁄_local_version_seperatorsrD   )r   r   r   r   rY   L  s    rY   c             C   sò   t tttjddÑ t|ÉÉÉÉÉ}|d kr@|d kr@|d k	r@t }n|d krLt}|d krZt }|d krft}|d krvt }nt ddÑ |D ÉÉ}| |||||fS )Nc             S   s   | dkS )Nr   r   )r\   r   r   r   r!   `  s    z_cmpkey.<locals>.<lambda>c             s   s*   | ]"}t |tÉr|d fnt |fV  qdS )r]   N)r*   rQ   r   )rR   rS   r   r   r   rT   Ö  s   z_cmpkey.<locals>.<genexpr>)rO   ⁄reversed⁄list⁄	itertools⁄	dropwhiler   )r   r   r   r   r   r   r   r   r   rZ   W  s&    		
rZ   )⁄
__future__r   r   r   ⁄collectionsrr   rb   ⁄_structuresr   ⁄__all__⁄
namedtupler   r   ⁄
ValueErrorr
   ⁄objectr   r	   rc   rd   rC   rE   rI   r/   r   r   rX   ro   rY   rZ   r   r   r   r   ⁄<module>   s.   !
9k
„               @   sö  d Z dZdZdZddlZddlmZ ddlZddl	Z	ddl
Z
ddlZddlZddlZddlZddlZddlZddlmZ yddlmZ W n  ek
r®   ddlmZ Y nX ydd	lmZ W n> ek
r¯   ydd	lmZ W n ek
rÚ   dZY nX Y nX d
dddddddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrgiZee	jÉddsÖ Zed dskZeêr"e	jZe Z!e"Z#e Z$e%e&e'e(e)ee*e+e,e-e.gZ/nbe	j0Ze1Z2dtduÑ Z$g Z/ddl3Z3xBdvj4É D ]6Z5ye/j6e7e3e5ÉÉ W n e8k
êr|   êwJY nX êqJW e9dwdxÑ e2dyÉD ÉÉZ:dzd{Ñ Z;G d|d}Ñ d}e<ÉZ=ej>ej? Z@d~ZAeAd ZBe@eA ZCe"dÄÉZDdÅjEdÇdxÑ ejFD ÉÉZGG dÉd!Ñ d!eHÉZIG dÑd#Ñ d#eIÉZJG dÖd%Ñ d%eIÉZKG dÜd'Ñ d'eKÉZLG dád*Ñ d*eHÉZMG dàdâÑ dâe<ÉZNG däd&Ñ d&e<ÉZOejPjQeOÉ dãd=Ñ ZRdådNÑ ZSdçdKÑ ZTdédèÑ ZUdêdëÑ ZVdídìÑ ZWdîdUÑ ZXêd/dñdóÑZYG dòd(Ñ d(e<ÉZZG dôd0Ñ d0eZÉZ[G dödÑ de[ÉZ\G dõdÑ de[ÉZ]G dúdÑ de[ÉZ^e^Z_e^eZ_`G dùdÑ de[ÉZaG dûdÑ de^ÉZbG düdÑ deaÉZcG d†dpÑ dpe[ÉZdG d°d3Ñ d3e[ÉZeG d¢d+Ñ d+e[ÉZfG d£d)Ñ d)e[ÉZgG d§dÑ de[ÉZhG d•d2Ñ d2e[ÉZiG d¶dßÑ dße[ÉZjG d®dÑ dejÉZkG d©dÑ dejÉZlG d™dÑ dejÉZmG d´d.Ñ d.ejÉZnG d¨d-Ñ d-ejÉZoG d≠d5Ñ d5ejÉZpG dÆd4Ñ d4ejÉZqG dØd$Ñ d$eZÉZrG d∞d
Ñ d
erÉZsG d±d Ñ d erÉZtG d≤dÑ derÉZuG d≥dÑ derÉZvG d¥d"Ñ d"eZÉZwG dµdÑ dewÉZxG d∂dÑ dewÉZyG d∑d∏Ñ d∏ewÉZzG dπdÑ dezÉZ{G d∫d6Ñ d6ezÉZ|G dªdºÑ dºe<ÉZ}e}É Z~G dΩdÑ dewÉZG dæd,Ñ d,ewÉZÄG dødÑ dewÉZÅG d¿d¡Ñ d¡eÅÉZÇG d¬d1Ñ d1ewÉZÉG d√dÑ deÉÉZÑG dƒdÑ deÉÉZÖG d≈dÑ deÉÉZÜG d∆d/Ñ d/eÉÉZáG d«dÑ de<ÉZàd»dfÑ Zâêd0dÀdDÑZäêd1dÃd@ÑZãdÕdŒÑ ZådœdSÑ Zçd–dRÑ Zéd—d“Ñ Zèêd2d‘dWÑZêd’dEÑ Zëêd3d÷dkÑZíd◊dlÑ ZìdÿdnÑ Zîe\É jïdGÉZñelÉ jïdMÉZóemÉ jïdLÉZòenÉ jïdeÉZôeoÉ jïddÉZöeeeDdŸdïd⁄çjõd€d‹Ñ ÉZúefd›Éjõdﬁd‹Ñ ÉZùefdﬂÉjõd‡d‹Ñ ÉZûeúeùB eûB eeeGd·dyd‚çB efd„ejüÉB Z†eÖe†eád‰É e† ÉZ°e^dÂÉedÊÉj¢dÁÉ eÖe{e°e†B ÉÉj¢dËÉ dÈ Z£dÍdcÑ Z§dÎdQÑ Z•dÏd`Ñ Z¶dÌd^Ñ ZßdÓdqÑ Z®e®dÔd‹Ñ ÉZ©e®dd‹Ñ ÉZ™dÒdÚÑ Z´dÛdOÑ Z¨dÙdPÑ Z≠dıdiÑ ZÆe<É eÆ_Øêd4dˆdoÑZ∞e=É Z±e<É e±_≤e<É e±_≥eád˜Éeád¯Éfd˘dmÑZ¥e¥ZµeÑefd˙Éd˚ Éjïd¸ÉZ∂eÑefd˝Éd˛ ÉjïdˇÉZ∑eÑefd˙Éd˚ efd˝Éd˛ B Éjïêd ÉZ∏eÑe_êdÉe∏jÉ  ÉjïêdÉZπd˜d¯de∏jÉ fêddTÑZ∫êd5êddjÑZªe§êdÉZºe§êdÉZΩe¨eee@eCêd ÉjïêdÉÉ\ZæZøe¿e¡êd	j4É êd
ÉÉZ¬efêdêdjEe¬j√É É êd ÉjïêdÉZƒêdd_Ñ Z≈eÑefêdÉêd ÉjïêdÉZ∆efêdÉjïêdÉZ«efêdÉj»É jïêdÉZ…efêdÉjïêdÉZ eÑefêdÉêd e B ÉjïêdÉZÀeÀZÃefêdÉjïêdÉZÕeÑe{eeeGd…êdçeeeêdÉe^d…É  emÉ   É ÉÉjŒÉ jïêdÉZœeäee∏jÉ eœB dÅêdçÉjïd>ÉZ–G êd drÑ drÉZ—e“êd!kêrñebêd"ÉZ”ebêd#ÉZ‘eee@eCêd$ ÉZ’eäe’êd%d”êd&çjõe©ÉZ÷eÖeäe÷ÉÉjïêd'ÉZ◊êd(e◊B Zÿeäe’êd%d”êd&çjõe©ÉZŸeÖeäeŸÉÉjïêd)ÉZ⁄e”êd*Éeÿêd'É e‘ e⁄êd)É Z€e€j‹êd+É e—j›j‹êd,É e—jﬁj‹êd,É e—jﬂj‹êd-É ddl‡Z‡e—j‡jõe®e‡j·ÉÉ e—j‡j‹êd.É dS (6  aS  
pyparsing module - Classes and methods to define and execute parsing grammars

The pyparsing module is an alternative approach to creating and executing simple grammars,
vs. the traditional lex/yacc approach, or the use of regular expressions.  With pyparsing, you
don't need to learn a new syntax for defining grammars or matching expressions - the parsing module
provides a library of classes that you use to construct the grammar directly in Python.

Here is a program to parse "Hello, World!" (or any greeting of the form 
C{"<salutation>, <addressee>!"}), built up using L{Word}, L{Literal}, and L{And} elements 
(L{'+'<ParserElement.__add__>} operator gives L{And} expressions, strings are auto-converted to
L{Literal} expressions)::

    from pyparsing import Word, alphas

    # define grammar of a greeting
    greet = Word(alphas) + "," + Word(alphas) + "!"

    hello = "Hello, World!"
    print (hello, "->", greet.parseString(hello))

The program outputs the following::

    Hello, World! -> ['Hello', ',', 'World', '!']

The Python representation of the grammar is quite readable, owing to the self-explanatory
class names, and the use of '+', '|' and '^' operators.

The L{ParseResults} object returned from L{ParserElement.parseString<ParserElement.parseString>} can be accessed as a nested list, a dictionary, or an
object with named attributes.

The pyparsing module handles some of the problems that are typically vexing when writing text parsers:
 - extra or missing whitespace (the above program will also handle "Hello,World!", "Hello  ,  World  !", etc.)
 - quoted strings
 - embedded comments
z2.1.10z07 Oct 2016 01:31 UTCz*Paul McGuire <ptmcg@users.sourceforge.net>È    N)⁄ref)⁄datetime)⁄RLock)⁄OrderedDict⁄And⁄CaselessKeyword⁄CaselessLiteral⁄
CharsNotIn⁄Combine⁄Dict⁄Each⁄Empty⁄
FollowedBy⁄Forward⁄
GoToColumn⁄Group⁄Keyword⁄LineEnd⁄	LineStart⁄Literal⁄
MatchFirst⁄NoMatch⁄NotAny⁄	OneOrMore⁄OnlyOnce⁄Optional⁄Or⁄ParseBaseException⁄ParseElementEnhance⁄ParseException⁄ParseExpression⁄ParseFatalException⁄ParseResults⁄ParseSyntaxException⁄ParserElement⁄QuotedString⁄RecursiveGrammarException⁄Regex⁄SkipTo⁄	StringEnd⁄StringStart⁄Suppress⁄Token⁄TokenConverter⁄White⁄Word⁄WordEnd⁄	WordStart⁄
ZeroOrMore⁄	alphanums⁄alphas⁄
alphas8bit⁄anyCloseTag⁄
anyOpenTag⁄cStyleComment⁄col⁄commaSeparatedList⁄commonHTMLEntity⁄countedArray⁄cppStyleComment⁄dblQuotedString⁄dblSlashComment⁄delimitedList⁄dictOf⁄downcaseTokens⁄empty⁄hexnums⁄htmlComment⁄javaStyleComment⁄line⁄lineEnd⁄	lineStart⁄lineno⁄makeHTMLTags⁄makeXMLTags⁄matchOnlyAtCol⁄matchPreviousExpr⁄matchPreviousLiteral⁄
nestedExpr⁄nullDebugAction⁄nums⁄oneOf⁄opAssoc⁄operatorPrecedence⁄
printables⁄punc8bit⁄pythonStyleComment⁄quotedString⁄removeQuotes⁄replaceHTMLEntity⁄replaceWith⁄
restOfLine⁄sglQuotedString⁄srange⁄	stringEnd⁄stringStart⁄traceParseAction⁄unicodeString⁄upcaseTokens⁄withAttribute⁄indentedBlock⁄originalTextFor⁄ungroup⁄infixNotation⁄locatedExpr⁄	withClass⁄
CloseMatch⁄tokenMap⁄pyparsing_commonÈ   c             C   s`   t | tÉr| S yt| ÉS  tk
rZ   t| ÉjtjÉ dÉ}tdÉ}|jddÑ É |j	|ÉS X dS )a  Drop-in replacement for str(obj) that tries to be Unicode friendly. It first tries
           str(obj). If that fails with a UnicodeEncodeError, then it tries unicode(obj). It
           then < returns the unicode object | encodes it with the default encoding | ... >.
        ⁄xmlcharrefreplacez&#\d+;c             S   s$   dt t| d ddÖ ÉÉdd Ö  S )Nz\ur   È   È   Èˇˇˇˇ)⁄hex⁄int)⁄t© rw   ˙A/usr/lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py⁄<lambda>î   s    z_ustr.<locals>.<lambda>N)
⁄
isinstance⁄unicode⁄str⁄UnicodeEncodeError⁄encode⁄sys⁄getdefaultencodingr'   ⁄setParseAction⁄transformString)⁄obj⁄ret⁄
xmlcharrefrw   rw   rx   ⁄_ustrÉ   s    
rÜ   z6sum len sorted reversed list tuple set any all min maxc             c   s   | ]
}|V  qd S )Nrw   )⁄.0⁄yrw   rw   rx   ˙	<genexpr>†   s    râ   rr   c             C   s>   d}ddÑ dj É D É}x"t||ÉD ]\}}| j||É} q"W | S )z/Escape &, <, >, ", ', etc. in a string of data.z&><"'c             s   s   | ]}d | d V  qdS )˙&˙;Nrw   )rá   ⁄srw   rw   rx   râ   ß   s    z_xml_escape.<locals>.<genexpr>zamp gt lt quot apos)⁄split⁄zip⁄replace)⁄data⁄from_symbols⁄
to_symbols⁄from_⁄to_rw   rw   rx   ⁄_xml_escape¢   s
    rï   c               @   s   e Zd ZdS )⁄
_ConstantsN)⁄__name__⁄
__module__⁄__qualname__rw   rw   rw   rx   rñ   ¨   s   rñ   ⁄
0123456789ZABCDEFabcdefÈ\   ⁄ c             c   s   | ]}|t jkr|V  qd S )N)⁄string⁄
whitespace)rá   ⁄crw   rw   rx   râ   ¥   s    c               @   sP   e Zd ZdZdddÑZeddÑ ÉZdd	Ñ Zd
dÑ ZddÑ Z	dddÑZ
ddÑ ZdS )r   z7base exception class for all parsing runtime exceptionsr   Nc             C   s>   || _ |d kr|| _d| _n|| _|| _|| _|||f| _d S )Nrú   )⁄loc⁄msg⁄pstr⁄parserElement⁄args)⁄selfr¢   r†   r°   ⁄elemrw   rw   rx   ⁄__init__∫   s    zParseBaseException.__init__c             C   s   | |j |j|j|jÉS )z≠
        internal factory method to simplify creating one type of ParseException 
        from another - avoids having __init__ signature conflicts among subclasses
        )r¢   r†   r°   r£   )⁄cls⁄perw   rw   rx   ⁄_from_exception≈   s    z"ParseBaseException._from_exceptionc             C   sN   |dkrt | j| jÉS |dkr,t| j| jÉS |dkrBt| j| jÉS t|ÉÇdS )z˜supported attributes by name are:
            - lineno - returns the line number of the exception text
            - col - returns the column number of the exception text
            - line - returns the line containing the exception text
        rJ   r9   ⁄columnrG   N)r9   r´   )rJ   r†   r¢   r9   rG   ⁄AttributeError)r•   ⁄anamerw   rw   rx   ⁄__getattr__Õ   s    zParseBaseException.__getattr__c             C   s   d| j | j| j| jf S )Nz"%s (at char %d), (line:%d, col:%d))r°   r†   rJ   r´   )r•   rw   rw   rx   ⁄__str__‹   s    zParseBaseException.__str__c             C   s   t | ÉS )N)rÜ   )r•   rw   rw   rx   ⁄__repr__ﬂ   s    zParseBaseException.__repr__˙>!<c             C   s<   | j }| jd }|r4dj|d|Ö |||dÖ fÉ}|jÉ S )zÖExtracts the exception line from the input string, and marks
           the location of the exception with a special symbol.
        rr   rú   N)rG   r´   ⁄join⁄strip)r•   ⁄markerString⁄line_str⁄line_columnrw   rw   rx   ⁄markInputline·   s    
z ParseBaseException.markInputlinec             C   s   dj É tt| ÉÉ S )Nzlineno col line)rç   ⁄dir⁄type)r•   rw   rw   rx   ⁄__dir__Î   s    zParseBaseException.__dir__)r   NN)r±   )ró   rò   rô   ⁄__doc__rß   ⁄classmethodr™   rÆ   rØ   r∞   r∑   r∫   rw   rw   rw   rx   r   ∂   s   


c               @   s   e Zd ZdZdS )r   aN  
    Exception thrown when parse expressions don't match class;
    supported attributes by name are:
     - lineno - returns the line number of the exception text
     - col - returns the column number of the exception text
     - line - returns the line containing the exception text
        
    Example::
        try:
            Word(nums).setName("integer").parseString("ABC")
        except ParseException as pe:
            print(pe)
            print("column: {}".format(pe.col))
            
    prints::
       Expected integer (at char 0), (line:1, col:1)
        column: 1
    N)ró   rò   rô   rª   rw   rw   rw   rx   r   Ó   s   c               @   s   e Zd ZdZdS )r!   znuser-throwable exception thrown when inconsistent parse content
       is found; stops all parsing immediatelyN)ró   rò   rô   rª   rw   rw   rw   rx   r!     s   c               @   s   e Zd ZdZdS )r#   zﬂjust like L{ParseFatalException}, but thrown internally when an
       L{ErrorStop<And._ErrorStop>} ('-' operator) indicates that parsing is to stop 
       immediately because an unbacktrackable syntax error has been foundN)ró   rò   rô   rª   rw   rw   rw   rx   r#     s   c               @   s    e Zd ZdZddÑ ZddÑ ZdS )r&   zZexception thrown by L{ParserElement.validate} if the grammar could be improperly recursivec             C   s
   || _ d S )N)⁄parseElementTrace)r•   ⁄parseElementListrw   rw   rx   rß     s    z"RecursiveGrammarException.__init__c             C   s
   d| j  S )NzRecursiveGrammarException: %s)rΩ   )r•   rw   rw   rx   rØ      s    z!RecursiveGrammarException.__str__N)ró   rò   rô   rª   rß   rØ   rw   rw   rw   rx   r&     s   c               @   s,   e Zd ZddÑ ZddÑ ZddÑ ZddÑ Zd	S )
⁄_ParseResultsWithOffsetc             C   s   ||f| _ d S )N)⁄tup)r•   ⁄p1⁄p2rw   rw   rx   rß   $  s    z _ParseResultsWithOffset.__init__c             C   s
   | j | S )N)r¿   )r•   ⁄irw   rw   rx   ⁄__getitem__&  s    z#_ParseResultsWithOffset.__getitem__c             C   s   t | jd ÉS )Nr   )⁄reprr¿   )r•   rw   rw   rx   r∞   (  s    z _ParseResultsWithOffset.__repr__c             C   s   | j d |f| _ d S )Nr   )r¿   )r•   r√   rw   rw   rx   ⁄	setOffset*  s    z!_ParseResultsWithOffset.setOffsetN)ró   rò   rô   rß   rƒ   r∞   r∆   rw   rw   rw   rx   rø   #  s   rø   c               @   sú  e Zd ZdZd[ddÑZddddefddÑZdd	Ñ Zefd
dÑZddÑ Z	ddÑ Z
ddÑ ZddÑ ZeZddÑ ZddÑ ZddÑ ZddÑ ZddÑ ZerúeZeZeZn$eZeZeZddÑ Zd d!Ñ Zd"d#Ñ Zd$d%Ñ Zd&d'Ñ Zd\d(d)ÑZd*d+Ñ Zd,d-Ñ Zd.d/Ñ Zd0d1Ñ Z d2d3Ñ Z!d4d5Ñ Z"d6d7Ñ Z#d8d9Ñ Z$d:d;Ñ Z%d<d=Ñ Z&d]d?d@ÑZ'dAdBÑ Z(dCdDÑ Z)dEdFÑ Z*d^dHdIÑZ+dJdKÑ Z,dLdMÑ Z-d_dOdPÑZ.dQdRÑ Z/dSdTÑ Z0dUdVÑ Z1dWdXÑ Z2dYdZÑ Z3dS )`r"   aI  
    Structured parse results, to provide multiple means of access to the parsed data:
       - as a list (C{len(results)})
       - by list index (C{results[0], results[1]}, etc.)
       - by attribute (C{results.<resultsName>} - see L{ParserElement.setResultsName})

    Example::
        integer = Word(nums)
        date_str = (integer.setResultsName("year") + '/' 
                        + integer.setResultsName("month") + '/' 
                        + integer.setResultsName("day"))
        # equivalent form:
        # date_str = integer("year") + '/' + integer("month") + '/' + integer("day")

        # parseString returns a ParseResults object
        result = date_str.parseString("1999/12/31")

        def test(s, fn=repr):
            print("%s -> %s" % (s, fn(eval(s))))
        test("list(result)")
        test("result[0]")
        test("result['month']")
        test("result.day")
        test("'month' in result")
        test("'minutes' in result")
        test("result.dump()", str)
    prints::
        list(result) -> ['1999', '/', '12', '/', '31']
        result[0] -> '1999'
        result['month'] -> '12'
        result.day -> '31'
        'month' in result -> True
        'minutes' in result -> False
        result.dump() -> ['1999', '/', '12', '/', '31']
        - day: 31
        - month: 12
        - year: 1999
    NTc             C   s"   t || Ér|S tj| É}d|_|S )NT)rz   ⁄object⁄__new__⁄_ParseResults__doinit)r®   ⁄toklist⁄name⁄asList⁄modal⁄retobjrw   rw   rx   r»   T  s
    

zParseResults.__new__c             C   s`  | j rvd| _ d | _d | _i | _|| _|| _|d kr6g }||tÉrP|d d Ö | _n||tÉrft|É| _n|g| _t	É | _
|d k	oÄ|êr\|síd| j|< ||tÉr§t|É}|| _||td ÉttfÉo |d dg fkês\||tÉrﬁ|g}|êr&||tÉêrt|jÉ dÉ| |< ntt|d ÉdÉ| |< || | _n6y|d | |< W n$ tttfk
êrZ   || |< Y nX d S )NFr   rú   )r…   ⁄_ParseResults__name⁄_ParseResults__parent⁄_ParseResults__accumNames⁄_ParseResults__asList⁄_ParseResults__modal⁄list⁄_ParseResults__toklist⁄_generatorType⁄dict⁄_ParseResults__tokdictru   rÜ   rπ   ⁄
basestringr"   rø   ⁄copy⁄KeyError⁄	TypeError⁄
IndexError)r•   r    rÀ   rÃ   rÕ   rz   rw   rw   rx   rß   ]  sB    



$
zParseResults.__init__c             C   sP   t |ttfÉr| j| S || jkr4| j| d d S tddÑ | j| D ÉÉS d S )Nrr   r   c             S   s   g | ]}|d  ëqS )r   rw   )rá   ⁄vrw   rw   rx   ˙
<listcomp>ã  s    z,ParseResults.__getitem__.<locals>.<listcomp>rs   )rz   ru   ⁄slicer’   r—   rÿ   r"   )r•   r√   rw   rw   rx   rƒ   Ñ  s
    

zParseResults.__getitem__c             C   så   ||t Ér0| jj|tÉ É|g | j|< |d }nD||ttfÉrN|| j|< |}n&| jj|tÉ Ét |dÉg | j|< |}||tÉràt| É|_	d S )Nr   )
rø   rÿ   ⁄getr‘   ru   r‡   r’   r"   ⁄wkrefr–   )r•   ⁄krﬁ   rz   ⁄subrw   rw   rx   ⁄__setitem__ç  s    


"
zParseResults.__setitem__c       
      C   s∆   t |ttfÉr∫t| jÉ}| j|= t |tÉrH|dk r:||7 }t||d É}tt|j|Éé É}|jÉ  x^| j	j
É D ]F\}}x<|D ]4}x.t|ÉD ]"\}\}}	t||	|	|k É||< qäW q|W qnW n| j	|= d S )Nr   rr   )rz   ru   r‡   ⁄lenr’   r‘   ⁄range⁄indices⁄reverserÿ   ⁄items⁄	enumeraterø   )
r•   r√   ⁄mylen⁄removedrÀ   ⁄occurrences⁄jr„   ⁄value⁄positionrw   rw   rx   ⁄__delitem__ö  s    


$zParseResults.__delitem__c             C   s
   || j kS )N)rÿ   )r•   r„   rw   rw   rx   ⁄__contains__Ø  s    zParseResults.__contains__c             C   s
   t | jÉS )N)rÊ   r’   )r•   rw   rw   rx   ⁄__len__≤  s    zParseResults.__len__c             C   s
   | j   S )N)r’   )r•   rw   rw   rx   ⁄__bool__≥  s    zParseResults.__bool__c             C   s
   t | jÉS )N)⁄iterr’   )r•   rw   rw   rx   ⁄__iter__µ  s    zParseResults.__iter__c             C   s   t | jd d dÖ ÉS )Nrr   rs   )rˆ   r’   )r•   rw   rw   rx   ⁄__reversed__∂  s    zParseResults.__reversed__c             C   s$   t | jdÉr| jjÉ S t| jÉS d S )N⁄iterkeys)⁄hasattrrÿ   r˘   rˆ   )r•   rw   rw   rx   ⁄	_iterkeys∑  s    
zParseResults._iterkeysc                s   á fddÑà j É D ÉS )Nc             3   s   | ]}à | V  qd S )Nrw   )rá   r„   )r•   rw   rx   râ   æ  s    z+ParseResults._itervalues.<locals>.<genexpr>)r˚   )r•   rw   )r•   rx   ⁄_itervaluesΩ  s    zParseResults._itervaluesc                s   á fddÑà j É D ÉS )Nc             3   s   | ]}|à | fV  qd S )Nrw   )rá   r„   )r•   rw   rx   râ   ¡  s    z*ParseResults._iteritems.<locals>.<genexpr>)r˚   )r•   rw   )r•   rx   ⁄
_iteritems¿  s    zParseResults._iteritemsc             C   s   t | jÉ ÉS )zVReturns all named result keys (as a list in Python 2.x, as an iterator in Python 3.x).)r‘   r˘   )r•   rw   rw   rx   ⁄keys◊  s    zParseResults.keysc             C   s   t | jÉ ÉS )zXReturns all named result values (as a list in Python 2.x, as an iterator in Python 3.x).)r‘   ⁄
itervalues)r•   rw   rw   rx   ⁄values€  s    zParseResults.valuesc             C   s   t | jÉ ÉS )zfReturns all named result key-values (as a list of tuples in Python 2.x, as an iterator in Python 3.x).)r‘   ⁄	iteritems)r•   rw   rw   rx   rÍ   ﬂ  s    zParseResults.itemsc             C   s
   t | jÉS )zêSince keys() returns an iterator, this method is helpful in bypassing
           code that looks for the existence of any defined results names.)⁄boolrÿ   )r•   rw   rw   rx   ⁄haskeys„  s    zParseResults.haskeysc             O   sí   |s
dg}x6|j É D ]*\}}|dkr2|d |f}qtd| ÉÇqW t|d tÉsht|Édksh|d | krÇ|d }| | }| |= |S |d }|S dS )aπ  
        Removes and returns item at specified index (default=C{last}).
        Supports both C{list} and C{dict} semantics for C{pop()}. If passed no
        argument or an integer argument, it will use C{list} semantics
        and pop tokens from the list of parsed tokens. If passed a 
        non-integer argument (most likely a string), it will use C{dict}
        semantics and pop the corresponding value from any defined 
        results names. A second default return value argument is 
        supported, just as in C{dict.pop()}.

        Example::
            def remove_first(tokens):
                tokens.pop(0)
            print(OneOrMore(Word(nums)).parseString("0 123 321")) # -> ['0', '123', '321']
            print(OneOrMore(Word(nums)).addParseAction(remove_first).parseString("0 123 321")) # -> ['123', '321']

            label = Word(alphas)
            patt = label("LABEL") + OneOrMore(Word(nums))
            print(patt.parseString("AAB 123 321").dump())

            # Use pop() in a parse action to remove named result (note that corresponding value is not
            # removed from list form of results)
            def remove_LABEL(tokens):
                tokens.pop("LABEL")
                return tokens
            patt.addParseAction(remove_LABEL)
            print(patt.parseString("AAB 123 321").dump())
        prints::
            ['AAB', '123', '321']
            - LABEL: AAB

            ['AAB', '123', '321']
        rr   ⁄defaultr   z-pop() got an unexpected keyword argument '%s'Nrs   )rÍ   r‹   rz   ru   rÊ   )r•   r§   ⁄kwargsr„   rﬁ   ⁄indexrÑ   ⁄defaultvaluerw   rw   rx   ⁄popË  s    "zParseResults.popc             C   s   || kr| | S |S dS )ai  
        Returns named result matching the given key, or if there is no
        such name, then returns the given C{defaultValue} or C{None} if no
        C{defaultValue} is specified.

        Similar to C{dict.get()}.
        
        Example::
            integer = Word(nums)
            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")           

            result = date_str.parseString("1999/12/31")
            print(result.get("year")) # -> '1999'
            print(result.get("hour", "not specified")) # -> 'not specified'
            print(result.get("hour")) # -> None
        Nrw   )r•   ⁄key⁄defaultValuerw   rw   rx   r·     s    zParseResults.getc             C   sZ   | j j||É xF| jjÉ D ]8\}}x.t|ÉD ]"\}\}}t||||k É||< q,W qW dS )a  
        Inserts new element at location index in the list of parsed tokens.
        
        Similar to C{list.insert()}.

        Example::
            print(OneOrMore(Word(nums)).parseString("0 123 321")) # -> ['0', '123', '321']

            # use a parse action to insert the parse location in the front of the parsed results
            def insert_locn(locn, tokens):
                tokens.insert(0, locn)
            print(OneOrMore(Word(nums)).addParseAction(insert_locn).parseString("0 123 321")) # -> [0, '0', '123', '321']
        N)r’   ⁄insertrÿ   rÍ   rÎ   rø   )r•   r  ⁄insStrrÀ   rÓ   r„   r   rÒ   rw   rw   rx   r  2  s    zParseResults.insertc             C   s   | j j|É dS )a˛  
        Add single element to end of ParseResults list of elements.

        Example::
            print(OneOrMore(Word(nums)).parseString("0 123 321")) # -> ['0', '123', '321']
            
            # use a parse action to compute the sum of the parsed integers, and add it to the end
            def append_sum(tokens):
                tokens.append(sum(map(int, tokens)))
            print(OneOrMore(Word(nums)).addParseAction(append_sum).parseString("0 123 321")) # -> ['0', '123', '321', 444]
        N)r’   ⁄append)r•   ⁄itemrw   rw   rx   r  F  s    zParseResults.appendc             C   s$   t |tÉr| |7 } n| jj|É dS )a  
        Add sequence of elements to end of ParseResults list of elements.

        Example::
            patt = OneOrMore(Word(alphas))
            
            # use a parse action to append the reverse of the matched strings, to make a palindrome
            def make_palindrome(tokens):
                tokens.extend(reversed([t[::-1] for t in tokens]))
                return ''.join(tokens)
            print(patt.addParseAction(make_palindrome).parseString("lskdj sdlkjf lksd")) # -> 'lskdjsdlkjflksddsklfjkldsjdksl'
        N)rz   r"   r’   ⁄extend)r•   ⁄itemseqrw   rw   rx   r  T  s    

zParseResults.extendc             C   s   | j ddÖ= | jjÉ  dS )z7
        Clear all elements and results names.
        N)r’   rÿ   ⁄clear)r•   rw   rw   rx   r  f  s    zParseResults.clearc             C   sf   y| | S  t k
r   dS X || jkr^|| jkrD| j| d d S tddÑ | j| D ÉÉS ndS d S )Nrú   rr   r   c             S   s   g | ]}|d  ëqS )r   rw   )rá   rﬁ   rw   rw   rx   rﬂ   w  s    z,ParseResults.__getattr__.<locals>.<listcomp>rs   )r€   rÿ   r—   r"   )r•   rÀ   rw   rw   rx   rÆ   m  s    

zParseResults.__getattr__c             C   s   | j É }||7 }|S )N)r⁄   )r•   ⁄otherrÑ   rw   rw   rx   ⁄__add__{  s    zParseResults.__add__c                sê   |j rnt| jÉâáfddÑâ |j jÉ }á fddÑ|D É}x4|D ],\}}|| |< t|d tÉr>t| É|d _q>W |  j|j7  _| jj	|jÉ | S )Nc                s   | dk rà S | à  S )Nr   rw   )⁄a)⁄offsetrw   rx   ry   É  s    z'ParseResults.__iadd__.<locals>.<lambda>c          	      s4   g | ],\}}|D ]}|t |d  à |d ÉÉfëqqS )r   rr   )rø   )rá   r„   ⁄vlistrﬁ   )⁄	addoffsetrw   rx   rﬂ   Ö  s   z)ParseResults.__iadd__.<locals>.<listcomp>r   )
rÿ   rÊ   r’   rÍ   rz   r"   r‚   r–   r—   ⁄update)r•   r  ⁄
otheritems⁄otherdictitemsr„   rﬁ   rw   )r  r  rx   ⁄__iadd__Ä  s    


zParseResults.__iadd__c             C   s&   t |tÉr|dkr| jÉ S ||  S d S )Nr   )rz   ru   r⁄   )r•   r  rw   rw   rx   ⁄__radd__ê  s    zParseResults.__radd__c             C   s   dt | jÉt | jÉf S )Nz(%s, %s))r≈   r’   rÿ   )r•   rw   rw   rx   r∞   ò  s    zParseResults.__repr__c             C   s   ddj ddÑ | jD ÉÉ d S )N˙[z, c             s   s(   | ] }t |tÉrt|Ént|ÉV  qd S )N)rz   r"   rÜ   r≈   )rá   r√   rw   rw   rx   râ   ú  s    z'ParseResults.__str__.<locals>.<genexpr>˙])r≤   r’   )r•   rw   rw   rx   rØ   õ  s    zParseResults.__str__rú   c             C   sP   g }xF| j D ]<}|r"|r"|j|É t|tÉr:||jÉ 7 }q|jt|ÉÉ qW |S )N)r’   r  rz   r"   ⁄_asStringListrÜ   )r•   ⁄sep⁄outr  rw   rw   rx   r  û  s    

zParseResults._asStringListc             C   s   ddÑ | j D ÉS )aÉ  
        Returns the parse results as a nested list of matching tokens, all converted to strings.

        Example::
            patt = OneOrMore(Word(alphas))
            result = patt.parseString("sldkj lsdkj sldkj")
            # even though the result prints in string-like form, it is actually a pyparsing ParseResults
            print(type(result), result) # -> <class 'pyparsing.ParseResults'> ['sldkj', 'lsdkj', 'sldkj']
            
            # Use asList() to create an actual list
            result_list = result.asList()
            print(type(result_list), result_list) # -> <class 'list'> ['sldkj', 'lsdkj', 'sldkj']
        c             S   s"   g | ]}t |tÉr|jÉ n|ëqS rw   )rz   r"   rÃ   )rá   ⁄resrw   rw   rx   rﬂ   ∑  s    z'ParseResults.asList.<locals>.<listcomp>)r’   )r•   rw   rw   rx   rÃ   ©  s    zParseResults.asListc                s6   t r| j}n| j}á fddÑâ tá fddÑ|É D ÉÉS )a√  
        Returns the named parse results as a nested dictionary.

        Example::
            integer = Word(nums)
            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")
            
            result = date_str.parseString('12/31/1999')
            print(type(result), repr(result)) # -> <class 'pyparsing.ParseResults'> (['12', '/', '31', '/', '1999'], {'day': [('1999', 4)], 'year': [('12', 0)], 'month': [('31', 2)]})
            
            result_dict = result.asDict()
            print(type(result_dict), repr(result_dict)) # -> <class 'dict'> {'day': '1999', 'year': '12', 'month': '31'}

            # even though a ParseResults supports dict-like access, sometime you just need to have a dict
            import json
            print(json.dumps(result)) # -> Exception: TypeError: ... is not JSON serializable
            print(json.dumps(result.asDict())) # -> {"month": "31", "day": "1999", "year": "12"}
        c                s6   t | tÉr.| jÉ r| jÉ S á fddÑ| D ÉS n| S d S )Nc                s   g | ]}à |ÉëqS rw   rw   )rá   rﬁ   )⁄toItemrw   rx   rﬂ   ÷  s    z7ParseResults.asDict.<locals>.toItem.<locals>.<listcomp>)rz   r"   r  ⁄asDict)rÉ   )r#  rw   rx   r#  —  s
    
z#ParseResults.asDict.<locals>.toItemc             3   s   | ]\}}|à |ÉfV  qd S )Nrw   )rá   r„   rﬁ   )r#  rw   rx   râ   ⁄  s    z&ParseResults.asDict.<locals>.<genexpr>)⁄PY_3rÍ   r  r◊   )r•   ⁄item_fnrw   )r#  rx   r$  π  s
    	zParseResults.asDictc             C   s8   t | jÉ}| jjÉ |_| j|_|jj| jÉ | j|_|S )zA
        Returns a new copy of a C{ParseResults} object.
        )r"   r’   rÿ   r⁄   r–   r—   r  rœ   )r•   rÑ   rw   rw   rx   r⁄   ‹  s    
zParseResults.copyFc             C   sP  d}g }t ddÑ | jjÉ D ÉÉ}|d }|s8d}d}d}d}	|dk	rJ|}	n| jrV| j}	|	sf|rbdS d}	|||d|	d	g7 }x∫t| jÉD ]¨\}
}t|tÉr‚|
|kr¬||j||
 |o¥|dk||Ég7 }n||jd|o‘|dk||Ég7 }qÑd}|
|krˆ||
 }|ês
|êrqÑnd}t	t
|ÉÉ}|||d|d	|d
|d	g	7 }qÑW |||d
|	d	g7 }dj|ÉS )zá
        (Deprecated) Returns the parse results as XML. Tags are created for tokens and lists that have defined results names.
        ⁄
c             s   s(   | ] \}}|D ]}|d  |fV  qqdS )rr   Nrw   )rá   r„   r  rﬁ   rw   rw   rx   râ   Ì  s    z%ParseResults.asXML.<locals>.<genexpr>z  rú   NZITEM˙<˙>z</)r◊   rÿ   rÍ   rœ   rÎ   r’   rz   r"   ⁄asXMLrï   rÜ   r≤   )r•   ⁄doctag⁄namedItemsOnly⁄indent⁄	formatted⁄nlr!  ⁄
namedItems⁄nextLevelIndent⁄selfTagr√   r"  ⁄resTag⁄xmlBodyTextrw   rw   rx   r*  Á  sT    


zParseResults.asXMLc             C   s:   x4| j jÉ D ]&\}}x|D ]\}}||kr|S qW qW d S )N)rÿ   rÍ   )r•   r‰   r„   r  rﬁ   r†   rw   rw   rx   ⁄__lookup$  s
    zParseResults.__lookupc             C   sÄ   | j r| j S | jr.| jÉ }|r(|j| ÉS dS nNt| Édkrxt| jÉdkrxtt| jjÉ ÉÉd d dkrxtt| jjÉ ÉÉS dS dS )a(  
        Returns the results name for this token expression. Useful when several 
        different expressions might match at a particular location.

        Example::
            integer = Word(nums)
            ssn_expr = Regex(r"\d\d\d-\d\d-\d\d\d\d")
            house_number_expr = Suppress('#') + Word(nums, alphanums)
            user_data = (Group(house_number_expr)("house_number") 
                        | Group(ssn_expr)("ssn")
                        | Group(integer)("age"))
            user_info = OneOrMore(user_data)
            
            result = user_info.parseString("22 111-22-3333 #221B")
            for item in result:
                print(item.getName(), ':', item[0])
        prints::
            age : 22
            ssn : 111-22-3333
            house_number : 221B
        Nrr   r   rs   )r   rs   )	rœ   r–   ⁄_ParseResults__lookuprÊ   rÿ   ⁄nextrˆ   r   r˛   )r•   ⁄parrw   rw   rx   ⁄getName+  s    
zParseResults.getNamer   c             C   sb  g }d}|j |t| jÉ É É |êrX| jÉ r¿tddÑ | jÉ D ÉÉ}xz|D ]r\}}|r^|j |É |j d|d| |f É t|tÉr¨|rú|j |j||d ÉÉ q∫|j t|ÉÉ qH|j t	|ÉÉ qHW nòt
ddÑ | D ÉÉêrX| }x~t|ÉD ]r\}	}
t|
tÉêr*|j d|d| |	|d|d  |
j||d Éf É q‚|j d|d| |	|d|d  t|
Éf É q‚W d	j|ÉS )
aH  
        Diagnostic method for listing out the contents of a C{ParseResults}.
        Accepts an optional C{indent} argument so that this string can be embedded
        in a nested display of other data.

        Example::
            integer = Word(nums)
            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")
            
            result = date_str.parseString('12/31/1999')
            print(result.dump())
        prints::
            ['12', '/', '31', '/', '1999']
            - day: 1999
            - month: 31
            - year: 12
        r'  c             s   s   | ]\}}t |É|fV  qd S )N)r|   )rá   r„   rﬁ   rw   rw   rx   râ   g  s    z$ParseResults.dump.<locals>.<genexpr>z
%s%s- %s: z  rr   c             s   s   | ]}t |tÉV  qd S )N)rz   r"   )rá   ⁄vvrw   rw   rx   râ   s  s    z
%s%s[%d]:
%s%s%srú   )r  rÜ   rÃ   r  ⁄sortedrÍ   rz   r"   ⁄dumpr≈   ⁄anyrÎ   r≤   )r•   r-  ⁄depth⁄fullr!  ⁄NLrÍ   r„   rﬁ   r√   r:  rw   rw   rx   r<  P  s,    

4.zParseResults.dumpc             O   s   t j | jÉ f|û|é dS )aı  
        Pretty-printer for parsed results as a list, using the C{pprint} module.
        Accepts additional positional or keyword args as defined for the 
        C{pprint.pprint} method. (U{http://docs.python.org/3/library/pprint.html#pprint.pprint})

        Example::
            ident = Word(alphas, alphanums)
            num = Word(nums)
            func = Forward()
            term = ident | num | Group('(' + func + ')')
            func <<= ident + Group(Optional(delimitedList(term)))
            result = func.parseString("fna a,b,(fnb c,d,200),100")
            result.pprint(width=40)
        prints::
            ['fna',
             ['a',
              'b',
              ['(', 'fnb', ['c', 'd', '200'], ')'],
              '100']]
        N)⁄pprintrÃ   )r•   r§   r  rw   rw   rx   rA  }  s    zParseResults.pprintc             C   s.   | j | jjÉ | jd k	r| jÉ p d | j| jffS )N)r’   rÿ   r⁄   r–   r—   rœ   )r•   rw   rw   rx   ⁄__getstate__ï  s
    zParseResults.__getstate__c             C   sN   |d | _ |d \| _}}| _i | _| jj|É |d k	rDt|É| _nd | _d S )Nr   rr   )r’   rÿ   rœ   r—   r  r‚   r–   )r•   ⁄stater8  ⁄inAccumNamesrw   rw   rx   ⁄__setstate__ú  s    
zParseResults.__setstate__c             C   s   | j | j| j| jfS )N)r’   rœ   r“   r”   )r•   rw   rw   rx   ⁄__getnewargs__©  s    zParseResults.__getnewargs__c             C   s   t t| ÉÉt| jÉ É S )N)r∏   rπ   r‘   r˛   )r•   rw   rw   rx   r∫   ¨  s    zParseResults.__dir__)NNTT)N)rú   )NFrú   T)rú   r   T)4ró   rò   rô   rª   r»   rz   rß   rƒ   rÂ   rÚ   rÛ   rÙ   rı   ⁄__nonzero__r˜   r¯   r˚   r¸   r˝   r%  r˛   r   rÍ   r˘   rˇ   r  r  r  r·   r  r  r  r  rÆ   r  r  r  r∞   rØ   r  rÃ   r$  r⁄   r*  r6  r9  r<  rA  rB  rE  rF  r∫   rw   rw   rw   rx   r"   -  sh   &
	'	4

#
=%
-c             C   sF   |}d|   k ot |Ék n  r4|| d  dkr4dS | |jdd| É S )a  Returns current column within a string, counting newlines as line separators.
   The first column is number 1.

   Note: the default parsing behavior is to expand tabs in the input string
   before starting the parsing process.  See L{I{ParserElement.parseString}<ParserElement.parseString>} for more information
   on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
   consistent view of the parsed string, the parse location, and line and column
   positions within the parsed string.
   r   rr   r'  )rÊ   ⁄rfind)r†   ⁄strgrå   rw   rw   rx   r9   ±  s    
c             C   s   |j dd| Éd S )a  Returns current line number within a string, counting newlines as line separators.
   The first line is number 1.

   Note: the default parsing behavior is to expand tabs in the input string
   before starting the parsing process.  See L{I{ParserElement.parseString}<ParserElement.parseString>} for more information
   on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
   consistent view of the parsed string, the parse location, and line and column
   positions within the parsed string.
   r'  r   rr   )⁄count)r†   rI  rw   rw   rx   rJ   æ  s    
c             C   sF   |j dd| É}|jd| É}|dkr2||d |Ö S ||d dÖ S dS )zfReturns the line of text containing loc within a string, counting newlines as line separators.
       r'  r   rr   N)rH  ⁄find)r†   rI  ⁄lastCR⁄nextCRrw   rw   rx   rG      s
    c             C   s8   t dt|É d t|É dt|| Ét|| Éf  É d S )NzMatch z at loc z(%d,%d))⁄printrÜ   rJ   r9   )⁄instringr†   ⁄exprrw   rw   rx   ⁄_defaultStartDebugAction‘  s    rQ  c             C   s$   t dt|É d t|jÉ É É d S )NzMatched z -> )rN  rÜ   r|   rÃ   )rO  ⁄startloc⁄endlocrP  ⁄toksrw   rw   rx   ⁄_defaultSuccessDebugAction◊  s    rU  c             C   s   t dt|É É d S )NzException raised:)rN  rÜ   )rO  r†   rP  ⁄excrw   rw   rx   ⁄_defaultExceptionDebugAction⁄  s    rW  c              G   s   dS )zG'Do-nothing' debug action, to suppress debugging output during parsing.Nrw   )r§   rw   rw   rx   rQ   ›  s    rq   c                s“   àt kráfddÑS dgâdgâtd dÖ dkrFddd	Ñ}dd
dÑâ ntj}tjâ d}|ddçd }|d |d | fâá áááááfddÑ}d}ytàdtàdÉjÉ}W n tk
r∆   tàÉ}Y nX ||_|S )Nc                s   à |ÉS )Nrw   )rå   ⁄lrv   )⁄funcrw   rx   ry   ˙  s    z_trim_arity.<locals>.<lambda>r   Frq   ro   È   c             S   s8   t dkrdnd	}tj| |  d dç| }|j|jfgS )
Nro   rZ  r   rq   rr   )⁄limit)ro   rZ  r   È˝ˇˇˇÈ˛ˇˇˇ)⁄system_version⁄	traceback⁄extract_stack⁄filenamerJ   )r[  r  ⁄frame_summaryrw   rw   rx   r`     s    z"_trim_arity.<locals>.extract_stackc             S   s$   t j| |dç}|d }|j|jfgS )N)r[  rr   rs   )r_  ⁄
extract_tbra  rJ   )⁄tbr[  ⁄framesrb  rw   rw   rx   rc    s    z_trim_arity.<locals>.extract_tbÈ   )r[  rr   c                 s†   xöy à| àd d Ö é }dàd< |S  t k
rñ   àd r>Ç n4z.tjÉ d }à |ddçd d dÖ àksjÇ W d ~X àd àkrêàd  d7  < wÇ Y qX qW d S )Nr   Trr   rq   )r[  rs   rs   )r‹   r   ⁄exc_info)r§   rÑ   rd  )rc  ⁄
foundArityrY  r[  ⁄maxargs⁄pa_call_line_synthrw   rx   ⁄wrapper  s"    z_trim_arity.<locals>.wrapperz<parse action>ró   ⁄	__class__)ro   rZ  )r   )r   rs   )	⁄singleArgBuiltinsr^  r_  r`  rc  ⁄getattrró   ⁄	Exceptionr|   )rY  ri  r`  ⁄	LINE_DIFF⁄	this_linerk  ⁄	func_namerw   )rc  rh  rY  r[  ri  rj  rx   ⁄_trim_arity¯  s*    
rs  c                   sí  e Zd ZdZdZdZeddÑ ÉZeddÑ ÉZdÜdd	ÑZ	d
dÑ Z
ddÑ ZdáddÑZdàddÑZddÑ ZddÑ ZddÑ ZddÑ ZddÑ ZddÑ Zdâdd ÑZd!d"Ñ Zdäd#d$ÑZd%d&Ñ Zd'd(Ñ ZG d)d*Ñ d*eÉZed+k	r‡G d,d-Ñ d-eÉZnG d.d-Ñ d-eÉZi ZeÉ Zd/d/gZ dãd0d1ÑZ!eZ"ed2d3Ñ ÉZ#dZ$edåd5d6ÑÉZ%dçd7d8ÑZ&e'dfd9d:ÑZ(d;d<Ñ Z)e'fd=d>ÑZ*e'dfd?d@ÑZ+dAdBÑ Z,dCdDÑ Z-dEdFÑ Z.dGdHÑ Z/dIdJÑ Z0dKdLÑ Z1dMdNÑ Z2dOdPÑ Z3dQdRÑ Z4dSdTÑ Z5dUdVÑ Z6dWdXÑ Z7dYdZÑ Z8déd[d\ÑZ9d]d^Ñ Z:d_d`Ñ Z;dadbÑ Z<dcddÑ Z=dedfÑ Z>dgdhÑ Z?dèdidjÑZ@dkdlÑ ZAdmdnÑ ZBdodpÑ ZCdqdrÑ ZDg fdsdtÑZEdêdudvÑZFá fdwdxÑZGdydzÑ ZHd{d|Ñ ZId}d~Ñ ZJddÄÑ ZKdëdÅdÇÑZLdídÑdÖÑZMá  ZNS )ìr$   z)Abstract base level parser element class.z 
	Fc             C   s
   | t _dS )a—  
        Overrides the default whitespace chars

        Example::
            # default whitespace chars are space, <TAB> and newline
            OneOrMore(Word(alphas)).parseString("abc def\nghi jkl")  # -> ['abc', 'def', 'ghi', 'jkl']
            
            # change to just treat newline as significant
            ParserElement.setDefaultWhitespaceChars(" \t")
            OneOrMore(Word(alphas)).parseString("abc def\nghi jkl")  # -> ['abc', 'def']
        N)r$   ⁄DEFAULT_WHITE_CHARS)⁄charsrw   rw   rx   ⁄setDefaultWhitespaceChars=  s    z'ParserElement.setDefaultWhitespaceCharsc             C   s
   | t _dS )aÖ  
        Set class to be used for inclusion of string literals into a parser.
        
        Example::
            # default literal class used is Literal
            integer = Word(nums)
            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")           

            date_str.parseString("1999/12/31")  # -> ['1999', '/', '12', '/', '31']


            # change to Suppress
            ParserElement.inlineLiteralsUsing(Suppress)
            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")           

            date_str.parseString("1999/12/31")  # -> ['1999', '12', '31']
        N)r$   ⁄_literalStringClass)r®   rw   rw   rx   ⁄inlineLiteralsUsingL  s    z!ParserElement.inlineLiteralsUsingc             C   sÇ   t É | _d | _d | _d | _|| _d| _tj| _	d| _
d| _d| _t É | _d| _d| _d| _d| _d| _d| _d | _d| _d| _d S )NTFrú   )NNN)r‘   ⁄parseAction⁄
failAction⁄strRepr⁄resultsName⁄
saveAsList⁄skipWhitespacer$   rt  ⁄
whiteChars⁄copyDefaultWhiteChars⁄mayReturnEmpty⁄keepTabs⁄ignoreExprs⁄debug⁄streamlined⁄mayIndexError⁄errmsg⁄modalResults⁄debugActions⁄re⁄callPreparse⁄callDuringTry)r•   ⁄savelistrw   rw   rx   rß   a  s(    zParserElement.__init__c             C   s<   t j | É}| jddÖ |_| jddÖ |_| jr8tj|_|S )a$  
        Make a copy of this C{ParserElement}.  Useful for defining different parse actions
        for the same parsing pattern, using copies of the original parse element.
        
        Example::
            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
            integerK = integer.copy().addParseAction(lambda toks: toks[0]*1024) + Suppress("K")
            integerM = integer.copy().addParseAction(lambda toks: toks[0]*1024*1024) + Suppress("M")
            
            print(OneOrMore(integerK | integerM | integer).parseString("5K 100 640K 256M"))
        prints::
            [5120, 100, 655360, 268435456]
        Equivalent form of C{expr.copy()} is just C{expr()}::
            integerM = integer().addParseAction(lambda toks: toks[0]*1024*1024) + Suppress("M")
        N)r⁄   ry  rÉ  rÄ  r$   rt  r  )r•   ⁄cpyrw   rw   rx   r⁄   x  s    
zParserElement.copyc             C   s*   || _ d| j  | _t| dÉr&| j| j_| S )af  
        Define name for this expression, makes debugging and exception messages clearer.
        
        Example::
            Word(nums).parseString("ABC")  # -> Exception: Expected W:(0123...) (at char 0), (line:1, col:1)
            Word(nums).setName("integer").parseString("ABC")  # -> Exception: Expected integer (at char 0), (line:1, col:1)
        z	Expected ⁄	exception)rÀ   rá  r˙   rè  r°   )r•   rÀ   rw   rw   rx   ⁄setNameè  s
    

zParserElement.setNamec             C   s4   | j É }|jdÉr"|ddÖ }d}||_| |_|S )aP  
        Define name for referencing matching tokens as a nested attribute
        of the returned parse results.
        NOTE: this returns a *copy* of the original C{ParserElement} object;
        this is so that the client can define a basic element, such as an
        integer, and reference it in multiple places with different names.

        You can also set results names using the abbreviated syntax,
        C{expr("name")} in place of C{expr.setResultsName("name")} - 
        see L{I{__call__}<__call__>}.

        Example::
            date_str = (integer.setResultsName("year") + '/' 
                        + integer.setResultsName("month") + '/' 
                        + integer.setResultsName("day"))

            # equivalent form:
            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")
        ⁄*Nrr   Trs   )r⁄   ⁄endswithr|  rà  )r•   rÀ   ⁄listAllMatches⁄newselfrw   rw   rx   ⁄setResultsNameù  s    
zParserElement.setResultsNameTc                s@   |r&| j â dá fddÑ	}à |_|| _ nt| j dÉr<| j j| _ | S )z¶Method to invoke the Python pdb debugger when this element is
           about to be parsed. Set C{breakFlag} to True to enable, False to
           disable.
        Tc                s   dd l }|jÉ  à | |||ÉS )Nr   )⁄pdb⁄	set_trace)rO  r†   ⁄	doActions⁄callPreParserñ  )⁄_parseMethodrw   rx   ⁄breaker¿  s    z'ParserElement.setBreak.<locals>.breaker⁄_originalParseMethod)TT)⁄_parserú  r˙   )r•   ⁄	breakFlagrõ  rw   )rö  rx   ⁄setBreakπ  s    
zParserElement.setBreakc             O   s&   t ttt |ÉÉÉ| _|jddÉ| _| S )a  
        Define action to perform when successfully matching parse element definition.
        Parse action fn is a callable method with 0-3 arguments, called as C{fn(s,loc,toks)},
        C{fn(loc,toks)}, C{fn(toks)}, or just C{fn()}, where:
         - s   = the original string being parsed (see note below)
         - loc = the location of the matching substring
         - toks = a list of the matched tokens, packaged as a C{L{ParseResults}} object
        If the functions in fns modify the tokens, they can return them as the return
        value from fn, and the modified list of tokens will replace the original.
        Otherwise, fn does not need to return any value.

        Optional keyword arguments:
         - callDuringTry = (default=C{False}) indicate if parse action should be run during lookaheads and alternate testing

        Note: the default parsing behavior is to expand tabs in the input string
        before starting the parsing process.  See L{I{parseString}<parseString>} for more information
        on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
        consistent view of the parsed string, the parse location, and line and column
        positions within the parsed string.
        
        Example::
            integer = Word(nums)
            date_str = integer + '/' + integer + '/' + integer

            date_str.parseString("1999/12/31")  # -> ['1999', '/', '12', '/', '31']

            # use parse action to convert to ints at parse time
            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
            date_str = integer + '/' + integer + '/' + integer

            # note that integer fields are now ints, not strings
            date_str.parseString("1999/12/31")  # -> [1999, '/', 12, '/', 31]
        rå  F)r‘   ⁄maprs  ry  r·   rå  )r•   ⁄fnsr  rw   rw   rx   rÅ   À  s    "zParserElement.setParseActionc             O   s4   |  j tttt|ÉÉÉ7  _ | jp,|jddÉ| _| S )z¶
        Add parse action to expression's list of parse actions. See L{I{setParseAction}<setParseAction>}.
        
        See examples in L{I{copy}<copy>}.
        rå  F)ry  r‘   r†  rs  rå  r·   )r•   r°  r  rw   rw   rx   ⁄addParseActionÒ  s    zParserElement.addParseActionc                sb   |j ddÉâ|j ddÉrtntâ x(|D ] âá ááfddÑ}| jj|É q&W | jpZ|j ddÉ| _| S )a”  Add a boolean predicate function to expression's list of parse actions. See 
        L{I{setParseAction}<setParseAction>} for function call signatures. Unlike C{setParseAction}, 
        functions passed to C{addCondition} need to return boolean success/fail of the condition.

        Optional keyword arguments:
         - message = define a custom message to be used in the raised exception
         - fatal   = if True, will raise ParseFatalException to stop parsing immediately; otherwise will raise ParseException
         
        Example::
            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
            year_int = integer.copy()
            year_int.addCondition(lambda toks: toks[0] >= 2000, message="Only support years 2000 and later")
            date_str = year_int + '/' + integer + '/' + integer

            result = date_str.parseString("1999/12/31")  # -> Exception: Only support years 2000 and later (at char 0), (line:1, col:1)
        ⁄messagezfailed user-defined condition⁄fatalFc                s$   t tàÉ| ||ÉÉs à | |àÉÇd S )N)r  rs  )rå   rX  rv   )⁄exc_type⁄fnr°   rw   rx   ⁄pa  s    z&ParserElement.addCondition.<locals>.parå  )r·   r!   r   ry  r  rå  )r•   r°  r  rß  rw   )r•  r¶  r°   rx   ⁄addCondition˚  s    
zParserElement.addConditionc             C   s
   || _ | S )a  Define action to perform if parsing fails at this expression.
           Fail acton fn is a callable function that takes the arguments
           C{fn(s,loc,expr,err)} where:
            - s = string being parsed
            - loc = location where expression match was attempted and failed
            - expr = the parse expression that failed
            - err = the exception thrown
           The function returns no value.  It may throw C{L{ParseFatalException}}
           if it is desired to stop parsing immediately.)rz  )r•   r¶  rw   rw   rx   ⁄setFailAction  s    
zParserElement.setFailActionc             C   sZ   d}xP|rTd}xB| j D ]8}yx|j||É\}}d}qW W q tk
rL   Y qX qW qW |S )NTF)rÉ  rù  r   )r•   rO  r†   ⁄
exprsFound⁄e⁄dummyrw   rw   rx   ⁄_skipIgnorables#  s    zParserElement._skipIgnorablesc             C   sL   | j r| j||É}| jrH| j}t|É}x ||k rF|| |krF|d7 }q(W |S )Nrr   )rÉ  r≠  r~  r  rÊ   )r•   rO  r†   ⁄wt⁄instrlenrw   rw   rx   ⁄preParse0  s    zParserElement.preParsec             C   s   |g fS )Nrw   )r•   rO  r†   rò  rw   rw   rx   ⁄	parseImpl<  s    zParserElement.parseImplc             C   s   |S )Nrw   )r•   rO  r†   ⁄	tokenlistrw   rw   rx   ⁄	postParse?  s    zParserElement.postParsec          "   C   s‘  | j }|s| jrÏ| jd r,| jd ||| É |rD| jrD| j||É}n|}|}yDy| j|||É\}}W n( tk
rå   t|t|É| j	| ÉÇY nX W nX t
k
rË }	 z<| jd r¿| jd ||| |	É | jr÷| j||| |	É Ç W Y d d }	~	X nX né|oÙ| jêr| j||É}n|}|}| jês$|t|Ékêrhy| j|||É\}}W n* tk
êrd   t|t|É| j	| ÉÇY nX n| j|||É\}}| j|||É}t|| j| j| jdç}
| jêr§|ês¥| jêr§|êrVyRxL| jD ]B}||||
É}|d k	êrƒt|| j| jêo˙t|ttfÉ| jdç}
êqƒW W nF t
k
êrR }	 z(| jd êr@| jd ||| |	É Ç W Y d d }	~	X nX nNxL| jD ]B}||||
É}|d k	êr^t|| j| jêoît|ttfÉ| jdç}
êq^W |êrÃ| jd êrÃ| jd |||| |
É ||
fS )Nr   rq   )rÃ   rÕ   rr   )rÑ  rz  râ  rã  r∞  r±  r›   r   rÊ   rá  r   rÜ  r≥  r"   r|  r}  rà  ry  rå  rz   r‘   )r•   rO  r†   rò  rô  ⁄	debugging⁄preloc⁄tokensStart⁄tokens⁄err⁄	retTokensr¶  rw   rw   rx   ⁄_parseNoCacheC  sp    





zParserElement._parseNoCachec             C   s>   y| j ||ddçd S  tk
r8   t||| j| ÉÇY nX d S )NF)rò  r   )rù  r!   r   rá  )r•   rO  r†   rw   rw   rx   ⁄tryParseã  s    zParserElement.tryParsec             C   s2   y| j ||É W n ttfk
r(   dS X dS d S )NFT)rª  r   r›   )r•   rO  r†   rw   rw   rx   ⁄canParseNextë  s
    zParserElement.canParseNextc               @   s   e Zd ZddÑ ZdS )zParserElement._UnboundedCachec                sd   i â t É  | _âá áfddÑ}á fddÑ}á fddÑ}tj|| É| _tj|| É| _tj|| É| _d S )Nc                s   à j |àÉS )N)r·   )r•   r	  )⁄cache⁄not_in_cacherw   rx   r·   û  s    z3ParserElement._UnboundedCache.__init__.<locals>.getc                s   |à |< d S )Nrw   )r•   r	  r   )rΩ  rw   rx   ⁄set°  s    z3ParserElement._UnboundedCache.__init__.<locals>.setc                s   à j É  d S )N)r  )r•   )rΩ  rw   rx   r  §  s    z5ParserElement._UnboundedCache.__init__.<locals>.clear)r«   ræ  ⁄types⁄
MethodTyper·   rø  r  )r•   r·   rø  r  rw   )rΩ  ræ  rx   rß   ö  s    z&ParserElement._UnboundedCache.__init__N)ró   rò   rô   rß   rw   rw   rw   rx   ⁄_UnboundedCacheô  s   r¬  Nc               @   s   e Zd ZddÑ ZdS )zParserElement._FifoCachec                sh   t É  | _âtÉ â á áfddÑ}á áfddÑ}á fddÑ}tj|| É| _tj|| É| _tj|| É| _d S )Nc                s   à j |àÉS )N)r·   )r•   r	  )rΩ  ræ  rw   rx   r·   ≤  s    z.ParserElement._FifoCache.__init__.<locals>.getc                s"   |à |< t à Éàkrà jdÉ d S )NF)rÊ   ⁄popitem)r•   r	  r   )rΩ  ⁄sizerw   rx   rø  µ  s    z.ParserElement._FifoCache.__init__.<locals>.setc                s   à j É  d S )N)r  )r•   )rΩ  rw   rx   r  ∫  s    z0ParserElement._FifoCache.__init__.<locals>.clear)r«   ræ  ⁄_OrderedDictr¿  r¡  r·   rø  r  )r•   rƒ  r·   rø  r  rw   )rΩ  ræ  rƒ  rx   rß   ≠  s    z!ParserElement._FifoCache.__init__N)ró   rò   rô   rß   rw   rw   rw   rx   ⁄
_FifoCache¨  s   r∆  c               @   s   e Zd ZddÑ ZdS )zParserElement._FifoCachec                sv   t É  | _âi â tjg àÉâá áfddÑ}á ááfddÑ}á áfddÑ}tj|| É| _tj|| É| _tj|| É| _d S )Nc                s   à j |àÉS )N)r·   )r•   r	  )rΩ  ræ  rw   rx   r·   …  s    z.ParserElement._FifoCache.__init__.<locals>.getc                s2   |à |< t à Éàkr$à jàjÉ d É àj|É d S )N)rÊ   r  ⁄popleftr  )r•   r	  r   )rΩ  ⁄key_fiforƒ  rw   rx   rø  Ã  s    z.ParserElement._FifoCache.__init__.<locals>.setc                s   à j É  àj É  d S )N)r  )r•   )rΩ  r»  rw   rx   r  “  s    z0ParserElement._FifoCache.__init__.<locals>.clear)	r«   ræ  ⁄collections⁄dequer¿  r¡  r·   rø  r  )r•   rƒ  r·   rø  r  rw   )rΩ  r»  ræ  rƒ  rx   rß   √  s    z!ParserElement._FifoCache.__init__N)ró   rò   rô   rß   rw   rw   rw   rx   r∆  ¬  s   r   c             C   s¸   d\}}| ||||f}t jè÷ t j}|j|É}	|	|jkr∫t j|  d7  < y| j||||É}	W n8 tk
rñ }
 z|j||
j	|
j
é É Ç W Y d d }
~
X qÓX |j||	d |	d jÉ fÉ |	S n4t j|  d7  < t|	tÉr⁄|	Ç|	d |	d jÉ fS W d Q R X d S )Nr   rr   )r   rr   )r$   ⁄packrat_cache_lock⁄packrat_cacher·   ræ  ⁄packrat_cache_statsr∫  r   rø  rl  r§   r⁄   rz   ro  )r•   rO  r†   rò  rô  ⁄HIT⁄MISS⁄lookuprΩ  r   r©   rw   rw   rx   ⁄_parseCache·  s$    


zParserElement._parseCachec               C   s(   t jjÉ  dgtt jÉ t jd d Ö< d S )Nr   )r$   rÃ  r  rÊ   rÕ  rw   rw   rw   rx   ⁄
resetCache˙  s    
zParserElement.resetCacheÈÄ   c             C   s8   t js4dt _| dkr t jÉ t _nt j| Ét _t jt _dS )añ  Enables "packrat" parsing, which adds memoizing to the parsing logic.
           Repeated parse attempts at the same string location (which happens
           often in many complex grammars) can immediately return a cached value,
           instead of re-executing parsing/validating code.  Memoizing is done of
           both valid results and parsing exceptions.
           
           Parameters:
            - cache_size_limit - (default=C{128}) - if an integer value is provided
              will limit the size of the packrat cache; if None is passed, then
              the cache size will be unbounded; if 0 is passed, the cache will
              be effectively disabled.
            
           This speedup may break existing programs that use parse actions that
           have side-effects.  For this reason, packrat parsing is disabled when
           you first import pyparsing.  To activate the packrat feature, your
           program must call the class method C{ParserElement.enablePackrat()}.  If
           your program uses C{psyco} to "compile as you go", you must call
           C{enablePackrat} before calling C{psyco.full()}.  If you do not do this,
           Python will crash.  For best results, call C{enablePackrat()} immediately
           after importing pyparsing.
           
           Example::
               import pyparsing
               pyparsing.ParserElement.enablePackrat()
        TN)r$   ⁄_packratEnabledr¬  rÃ  r∆  r—  rù  )⁄cache_size_limitrw   rw   rx   ⁄enablePackrat   s    zParserElement.enablePackratc             C   s≤   t jÉ  | js| jÉ  x| jD ]}|jÉ  qW | js<|jÉ }y<| j|dÉ\}}|rv| j||É}t	É t
É  }|j||É W n0 tk
r® } zt jrîÇ n|ÇW Y dd}~X nX |S dS )aB  
        Execute the parse expression with the given string.
        This is the main interface to the client code, once the complete
        expression has been built.

        If you want the grammar to require that the entire input string be
        successfully parsed, then set C{parseAll} to True (equivalent to ending
        the grammar with C{L{StringEnd()}}).

        Note: C{parseString} implicitly calls C{expandtabs()} on the input string,
        in order to report proper column numbers in parse actions.
        If the input string contains tabs and
        the grammar uses parse actions that use the C{loc} argument to index into the
        string being parsed, you can ensure you have a consistent view of the input
        string by:
         - calling C{parseWithTabs} on your grammar before calling C{parseString}
           (see L{I{parseWithTabs}<parseWithTabs>})
         - define your parse action using the full C{(s,loc,toks)} signature, and
           reference the input string using the parse action's C{s} argument
         - explictly expand the tabs in your input string before calling
           C{parseString}
        
        Example::
            Word('a').parseString('aaaaabaaa')  # -> ['aaaaa']
            Word('a').parseString('aaaaabaaa', parseAll=True)  # -> Exception: Expected end of text
        r   N)r$   r“  rÖ  ⁄
streamlinerÉ  rÇ  ⁄
expandtabsrù  r∞  r   r)   r   ⁄verbose_stacktrace)r•   rO  ⁄parseAllr´  r†   r∑  ⁄serV  rw   rw   rx   ⁄parseString#  s$    zParserElement.parseStringc             c   s@  | j s| jÉ  x| jD ]}|jÉ  qW | js8t|ÉjÉ }t|É}d}| j}| j}t	j
É  d}	y™x§||kon|	|k êry |||É}
|||
ddç\}}W n tk
rÆ   |
d }Y q`X ||kr¯|	d7 }	||
|fV  |rÚ|||É}||krË|}qˆ|d7 }n|}q`|
d }q`W W n4 tk
êr: } zt	jêr&Ç n|ÇW Y dd}~X nX dS )aÜ  
        Scan the input string for expression matches.  Each match will return the
        matching tokens, start location, and end location.  May be called with optional
        C{maxMatches} argument, to clip scanning after 'n' matches are found.  If
        C{overlap} is specified, then overlapping matches will be reported.

        Note that the start and end locations are reported relative to the string
        being parsed.  See L{I{parseString}<parseString>} for more information on parsing
        strings with embedded tabs.

        Example::
            source = "sldjf123lsdjjkf345sldkjf879lkjsfd987"
            print(source)
            for tokens,start,end in Word(alphas).scanString(source):
                print(' '*start + '^'*(end-start))
                print(' '*start + tokens[0])
        
        prints::
        
            sldjf123lsdjjkf345sldkjf879lkjsfd987
            ^^^^^
            sldjf
                    ^^^^^^^
                    lsdjjkf
                              ^^^^^^
                              sldkjf
                                       ^^^^^^
                                       lkjsfd
        r   F)rô  rr   N)rÖ  r◊  rÉ  rÇ  rÜ   rÿ  rÊ   r∞  rù  r$   r“  r   r   rŸ  )r•   rO  ⁄
maxMatches⁄overlapr´  rØ  r†   ⁄
preparseFn⁄parseFn⁄matchesrµ  ⁄nextLocr∑  ⁄nextlocrV  rw   rw   rx   ⁄
scanStringU  sB    


zParserElement.scanStringc             C   s‚   g }d}d| _ yûxh| j|ÉD ]Z\}}}|j|||Ö É |rrt|tÉrT||jÉ 7 }nt|tÉrh||7 }n
|j|É |}qW |j||dÖ É ddÑ |D É}djtt	t
|ÉÉÉS  tk
r‹ } ztjr»Ç n|ÇW Y dd}~X nX dS )af  
        Extension to C{L{scanString}}, to modify matching text with modified tokens that may
        be returned from a parse action.  To use C{transformString}, define a grammar and
        attach a parse action to it that modifies the returned token list.
        Invoking C{transformString()} on a target string will then scan for matches,
        and replace the matched text patterns according to the logic in the parse
        action.  C{transformString()} returns the resulting transformed string.
        
        Example::
            wd = Word(alphas)
            wd.setParseAction(lambda toks: toks[0].title())
            
            print(wd.transformString("now is the winter of our discontent made glorious summer by this sun of york."))
        Prints::
            Now Is The Winter Of Our Discontent Made Glorious Summer By This Sun Of York.
        r   TNc             S   s   g | ]}|r|ëqS rw   rw   )rá   ⁄orw   rw   rx   rﬂ   æ  s    z1ParserElement.transformString.<locals>.<listcomp>rú   )rÇ  r‰  r  rz   r"   rÃ   r‘   r≤   r†  rÜ   ⁄_flattenr   r$   rŸ  )r•   rO  r!  ⁄lastErv   rå   r´  rV  rw   rw   rx   rÇ   ú  s(    



zParserElement.transformStringc             C   sP   yt ddÑ | j||ÉD ÉÉS  tk
rJ } ztjr6Ç n|ÇW Y dd}~X nX dS )a~  
        Another extension to C{L{scanString}}, simplifying the access to the tokens found
        to match the given parse expression.  May be called with optional
        C{maxMatches} argument, to clip searching after 'n' matches are found.
        
        Example::
            # a capitalized word starts with an uppercase letter, followed by zero or more lowercase letters
            cap_word = Word(alphas.upper(), alphas.lower())
            
            print(cap_word.searchString("More than Iron, more than Lead, more than Gold I need Electricity"))
        prints::
            ['More', 'Iron', 'Lead', 'Gold', 'I']
        c             S   s   g | ]\}}}|ëqS rw   rw   )rá   rv   rå   r´  rw   rw   rx   rﬂ   ÷  s    z.ParserElement.searchString.<locals>.<listcomp>N)r"   r‰  r   r$   rŸ  )r•   rO  r›  rV  rw   rw   rx   ⁄searchString«  s    zParserElement.searchStringc       	      c   sX   d}d}x<| j ||dçD ]*\}}}|||Ö V  |r>|d V  |}qW ||dÖ V  dS )a[  
        Generator method to split a string using the given expression as a separator.
        May be called with optional C{maxsplit} argument, to limit the number of splits;
        and the optional C{includeSeparators} argument (default=C{False}), if the separating
        matching text should be included in the split results.
        
        Example::        
            punc = oneOf(list(".,;:/-!?"))
            print(list(punc.split("This, this?, this sentence, is badly punctuated!")))
        prints::
            ['This', ' this', '', ' this sentence', ' is badly punctuated', '']
        r   )r›  N)r‰  )	r•   rO  ⁄maxsplit⁄includeSeparators⁄splits⁄lastrv   rå   r´  rw   rw   rx   rç   ﬁ  s    
zParserElement.splitc             C   sF   t |tÉrtj|É}t |tÉs:tjdt|É tddç dS t| |gÉS )añ  
        Implementation of + operator - returns C{L{And}}. Adding strings to a ParserElement
        converts them to L{Literal}s by default.
        
        Example::
            greet = Word(alphas) + "," + Word(alphas) + "!"
            hello = "Hello, World!"
            print (hello, "->", greet.parseString(hello))
        Prints::
            Hello, World! -> ['Hello', ',', 'World', '!']
        z4Cannot combine element of type %s with ParserElementrq   )⁄
stacklevelN)	rz   rŸ   r$   rw  ⁄warnings⁄warnrπ   ⁄SyntaxWarningr   )r•   r  rw   rw   rx   r  Ù  s    



zParserElement.__add__c             C   sB   t |tÉrtj|É}t |tÉs:tjdt|É tddç dS ||  S )z]
        Implementation of + operator when left operand is not a C{L{ParserElement}}
        z4Cannot combine element of type %s with ParserElementrq   )rÌ  N)rz   rŸ   r$   rw  rÓ  rÔ  rπ   r  )r•   r  rw   rw   rx   r    s    



zParserElement.__radd__c             C   sL   t |tÉrtj|É}t |tÉs:tjdt|É tddç dS t| tj	É |gÉS )zQ
        Implementation of - operator, returns C{L{And}} with error stop
        z4Cannot combine element of type %s with ParserElementrq   )rÌ  N)
rz   rŸ   r$   rw  rÓ  rÔ  rπ   r  r   ⁄
_ErrorStop)r•   r  rw   rw   rx   ⁄__sub__  s    



zParserElement.__sub__c             C   sB   t |tÉrtj|É}t |tÉs:tjdt|É tddç dS ||  S )z]
        Implementation of - operator when left operand is not a C{L{ParserElement}}
        z4Cannot combine element of type %s with ParserElementrq   )rÌ  N)rz   rŸ   r$   rw  rÓ  rÔ  rπ   r  )r•   r  rw   rw   rx   ⁄__rsub__   s    



zParserElement.__rsub__c                s∏  t |tÉr|d }}n‰t |tÉrÏ|d ddÖ }|d dkrHd|d f}t |d tÉr†|d dkr†|d dkrvtàÉS |d dkrätàÉS à|d  tàÉ S nJt |d tÉrŒt |d tÉrŒ|\}}||8 }ntdt|d Ét|d ÉÉÇntdt|ÉÉÇ|dk êrtdÉÇ|dk êrtdÉÇ||  kêo2dkn  êrBtd	ÉÇ|êrñá áfd
dÑâ |êrå|dkêrtàà |É }ntàg| Éà |É }nà |É}n|dkêr¶à}ntàg| É}|S )aÂ  
        Implementation of * operator, allows use of C{expr * 3} in place of
        C{expr + expr + expr}.  Expressions may also me multiplied by a 2-integer
        tuple, similar to C{{min,max}} multipliers in regular expressions.  Tuples
        may also include C{None} as in:
         - C{expr*(n,None)} or C{expr*(n,)} is equivalent
              to C{expr*n + L{ZeroOrMore}(expr)}
              (read as "at least n instances of C{expr}")
         - C{expr*(None,n)} is equivalent to C{expr*(0,n)}
              (read as "0 to n instances of C{expr}")
         - C{expr*(None,None)} is equivalent to C{L{ZeroOrMore}(expr)}
         - C{expr*(1,None)} is equivalent to C{L{OneOrMore}(expr)}

        Note that C{expr*(None,n)} does not raise an exception if
        more than n exprs exist in the input stream; that is,
        C{expr*(None,n)} does not enforce a maximum number of expr
        occurrences.  If this behavior is desired, then write
        C{expr*(None,n) + ~expr}
        r   Nrq   rr   z7cannot multiply 'ParserElement' and ('%s','%s') objectsz0cannot multiply 'ParserElement' and '%s' objectsz/cannot multiply ParserElement by negative valuez@second tuple value must be greater or equal to first tuple valuez+cannot multiply ParserElement by 0 or (0,0)c                s(   | dkrt àà | d É ÉS t àÉS d S )Nrr   )r   )⁄n)⁄makeOptionalListr•   rw   rx   rı  ]  s    z/ParserElement.__mul__.<locals>.makeOptionalList)NN)	rz   ru   ⁄tupler2   r   r‹   rπ   ⁄
ValueErrorr   )r•   r  ⁄minElements⁄optElementsrÑ   rw   )rı  r•   rx   ⁄__mul__,  sD    







zParserElement.__mul__c             C   s
   | j |ÉS )N)r˙  )r•   r  rw   rw   rx   ⁄__rmul__p  s    zParserElement.__rmul__c             C   sF   t |tÉrtj|É}t |tÉs:tjdt|É tddç dS t| |gÉS )zI
        Implementation of | operator - returns C{L{MatchFirst}}
        z4Cannot combine element of type %s with ParserElementrq   )rÌ  N)	rz   rŸ   r$   rw  rÓ  rÔ  rπ   r  r   )r•   r  rw   rw   rx   ⁄__or__s  s    



zParserElement.__or__c             C   sB   t |tÉrtj|É}t |tÉs:tjdt|É tddç dS || B S )z]
        Implementation of | operator when left operand is not a C{L{ParserElement}}
        z4Cannot combine element of type %s with ParserElementrq   )rÌ  N)rz   rŸ   r$   rw  rÓ  rÔ  rπ   r  )r•   r  rw   rw   rx   ⁄__ror__  s    



zParserElement.__ror__c             C   sF   t |tÉrtj|É}t |tÉs:tjdt|É tddç dS t| |gÉS )zA
        Implementation of ^ operator - returns C{L{Or}}
        z4Cannot combine element of type %s with ParserElementrq   )rÌ  N)	rz   rŸ   r$   rw  rÓ  rÔ  rπ   r  r   )r•   r  rw   rw   rx   ⁄__xor__ã  s    



zParserElement.__xor__c             C   sB   t |tÉrtj|É}t |tÉs:tjdt|É tddç dS || A S )z]
        Implementation of ^ operator when left operand is not a C{L{ParserElement}}
        z4Cannot combine element of type %s with ParserElementrq   )rÌ  N)rz   rŸ   r$   rw  rÓ  rÔ  rπ   r  )r•   r  rw   rw   rx   ⁄__rxor__ó  s    



zParserElement.__rxor__c             C   sF   t |tÉrtj|É}t |tÉs:tjdt|É tddç dS t| |gÉS )zC
        Implementation of & operator - returns C{L{Each}}
        z4Cannot combine element of type %s with ParserElementrq   )rÌ  N)	rz   rŸ   r$   rw  rÓ  rÔ  rπ   r  r   )r•   r  rw   rw   rx   ⁄__and__£  s    



zParserElement.__and__c             C   sB   t |tÉrtj|É}t |tÉs:tjdt|É tddç dS || @ S )z]
        Implementation of & operator when left operand is not a C{L{ParserElement}}
        z4Cannot combine element of type %s with ParserElementrq   )rÌ  N)rz   rŸ   r$   rw  rÓ  rÔ  rπ   r  )r•   r  rw   rw   rx   ⁄__rand__Ø  s    



zParserElement.__rand__c             C   s   t | ÉS )zE
        Implementation of ~ operator - returns C{L{NotAny}}
        )r   )r•   rw   rw   rx   ⁄
__invert__ª  s    zParserElement.__invert__c             C   s   |dk	r| j |ÉS | jÉ S dS )a  
        Shortcut for C{L{setResultsName}}, with C{listAllMatches=False}.
        
        If C{name} is given with a trailing C{'*'} character, then C{listAllMatches} will be
        passed as C{True}.
           
        If C{name} is omitted, same as calling C{L{copy}}.

        Example::
            # these are equivalent
            userdata = Word(alphas).setResultsName("name") + Word(nums+"-").setResultsName("socsecno")
            userdata = Word(alphas)("name") + Word(nums+"-")("socsecno")             
        N)rï  r⁄   )r•   rÀ   rw   rw   rx   ⁄__call__¡  s    
zParserElement.__call__c             C   s   t | ÉS )zà
        Suppresses the output of this C{ParserElement}; useful to keep punctuation from
        cluttering up returned output.
        )r+   )r•   rw   rw   rx   ⁄suppress‘  s    zParserElement.suppressc             C   s
   d| _ | S )a  
        Disables the skipping of whitespace before matching the characters in the
        C{ParserElement}'s defined pattern.  This is normally only used internally by
        the pyparsing module, but may be needed in some whitespace-sensitive grammars.
        F)r~  )r•   rw   rw   rx   ⁄leaveWhitespace€  s    zParserElement.leaveWhitespacec             C   s   d| _ || _d| _| S )z8
        Overrides the default whitespace chars
        TF)r~  r  rÄ  )r•   ru  rw   rw   rx   ⁄setWhitespaceChars‰  s    z ParserElement.setWhitespaceCharsc             C   s
   d| _ | S )zÈ
        Overrides default behavior to expand C{<TAB>}s to spaces before parsing the input string.
        Must be called before C{parseString} when the input grammar contains elements that
        match C{<TAB>} characters.
        T)rÇ  )r•   rw   rw   rx   ⁄parseWithTabsÌ  s    zParserElement.parseWithTabsc             C   sL   t |tÉrt|É}t |tÉr4|| jkrH| jj|É n| jjt|jÉ ÉÉ | S )a◊  
        Define expression to be ignored (e.g., comments) while doing pattern
        matching; may be called repeatedly, to define multiple comment or other
        ignorable patterns.
        
        Example::
            patt = OneOrMore(Word(alphas))
            patt.parseString('ablaj /* comment */ lskjd') # -> ['ablaj']
            
            patt.ignore(cStyleComment)
            patt.parseString('ablaj /* comment */ lskjd') # -> ['ablaj', 'lskjd']
        )rz   rŸ   r+   rÉ  r  r⁄   )r•   r  rw   rw   rx   ⁄ignoreˆ  s    


zParserElement.ignorec             C   s"   |pt |pt|ptf| _d| _| S )zT
        Enable display of debugging messages while doing pattern matching.
        T)rQ  rU  rW  râ  rÑ  )r•   ⁄startAction⁄successAction⁄exceptionActionrw   rw   rx   ⁄setDebugActions  s
    zParserElement.setDebugActionsc             C   s   |r| j tttÉ nd| _| S )aé  
        Enable display of debugging messages while doing pattern matching.
        Set C{flag} to True to enable, False to disable.

        Example::
            wd = Word(alphas).setName("alphaword")
            integer = Word(nums).setName("numword")
            term = wd | integer
            
            # turn on debugging for wd
            wd.setDebug()

            OneOrMore(term).parseString("abc 123 xyz 890")
        
        prints::
            Match alphaword at loc 0(1,1)
            Matched alphaword -> ['abc']
            Match alphaword at loc 3(1,4)
            Exception raised:Expected alphaword (at char 4), (line:1, col:5)
            Match alphaword at loc 7(1,8)
            Matched alphaword -> ['xyz']
            Match alphaword at loc 11(1,12)
            Exception raised:Expected alphaword (at char 12), (line:1, col:13)
            Match alphaword at loc 15(1,16)
            Exception raised:Expected alphaword (at char 15), (line:1, col:16)

        The output shown is that produced by the default debug actions - custom debug actions can be
        specified using L{setDebugActions}. Prior to attempting
        to match the C{wd} expression, the debugging message C{"Match <exprname> at loc <n>(<line>,<col>)"}
        is shown. Then if the parse succeeds, a C{"Matched"} message is shown, or an C{"Exception raised"}
        message is shown. Also note the use of L{setName} to assign a human-readable name to the expression,
        which makes debugging and exception messages easier to understand - for instance, the default
        name created for the C{Word} expression without calling C{setName} is C{"W:(ABCD...)"}.
        F)r  rQ  rU  rW  rÑ  )r•   ⁄flagrw   rw   rx   ⁄setDebug  s    #zParserElement.setDebugc             C   s   | j S )N)rÀ   )r•   rw   rw   rx   rØ   @  s    zParserElement.__str__c             C   s   t | ÉS )N)rÜ   )r•   rw   rw   rx   r∞   C  s    zParserElement.__repr__c             C   s   d| _ d | _| S )NT)rÖ  r{  )r•   rw   rw   rx   r◊  F  s    zParserElement.streamlinec             C   s   d S )Nrw   )r•   ræ   rw   rw   rx   ⁄checkRecursionK  s    zParserElement.checkRecursionc             C   s   | j g É dS )zj
        Check defined expressions for valid structure, check for infinite recursive definitions.
        N)r  )r•   ⁄validateTracerw   rw   rx   ⁄validateN  s    zParserElement.validatec             C   sÇ   y|j É }W n2 tk
r>   t|dÉè}|j É }W dQ R X Y nX y| j||ÉS  tk
r| } ztjrhÇ n|ÇW Y dd}~X nX dS )z–
        Execute the parse expression on the given file or filename.
        If a filename is specified (instead of a file object),
        the entire file is opened, read, and closed before parsing.
        ⁄rN)⁄readr¨   ⁄openr‹  r   r$   rŸ  )r•   ⁄file_or_filenamer⁄  ⁄file_contents⁄frV  rw   rw   rx   ⁄	parseFileT  s    zParserElement.parseFilec                sH   t |tÉr"| |kp t| Ét|ÉkS t |tÉr6| j|ÉS tt| É|kS d S )N)rz   r$   ⁄varsrŸ   r·  ⁄super)r•   r  )rl  rw   rx   ⁄__eq__h  s
    


zParserElement.__eq__c             C   s
   | |k S )Nrw   )r•   r  rw   rw   rx   ⁄__ne__p  s    zParserElement.__ne__c             C   s   t t| ÉÉS )N)⁄hash⁄id)r•   rw   rw   rx   ⁄__hash__s  s    zParserElement.__hash__c             C   s   | |kS )Nrw   )r•   r  rw   rw   rx   ⁄__req__v  s    zParserElement.__req__c             C   s
   | |k S )Nrw   )r•   r  rw   rw   rx   ⁄__rne__y  s    zParserElement.__rne__c             C   s0   y| j t|É|dç dS  tk
r*   dS X dS )a”  
        Method for quick testing of a parser against a test string. Good for simple 
        inline microtests of sub expressions while building up larger parser.
           
        Parameters:
         - testString - to test against this expression for a match
         - parseAll - (default=C{True}) - flag to pass to C{L{parseString}} when running tests
            
        Example::
            expr = Word(nums)
            assert expr.matches("100")
        )r⁄  TFN)r‹  rÜ   r   )r•   ⁄
testStringr⁄  rw   rw   rx   r·  |  s
    zParserElement.matches˙#c             C   s˙  t |tÉr"tttj|jÉ jÉ ÉÉ}t |tÉr4t|É}g }g }d}	êxÆ|D ê]§}
|dk	rb|j	|
dÉsl|rx|
 rx|j
|
É qH|
s~qHdj|É|
g}g }y:|
jddÉ}
| j|
|dç}|j
|j|dçÉ |	o∆| }	W n tk
êrx } zêt |tÉrÏdnd	}d|
kêr0|j
t|j|
ÉÉ |j
d
t|j|
Éd  d | É n|j
d
|j d | É |j
dt|É É |	êob|}	|}W Y dd}~X nD tk
êr∫ } z&|j
dt|É É |	êo§|}	|}W Y dd}~X nX |êr‡|êr“|j
d	É tdj|ÉÉ |j
|
|fÉ qHW |	|fS )a3  
        Execute the parse expression on a series of test strings, showing each
        test, the parsed results or where the parse failed. Quick and easy way to
        run a parse expression against a list of sample strings.
           
        Parameters:
         - tests - a list of separate test strings, or a multiline string of test strings
         - parseAll - (default=C{True}) - flag to pass to C{L{parseString}} when running tests           
         - comment - (default=C{'#'}) - expression for indicating embedded comments in the test 
              string; pass None to disable comment filtering
         - fullDump - (default=C{True}) - dump results as list followed by results names in nested outline;
              if False, only dump nested list
         - printResults - (default=C{True}) prints test output to stdout
         - failureTests - (default=C{False}) indicates if these tests are expected to fail parsing

        Returns: a (success, results) tuple, where success indicates that all tests succeeded
        (or failed if C{failureTests} is True), and the results contain a list of lines of each 
        test's output
        
        Example::
            number_expr = pyparsing_common.number.copy()

            result = number_expr.runTests('''
                # unsigned integer
                100
                # negative integer
                -100
                # float with scientific notation
                6.02e23
                # integer with scientific notation
                1e-12
                ''')
            print("Success" if result[0] else "Failed!")

            result = number_expr.runTests('''
                # stray character
                100Z
                # missing leading digit before '.'
                -.100
                # too many '.'
                3.14.159
                ''', failureTests=True)
            print("Success" if result[0] else "Failed!")
        prints::
            # unsigned integer
            100
            [100]

            # negative integer
            -100
            [-100]

            # float with scientific notation
            6.02e23
            [6.02e+23]

            # integer with scientific notation
            1e-12
            [1e-12]

            Success
            
            # stray character
            100Z
               ^
            FAIL: Expected end of text (at char 3), (line:1, col:4)

            # missing leading digit before '.'
            -.100
            ^
            FAIL: Expected {real number with scientific notation | real number | signed integer} (at char 0), (line:1, col:1)

            # too many '.'
            3.14.159
                ^
            FAIL: Expected end of text (at char 4), (line:1, col:5)

            Success

        Each test string must be on a single line. If you want to test a string that spans multiple
        lines, create a test like this::

            expr.runTest(r"this is a test\n of strings that spans \n 3 lines")
        
        (Note that this is a raw string literal, you must include the leading 'r'.)
        TNFr'  z\n)r⁄  )r?  z(FATAL)rú   ˙ rr   ˙^zFAIL: zFAIL-EXCEPTION: )rz   rŸ   r‘   r†  r|   r≥   ⁄rstrip⁄
splitlinesr   r·  r  r≤   rè   r‹  r<  r   r!   rG   r†   r9   ro  rN  )r•   ⁄testsr⁄  ⁄comment⁄fullDump⁄printResults⁄failureTests⁄
allResults⁄comments⁄successrv   r!  ⁄resultr©   r§  rV  rw   rw   rx   ⁄runTestsè  sN    W



$


zParserElement.runTests)F)F)T)T)TT)TT)r”  )F)N)T)F)T)Tr#  TTF)Oró   rò   rô   rª   rt  rŸ  ⁄staticmethodrv  rx  rß   r⁄   rê  rï  rü  rÅ   r¢  r®  r©  r≠  r∞  r±  r≥  r∫  rª  rº  r«   r¬  r≈  r∆  rÃ  r   rÀ  rÕ  r—  rù  r“  r‘  r÷  r‹  ⁄_MAX_INTr‰  rÇ   rË  rç   r  r  rÚ  rÛ  r˙  r˚  r¸  r˝  r˛  rˇ  r   r  r  r  r  r  r  r  r  r  r  rØ   r∞   r◊  r  r  r  r  r  r  r   r!  r·  r1  ⁄__classcell__rw   rw   )rl  rx   r$   8  sí   


&


H
"
2G+D
			

)

c                   s    e Zd ZdZá fddÑZá  ZS )r,   zT
    Abstract C{ParserElement} subclass, for defining atomic matching patterns.
    c                s   t t| Éjddç d S )NF)rç  )r  r,   rß   )r•   )rl  rw   rx   rß   	  s    zToken.__init__)ró   rò   rô   rª   rß   r4  rw   rw   )rl  rx   r,   	  s   c                   s    e Zd ZdZá fddÑZá  ZS )r   z,
    An empty token, will always match.
    c                s$   t t| ÉjÉ  d| _d| _d| _d S )Nr   TF)r  r   rß   rÀ   rÅ  rÜ  )r•   )rl  rw   rx   rß   	  s    zEmpty.__init__)ró   rò   rô   rª   rß   r4  rw   rw   )rl  rx   r   	  s   c                   s*   e Zd ZdZá fddÑZdddÑZá  ZS )r   z(
    A token that will never match.
    c                s*   t t| ÉjÉ  d| _d| _d| _d| _d S )Nr   TFzUnmatchable token)r  r   rß   rÀ   rÅ  rÜ  rá  )r•   )rl  rw   rx   rß   *	  s
    zNoMatch.__init__Tc             C   s   t ||| j| ÉÇd S )N)r   rá  )r•   rO  r†   rò  rw   rw   rx   r±  1	  s    zNoMatch.parseImpl)T)ró   rò   rô   rª   rß   r±  r4  rw   rw   )rl  rx   r   &	  s   c                   s*   e Zd ZdZá fddÑZdddÑZá  ZS )r   a–  
    Token to exactly match a specified string.
    
    Example::
        Literal('blah').parseString('blah')  # -> ['blah']
        Literal('blah').parseString('blahfooblah')  # -> ['blah']
        Literal('blah').parseString('bla')  # -> Exception: Expected "blah"
    
    For case-insensitive matching, use L{CaselessLiteral}.
    
    For keyword matching (force word break before and after the matched string),
    use L{Keyword} or L{CaselessKeyword}.
    c                sÑ   t t| ÉjÉ  || _t|É| _y|d | _W n* tk
rV   tj	dt
ddç t| _Y nX dt| jÉ | _d| j | _d| _d| _d S )Nr   z2null string passed to Literal; use Empty() insteadrq   )rÌ  z"%s"z	Expected F)r  r   rß   ⁄matchrÊ   ⁄matchLen⁄firstMatchCharr›   rÓ  rÔ  r  r   rl  rÜ   rÀ   rá  rÅ  rÜ  )r•   ⁄matchString)rl  rw   rx   rß   C	  s    

zLiteral.__init__Tc             C   sJ   || | j kr6| jdks&|j| j|Ér6|| j | jfS t||| j| ÉÇd S )Nrr   )r7  r6  ⁄
startswithr5  r   rá  )r•   rO  r†   rò  rw   rw   rx   r±  V	  s    zLiteral.parseImpl)T)ró   rò   rô   rª   rß   r±  r4  rw   rw   )rl  rx   r   5	  s   c                   sL   e Zd ZdZed Zdá fddÑ	Zddd	ÑZá fd
dÑZe	ddÑ ÉZ
á  ZS )r   a\  
    Token to exactly match a specified string as a keyword, that is, it must be
    immediately followed by a non-keyword character.  Compare with C{L{Literal}}:
     - C{Literal("if")} will match the leading C{'if'} in C{'ifAndOnlyIf'}.
     - C{Keyword("if")} will not; it will only match the leading C{'if'} in C{'if x=1'}, or C{'if(y==2)'}
    Accepts two optional constructor arguments in addition to the keyword string:
     - C{identChars} is a string of characters that would be valid identifier characters,
          defaulting to all alphanumerics + "_" and "$"
     - C{caseless} allows case-insensitive matching, default is C{False}.
       
    Example::
        Keyword("start").parseString("start")  # -> ['start']
        Keyword("start").parseString("starting")  # -> Exception

    For case-insensitive matching, use L{CaselessKeyword}.
    z_$NFc                sÆ   t t| ÉjÉ  |d krtj}|| _t|É| _y|d | _W n$ tk
r^   t	j
dtddç Y nX d| j | _d| j | _d| _d| _|| _|r†|jÉ | _|jÉ }t|É| _d S )Nr   z2null string passed to Keyword; use Empty() insteadrq   )rÌ  z"%s"z	Expected F)r  r   rß   ⁄DEFAULT_KEYWORD_CHARSr5  rÊ   r6  r7  r›   rÓ  rÔ  r  rÀ   rá  rÅ  rÜ  ⁄caseless⁄upper⁄caselessmatchrø  ⁄
identChars)r•   r8  r>  r;  )rl  rw   rx   rß   q	  s&    

zKeyword.__init__Tc             C   s  | j r||||| j Ö jÉ | jkrÚ|t|É| j ksL||| j  jÉ | jkrÚ|dksj||d  jÉ | jkrÚ|| j | jfS nv|| | jkrÚ| jdks¢|j| j|ÉrÚ|t|É| j ks»||| j  | jkrÚ|dks‚||d  | jkrÚ|| j | jfS t	||| j
| ÉÇd S )Nr   rr   )r;  r6  r<  r=  rÊ   r>  r5  r7  r9  r   rá  )r•   rO  r†   rò  rw   rw   rx   r±  Ü	  s    *&zKeyword.parseImplc                s   t t| ÉjÉ }tj|_|S )N)r  r   r⁄   r:  r>  )r•   rü   )rl  rw   rx   r⁄   î	  s    zKeyword.copyc             C   s
   | t _dS )z,Overrides the default Keyword chars
        N)r   r:  )ru  rw   rw   rx   ⁄setDefaultKeywordCharsô	  s    zKeyword.setDefaultKeywordChars)NF)T)ró   rò   rô   rª   r3   r:  rß   r±  r⁄   r2  r?  r4  rw   rw   )rl  rx   r   ^	  s   
c                   s*   e Zd ZdZá fddÑZdddÑZá  ZS )r   al  
    Token to match a specified string, ignoring case of letters.
    Note: the matched results will always be in the case of the given
    match string, NOT the case of the input text.

    Example::
        OneOrMore(CaselessLiteral("CMD")).parseString("cmd CMD Cmd10") # -> ['CMD', 'CMD', 'CMD']
        
    (Contrast with example for L{CaselessKeyword}.)
    c                s6   t t| Éj|jÉ É || _d| j | _d| j | _d S )Nz'%s'z	Expected )r  r   rß   r<  ⁄returnStringrÀ   rá  )r•   r8  )rl  rw   rx   rß   ™	  s    zCaselessLiteral.__init__Tc             C   s@   |||| j  Ö jÉ | jkr,|| j  | jfS t||| j| ÉÇd S )N)r6  r<  r5  r@  r   rá  )r•   rO  r†   rò  rw   rw   rx   r±  ±	  s    zCaselessLiteral.parseImpl)T)ró   rò   rô   rª   rß   r±  r4  rw   rw   )rl  rx   r   ü	  s   
c                   s,   e Zd ZdZdá fddÑ	Zd	ddÑZá  ZS )
r   z–
    Caseless version of L{Keyword}.

    Example::
        OneOrMore(CaselessKeyword("CMD")).parseString("cmd CMD Cmd10") # -> ['CMD', 'CMD']
        
    (Contrast with example for L{CaselessLiteral}.)
    Nc                s   t t| Éj||ddç d S )NT)r;  )r  r   rß   )r•   r8  r>  )rl  rw   rx   rß   ø	  s    zCaselessKeyword.__init__Tc             C   sj   |||| j  Ö jÉ | jkrV|t|É| j  ksF||| j   jÉ | jkrV|| j  | jfS t||| j| ÉÇd S )N)r6  r<  r=  rÊ   r>  r5  r   rá  )r•   rO  r†   rò  rw   rw   rx   r±  ¬	  s    *zCaselessKeyword.parseImpl)N)T)ró   rò   rô   rª   rß   r±  r4  rw   rw   )rl  rx   r   ∂	  s   c                   s,   e Zd ZdZdá fddÑ	Zd	ddÑZá  ZS )
rl   ax  
    A variation on L{Literal} which matches "close" matches, that is, 
    strings with at most 'n' mismatching characters. C{CloseMatch} takes parameters:
     - C{match_string} - string to be matched
     - C{maxMismatches} - (C{default=1}) maximum number of mismatches allowed to count as a match
    
    The results from a successful parse will contain the matched text from the input string and the following named results:
     - C{mismatches} - a list of the positions within the match_string where mismatches were found
     - C{original} - the original match_string used to compare against the input string
    
    If C{mismatches} is an empty list, then the match was an exact match.
    
    Example::
        patt = CloseMatch("ATCATCGAATGGA")
        patt.parseString("ATCATCGAAXGGA") # -> (['ATCATCGAAXGGA'], {'mismatches': [[9]], 'original': ['ATCATCGAATGGA']})
        patt.parseString("ATCAXCGAAXGGA") # -> Exception: Expected 'ATCATCGAATGGA' (with up to 1 mismatches) (at char 0), (line:1, col:1)

        # exact match
        patt.parseString("ATCATCGAATGGA") # -> (['ATCATCGAATGGA'], {'mismatches': [[]], 'original': ['ATCATCGAATGGA']})

        # close match allowing up to 2 mismatches
        patt = CloseMatch("ATCATCGAATGGA", maxMismatches=2)
        patt.parseString("ATCAXCGAAXGGA") # -> (['ATCAXCGAAXGGA'], {'mismatches': [[4, 9]], 'original': ['ATCATCGAATGGA']})
    rr   c                sB   t t| ÉjÉ  || _|| _|| _d| j| jf | _d| _d| _d S )Nz&Expected %r (with up to %d mismatches)F)	r  rl   rß   rÀ   ⁄match_string⁄maxMismatchesrá  rÜ  rÅ  )r•   rA  rB  )rl  rw   rx   rß   ·	  s    zCloseMatch.__init__Tc             C   sÃ   |}t |É}|t | jÉ }||kr∏| j}d}g }	| j}
xÄtt|||Ö | jÉÉD ]0\}}|\}}||krP|	j|É t |	É|
krPP qPW |d }t|||Ö gÉ}| j|d< |	|d< ||fS t||| j| ÉÇd S )Nr   rr   ⁄original⁄
mismatches)	rÊ   rA  rB  rÎ   ré   r  r"   r   rá  )r•   rO  r†   rò  ⁄startrØ  ⁄maxlocrA  ⁄match_stringlocrD  rB  ⁄s_m⁄src⁄mat⁄resultsrw   rw   rx   r±  Í	  s(    "

zCloseMatch.parseImpl)rr   )T)ró   rò   rô   rª   rß   r±  r4  rw   rw   )rl  rx   rl   »	  s   	c                   s8   e Zd ZdZdá fddÑ	Zdd	d
ÑZá fddÑZá  ZS )r/   a	  
    Token for matching words composed of allowed character sets.
    Defined with string containing all allowed initial characters,
    an optional string containing allowed body characters (if omitted,
    defaults to the initial character set), and an optional minimum,
    maximum, and/or exact length.  The default value for C{min} is 1 (a
    minimum value < 1 is not valid); the default values for C{max} and C{exact}
    are 0, meaning no maximum or exact length restriction. An optional
    C{excludeChars} parameter can list characters that might be found in 
    the input C{bodyChars} string; useful to define a word of all printables
    except for one or two characters, for instance.
    
    L{srange} is useful for defining custom character set strings for defining 
    C{Word} expressions, using range notation from regular expression character sets.
    
    A common mistake is to use C{Word} to match a specific literal string, as in 
    C{Word("Address")}. Remember that C{Word} uses the string argument to define
    I{sets} of matchable characters. This expression would match "Add", "AAA",
    "dAred", or any other word made up of the characters 'A', 'd', 'r', 'e', and 's'.
    To match an exact literal string, use L{Literal} or L{Keyword}.

    pyparsing includes helper strings for building Words:
     - L{alphas}
     - L{nums}
     - L{alphanums}
     - L{hexnums}
     - L{alphas8bit} (alphabetic characters in ASCII range 128-255 - accented, tilded, umlauted, etc.)
     - L{punc8bit} (non-alphabetic characters in ASCII range 128-255 - currency, symbols, superscripts, diacriticals, etc.)
     - L{printables} (any non-whitespace character)

    Example::
        # a word composed of digits
        integer = Word(nums) # equivalent to Word("0123456789") or Word(srange("0-9"))
        
        # a word with a leading capital, and zero or more lowercase
        capital_word = Word(alphas.upper(), alphas.lower())

        # hostnames are alphanumeric, with leading alpha, and '-'
        hostname = Word(alphas, alphanums+'-')
        
        # roman numeral (not a strict parser, accepts invalid mix of characters)
        roman = Word("IVXLCDM")
        
        # any string of non-whitespace characters, except for ','
        csv_value = Word(printables, excludeChars=",")
    Nrr   r   Fc                sÃ  t t| ÉjÉ  à rFdjá fddÑ|D ÉÉ}|rFdjá fddÑ|D ÉÉ}|| _t|É| _|rl|| _t|É| _n|| _t|É| _|dk| _	|dk rñt
dÉÇ|| _|dkr¨|| _nt| _|dkr∆|| _|| _t| É| _d| j | _d	| _|| _d
| j| j kêr»|dkêr»|dkêr»|dkêr»| j| jkêr8dt| jÉ | _nHt| jÉdkêrfdtj| jÉt| jÉf | _ndt| jÉt| jÉf | _| jêròd| j d | _ytj| jÉ| _W n tk
êr∆   d | _Y nX d S )Nrú   c             3   s   | ]}|à kr|V  qd S )Nrw   )rá   rü   )⁄excludeCharsrw   rx   râ   7
  s    z Word.__init__.<locals>.<genexpr>c             3   s   | ]}|à kr|V  qd S )Nrw   )rá   rü   )rL  rw   rx   râ   9
  s    r   rr   zZcannot specify a minimum length < 1; use Optional(Word()) if zero-length word is permittedz	Expected Fr$  z[%s]+z%s[%s]*z	[%s][%s]*z\b)r  r/   rß   r≤   ⁄initCharsOrigrø  ⁄	initChars⁄bodyCharsOrig⁄	bodyChars⁄maxSpecifiedr˜  ⁄minLen⁄maxLenr3  rÜ   rÀ   rá  rÜ  ⁄	asKeyword⁄_escapeRegexRangeChars⁄reStringrÊ   rä  ⁄escape⁄compilero  )r•   rN  rP  ⁄min⁄max⁄exactrT  rL  )rl  )rL  rx   rß   4
  sT    



0
zWord.__init__Tc       
      C   sD  | j r<| j j||É}|s(t||| j| ÉÇ|jÉ }||jÉ fS || | jkrZt||| j| ÉÇ|}|d7 }t|É}| j}|| j	 }t
||É}x ||k r®|| |kr®|d7 }qäW d}	|| | jk r¿d}	| jrﬁ||k rﬁ|| |krﬁd}	| jêr|dkêr||d  |kês||k êr|| |kêrd}	|	êr4t||| j| ÉÇ||||Ö fS )Nrr   FTr   )rä  r5  r   rá  ⁄end⁄grouprN  rÊ   rP  rS  rY  rR  rQ  rT  )
r•   rO  r†   rò  r0  rE  rØ  ⁄	bodycharsrF  ⁄throwExceptionrw   rw   rx   r±  j
  s6    

4zWord.parseImplc                st   yt t| ÉjÉ S  tk
r"   Y nX | jd krnddÑ }| j| jkr^d|| jÉ|| jÉf | _nd|| jÉ | _| jS )Nc             S   s$   t | Édkr| d dÖ d S | S d S )NÈ   z...)rÊ   )rå   rw   rw   rx   ⁄
charsAsStrñ
  s    z Word.__str__.<locals>.charsAsStrz	W:(%s,%s)zW:(%s))r  r/   rØ   ro  r{  rM  rO  )r•   ra  )rl  rw   rx   rØ   ç
  s    
zWord.__str__)Nrr   r   r   FN)T)ró   rò   rô   rª   rß   r±  rØ   r4  rw   rw   )rl  rx   r/   
  s   .6
#c                   sF   e Zd ZdZeejdÉÉZdá fddÑ	ZdddÑZ	á fd	d
ÑZ
á  ZS )r'   aê  
    Token for matching strings that match a given regular expression.
    Defined with string specifying the regular expression in a form recognized by the inbuilt Python re module.
    If the given regex contains named groups (defined using C{(?P<name>...)}), these will be preserved as 
    named parse results.

    Example::
        realnum = Regex(r"[+-]?\d+\.\d*")
        date = Regex(r'(?P<year>\d{4})-(?P<month>\d\d?)-(?P<day>\d\d?)')
        # ref: http://stackoverflow.com/questions/267399/how-do-you-match-only-valid-roman-numerals-with-a-regular-expression
        roman = Regex(r"M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})")
    z[A-Z]r   c                sﬁ   t t| ÉjÉ  t|tÉrÜ|s,tjdtddç || _|| _	yt
j| j| j	É| _
| j| _W q∏ tjk
rÇ   tjd| tddç Ç Y q∏X n2t|tjÉr∞|| _
t|É | _| _|| _	ntdÉÇt| É| _d| j | _d| _d| _d	S )
z≠The parameters C{pattern} and C{flags} are passed to the C{re.compile()} function as-is. See the Python C{re} module for an explanation of the acceptable patterns and flags.z0null string passed to Regex; use Empty() insteadrq   )rÌ  z$invalid pattern (%s) passed to RegexzCRegex may only be constructed with a string or a compiled RE objectz	Expected FTN)r  r'   rß   rz   rŸ   rÓ  rÔ  r  ⁄pattern⁄flagsrä  rX  rV  ⁄sre_constants⁄error⁄compiledREtyper|   r˜  rÜ   rÀ   rá  rÜ  rÅ  )r•   rb  rc  )rl  rw   rx   rß   ≤
  s.    





zRegex.__init__Tc             C   sd   | j j||É}|s"t||| j| ÉÇ|jÉ }|jÉ }t|jÉ É}|r\x|D ]}|| ||< qHW ||fS )N)rä  r5  r   rá  r\  ⁄	groupdictr"   r]  )r•   rO  r†   rò  r0  ⁄drÑ   r„   rw   rw   rx   r±  ‘
  s    
zRegex.parseImplc                sD   yt t| ÉjÉ S  tk
r"   Y nX | jd kr>dt| jÉ | _| jS )NzRe:(%s))r  r'   rØ   ro  r{  r≈   rb  )r•   )rl  rw   rx   rØ   ·
  s    
zRegex.__str__)r   )T)ró   rò   rô   rª   rπ   rä  rX  rf  rß   r±  rØ   r4  rw   rw   )rl  rx   r'   §
  s
   "
c                   s8   e Zd ZdZdá fddÑ	ZdddÑZá fd	d
ÑZá  ZS )r%   a´  
    Token for matching strings that are delimited by quoting characters.
    
    Defined with the following parameters:
        - quoteChar - string of one or more characters defining the quote delimiting string
        - escChar - character to escape quotes, typically backslash (default=C{None})
        - escQuote - special quote sequence to escape an embedded quote string (such as SQL's "" to escape an embedded ") (default=C{None})
        - multiline - boolean indicating whether quotes can span multiple lines (default=C{False})
        - unquoteResults - boolean indicating whether the matched text should be unquoted (default=C{True})
        - endQuoteChar - string of one or more characters defining the end of the quote delimited string (default=C{None} => same as quoteChar)
        - convertWhitespaceEscapes - convert escaped whitespace (C{'\t'}, C{'\n'}, etc.) to actual whitespace (default=C{True})

    Example::
        qs = QuotedString('"')
        print(qs.searchString('lsjdf "This is the quote" sldjf'))
        complex_qs = QuotedString('{{', endQuoteChar='}}')
        print(complex_qs.searchString('lsjdf {{This is the "quote"}} sldjf'))
        sql_qs = QuotedString('"', escQuote='""')
        print(sql_qs.searchString('lsjdf "This is the quote with ""embedded"" quotes" sldjf'))
    prints::
        [['This is the quote']]
        [['This is the "quote"']]
        [['This is the quote with "embedded" quotes']]
    NFTc                sN  t tà ÉjÉ  |jÉ }|s0tjdtddç tÉ Ç|d kr>|}n"|jÉ }|s`tjdtddç tÉ Ç|à _t	|Éà _
|d à _|à _t	|Éà _|à _|à _|à _|à _|rËtjtjB à _dtjà jÉtà jd É|d k	r‹t|Épﬁdf à _n<dà _dtjà jÉtà jd É|d k	êrt|Éêpdf à _t	à jÉd	kêrpà  jd
djá fddÑtt	à jÉd	 ddÉD ÉÉ d 7  _|êréà  jdtj|É 7  _|êræà  jdtj|É 7  _tjà jÉd à _à  jdtjà jÉ 7  _ytjà jà jÉà _à jà _W n0 tjk
êr&   tjdà j tddç Ç Y nX t à Éà _!dà j! à _"dà _#dà _$d S )Nz$quoteChar cannot be the empty stringrq   )rÌ  z'endQuoteChar cannot be the empty stringr   z%s(?:[^%s%s]rú   z%s(?:[^%s\n\r%s]rr   z|(?:z)|(?:c             3   s4   | ],}d t jà jd|Ö Étà j| Éf V  qdS )z%s[^%s]N)rä  rW  ⁄endQuoteCharrU  )rá   r√   )r•   rw   rx   râ   /  s   z(QuotedString.__init__.<locals>.<genexpr>˙)z|(?:%s)z|(?:%s.)z(.)z)*%sz$invalid pattern (%s) passed to Regexz	Expected FTrs   )%r  r%   rß   r≥   rÓ  rÔ  r  ⁄SyntaxError⁄	quoteCharrÊ   ⁄quoteCharLen⁄firstQuoteCharri  ⁄endQuoteCharLen⁄escChar⁄escQuote⁄unquoteResults⁄convertWhitespaceEscapesrä  ⁄	MULTILINE⁄DOTALLrc  rW  rU  rb  r≤   rÁ   ⁄escCharReplacePatternrX  rV  rd  re  rÜ   rÀ   rá  rÜ  rÅ  )r•   rl  rp  rq  ⁄	multilinerr  ri  rs  )rl  )r•   rx   rß     sf    




6

zQuotedString.__init__c       	      C   sÿ   || | j kr| jj||Épd }|s4t||| j| ÉÇ|jÉ }|jÉ }| jr–|| j| j	 Ö }t
|tÉr–d|kr§| jr§dddddú}x |jÉ D ]\}}|j||É}qåW | jr∫tj| jd|É}| jr–|j| j| jÉ}||fS )N˙\˙	r'  ˙˙)z\tz\nz\fz\rz\g<1>)rn  rä  r5  r   rá  r\  r]  rr  rm  ro  rz   rŸ   rs  rÍ   rè   rp  r‰   rv  rq  ri  )	r•   rO  r†   rò  r0  rÑ   ⁄ws_map⁄wslit⁄wscharrw   rw   rx   r±  G  s(     
zQuotedString.parseImplc                sF   yt t| ÉjÉ S  tk
r"   Y nX | jd kr@d| j| jf | _| jS )Nz.quoted string, starting with %s ending with %s)r  r%   rØ   ro  r{  rl  ri  )r•   )rl  rw   rx   rØ   j  s    
zQuotedString.__str__)NNFTNT)T)ró   rò   rô   rª   rß   r±  rØ   r4  rw   rw   )rl  rx   r%   Ì
  s   A
#c                   s8   e Zd ZdZdá fddÑ	ZdddÑZá fd	d
ÑZá  ZS )r	   aÙ  
    Token for matching words composed of characters I{not} in a given set (will
    include whitespace in matched characters if not listed in the provided exclusion set - see example).
    Defined with string containing all disallowed characters, and an optional
    minimum, maximum, and/or exact length.  The default value for C{min} is 1 (a
    minimum value < 1 is not valid); the default values for C{max} and C{exact}
    are 0, meaning no maximum or exact length restriction.

    Example::
        # define a comma-separated-value as anything that is not a ','
        csv_value = CharsNotIn(',')
        print(delimitedList(csv_value).parseString("dkls,lsdkjf,s12 34,@!#,213"))
    prints::
        ['dkls', 'lsdkjf', 's12 34', '@!#', '213']
    rr   r   c                sÜ   t t| ÉjÉ  d| _|| _|dk r*tdÉÇ|| _|dkr@|| _nt| _|dkrZ|| _|| _t	| É| _
d| j
 | _| jdk| _d| _d S )NFrr   zfcannot specify a minimum length < 1; use Optional(CharsNotIn()) if zero-length char group is permittedr   z	Expected )r  r	   rß   r~  ⁄notCharsr˜  rR  rS  r3  rÜ   rÀ   rá  rÅ  rÜ  )r•   r  rY  rZ  r[  )rl  rw   rx   rß   Ü  s     
zCharsNotIn.__init__Tc             C   sî   || | j krt||| j| ÉÇ|}|d7 }| j }t|| j t|ÉÉ}x ||k rd|| |krd|d7 }qFW || | jk rÑt||| j| ÉÇ||||Ö fS )Nrr   )r  r   rá  rY  rS  rÊ   rR  )r•   rO  r†   rò  rE  ⁄notchars⁄maxlenrw   rw   rx   r±  û  s    
zCharsNotIn.parseImplc                sd   yt t| ÉjÉ S  tk
r"   Y nX | jd kr^t| jÉdkrRd| jd dÖ  | _nd| j | _| jS )Nr`  z
!W:(%s...)z!W:(%s))r  r	   rØ   ro  r{  rÊ   r  )r•   )rl  rw   rx   rØ   Ø  s    
zCharsNotIn.__str__)rr   r   r   )T)ró   rò   rô   rª   rß   r±  rØ   r4  rw   rw   )rl  rx   r	   v  s   
c                   s<   e Zd ZdZddddddúZdá fddÑ	ZdddÑZá  ZS )r.   aè  
    Special matching class for matching whitespace.  Normally, whitespace is ignored
    by pyparsing grammars.  This class is included when some whitespace structures
    are significant.  Define with a string containing the whitespace characters to be
    matched; default is C{" \t\r\n"}.  Also takes optional C{min}, C{max}, and C{exact} arguments,
    as defined for the C{L{Word}} class.
    z<SPC>z<TAB>z<LF>z<CR>z<FF>)r$  ry  r'  r{  rz  ˙ 	
rr   r   c                sí   t tà ÉjÉ  |à _à jdjá fddÑà jD ÉÉÉ djddÑ à jD ÉÉà _dà _dà j à _	|à _
|dkrt|à _ntà _|dkré|à _|à _
d S )Nrú   c             3   s   | ]}|à j kr|V  qd S )N)⁄
matchWhite)rá   rü   )r•   rw   rx   râ   œ  s    z!White.__init__.<locals>.<genexpr>c             s   s   | ]}t j| V  qd S )N)r.   ⁄	whiteStrs)rá   rü   rw   rw   rx   râ   —  s    Tz	Expected r   )r  r.   rß   rÉ  r  r≤   r  rÀ   rÅ  rá  rR  rS  r3  )r•   ⁄wsrY  rZ  r[  )rl  )r•   rx   rß   Ã  s     zWhite.__init__Tc             C   sî   || | j krt||| j| ÉÇ|}|d7 }|| j }t|t|ÉÉ}x"||k rd|| | j krd|d7 }qDW || | jk rÑt||| j| ÉÇ||||Ö fS )Nrr   )rÉ  r   rá  rS  rY  rÊ   rR  )r•   rO  r†   rò  rE  rF  rw   rw   rx   r±  ‡  s    
zWhite.parseImpl)rÇ  rr   r   r   )T)ró   rò   rô   rª   rÑ  rß   r±  r4  rw   rw   )rl  rx   r.   Ω  s   c                   s   e Zd Zá fddÑZá  ZS )⁄_PositionTokenc                s(   t t| ÉjÉ  | jj| _d| _d| _d S )NTF)r  rÜ  rß   rl  ró   rÀ   rÅ  rÜ  )r•   )rl  rw   rx   rß   Ò  s    
z_PositionToken.__init__)ró   rò   rô   rß   r4  rw   rw   )rl  rx   rÜ    s   rÜ  c                   s2   e Zd ZdZá fddÑZddÑ Zd	ddÑZá  ZS )
r   zb
    Token to advance to a specific column of input text; useful for tabular report scraping.
    c                s   t t| ÉjÉ  || _d S )N)r  r   rß   r9   )r•   ⁄colno)rl  rw   rx   rß   ˚  s    zGoToColumn.__init__c             C   s`   t ||É| j kr\t|É}| jr*| j||É}x0||k rZ|| jÉ rZt ||É| j krZ|d7 }q,W |S )Nrr   )r9   rÊ   rÉ  r≠  ⁄isspace)r•   rO  r†   rØ  rw   rw   rx   r∞  ˇ  s    &zGoToColumn.preParseTc             C   sD   t ||É}|| j kr"t||d| ÉÇ|| j  | }|||Ö }||fS )NzText not in expected column)r9   r   )r•   rO  r†   rò  ⁄thiscol⁄newlocrÑ   rw   rw   rx   r±    s    

zGoToColumn.parseImpl)T)ró   rò   rô   rª   rß   r∞  r±  r4  rw   rw   )rl  rx   r   ˜  s   	c                   s*   e Zd ZdZá fddÑZdddÑZá  ZS )r   aø  
    Matches if current position is at the beginning of a line within the parse string
    
    Example::
    
        test = '''        AAA this line
        AAA and this line
          AAA but not this one
        B AAA and definitely not this one
        '''

        for t in (LineStart() + 'AAA' + restOfLine).searchString(test):
            print(t)
    
    Prints::
        ['AAA', ' this line']
        ['AAA', ' and this line']    

    c                s   t t| ÉjÉ  d| _d S )NzExpected start of line)r  r   rß   rá  )r•   )rl  rw   rx   rß   &  s    zLineStart.__init__Tc             C   s*   t ||Édkr|g fS t||| j| ÉÇd S )Nrr   )r9   r   rá  )r•   rO  r†   rò  rw   rw   rx   r±  *  s    zLineStart.parseImpl)T)ró   rò   rô   rª   rß   r±  r4  rw   rw   )rl  rx   r     s   c                   s*   e Zd ZdZá fddÑZdddÑZá  ZS )r   zU
    Matches if current position is at the end of a line within the parse string
    c                s,   t t| ÉjÉ  | jtjjddÉÉ d| _d S )Nr'  rú   zExpected end of line)r  r   rß   r  r$   rt  rè   rá  )r•   )rl  rw   rx   rß   3  s    zLineEnd.__init__Tc             C   sb   |t |Ék r6|| dkr$|d dfS t||| j| ÉÇn(|t |ÉkrN|d g fS t||| j| ÉÇd S )Nr'  rr   )rÊ   r   rá  )r•   rO  r†   rò  rw   rw   rx   r±  8  s    zLineEnd.parseImpl)T)ró   rò   rô   rª   rß   r±  r4  rw   rw   )rl  rx   r   /  s   c                   s*   e Zd ZdZá fddÑZdddÑZá  ZS )r*   zM
    Matches if current position is at the beginning of the parse string
    c                s   t t| ÉjÉ  d| _d S )NzExpected start of text)r  r*   rß   rá  )r•   )rl  rw   rx   rß   G  s    zStringStart.__init__Tc             C   s0   |dkr(|| j |dÉkr(t||| j| ÉÇ|g fS )Nr   )r∞  r   rá  )r•   rO  r†   rò  rw   rw   rx   r±  K  s    zStringStart.parseImpl)T)ró   rò   rô   rª   rß   r±  r4  rw   rw   )rl  rx   r*   C  s   c                   s*   e Zd ZdZá fddÑZdddÑZá  ZS )r)   zG
    Matches if current position is at the end of the parse string
    c                s   t t| ÉjÉ  d| _d S )NzExpected end of text)r  r)   rß   rá  )r•   )rl  rw   rx   rß   V  s    zStringEnd.__init__Tc             C   s^   |t |Ék rt||| j| ÉÇn<|t |Ékr6|d g fS |t |ÉkrJ|g fS t||| j| ÉÇd S )Nrr   )rÊ   r   rá  )r•   rO  r†   rò  rw   rw   rx   r±  Z  s    zStringEnd.parseImpl)T)ró   rò   rô   rª   rß   r±  r4  rw   rw   )rl  rx   r)   R  s   c                   s.   e Zd ZdZefá fddÑ	ZdddÑZá  ZS )r1   ap  
    Matches if the current position is at the beginning of a Word, and
    is not preceded by any character in a given set of C{wordChars}
    (default=C{printables}). To emulate the C{} behavior of regular expressions,
    use C{WordStart(alphanums)}. C{WordStart} will also match at the beginning of
    the string being parsed, or at the beginning of a line.
    c                s"   t t| ÉjÉ  t|É| _d| _d S )NzNot at the start of a word)r  r1   rß   rø  ⁄	wordCharsrá  )r•   rã  )rl  rw   rx   rß   l  s    
zWordStart.__init__Tc             C   s@   |dkr8||d  | j ks(|| | j kr8t||| j| ÉÇ|g fS )Nr   rr   )rã  r   rá  )r•   rO  r†   rò  rw   rw   rx   r±  q  s
    zWordStart.parseImpl)T)ró   rò   rô   rª   rV   rß   r±  r4  rw   rw   )rl  rx   r1   d  s   c                   s.   e Zd ZdZefá fddÑ	ZdddÑZá  ZS )r0   aZ  
    Matches if the current position is at the end of a Word, and
    is not followed by any character in a given set of C{wordChars}
    (default=C{printables}). To emulate the C{} behavior of regular expressions,
    use C{WordEnd(alphanums)}. C{WordEnd} will also match at the end of
    the string being parsed, or at the end of a line.
    c                s(   t t| ÉjÉ  t|É| _d| _d| _d S )NFzNot at the end of a word)r  r0   rß   rø  rã  r~  rá  )r•   rã  )rl  rw   rx   rß   Ä  s    
zWordEnd.__init__Tc             C   sP   t |É}|dkrH||k rH|| | jks8||d  | jkrHt||| j| ÉÇ|g fS )Nr   rr   )rÊ   rã  r   rá  )r•   rO  r†   rò  rØ  rw   rw   rx   r±  Ü  s    zWordEnd.parseImpl)T)ró   rò   rô   rª   rV   rß   r±  r4  rw   rw   )rl  rx   r0   x  s   c                   sÑ   e Zd ZdZdá fddÑ	ZddÑ ZddÑ Zd	d
Ñ Zá fddÑZá fddÑZ	á fddÑZ
dá fddÑ	Zg fddÑZá fddÑZá  ZS )r    z^
    Abstract subclass of ParserElement, for combining and post-processing parsed tokens.
    Fc                s∞   t t| Éj|É t|tÉr"t|É}t|tÉr<tj|Ég| _	njt|t
jÉrzt|É}tddÑ |D ÉÉrnttj|É}t|É| _	n,yt|É| _	W n tk
r§   |g| _	Y nX d| _d S )Nc             s   s   | ]}t |tÉV  qd S )N)rz   rŸ   )rá   rP  rw   rw   rx   râ   ù  s    z+ParseExpression.__init__.<locals>.<genexpr>F)r  r    rß   rz   r÷   r‘   rŸ   r$   rw  ⁄exprsr…  ⁄Iterable⁄allr†  r‹   rã  )r•   rå  rç  )rl  rw   rx   rß   ì  s    

zParseExpression.__init__c             C   s
   | j | S )N)rå  )r•   r√   rw   rw   rx   rƒ   ß  s    zParseExpression.__getitem__c             C   s   | j j|É d | _| S )N)rå  r  r{  )r•   r  rw   rw   rx   r  ™  s    zParseExpression.appendc             C   s4   d| _ ddÑ | jD É| _x| jD ]}|jÉ  q W | S )z~Extends C{leaveWhitespace} defined in base class, and also invokes C{leaveWhitespace} on
           all contained expressions.Fc             S   s   g | ]}|j É ëqS rw   )r⁄   )rá   r´  rw   rw   rx   rﬂ   ≥  s    z3ParseExpression.leaveWhitespace.<locals>.<listcomp>)r~  rå  r  )r•   r´  rw   rw   rx   r  Ø  s
    zParseExpression.leaveWhitespacec                sz   t |tÉrF|| jkrvtt| Éj|É xP| jD ]}|j| jd É q,W n0tt| Éj|É x| jD ]}|j| jd É q^W | S )Nrr   rs   rs   )rz   r+   rÉ  r  r    r  rå  )r•   r  r´  )rl  rw   rx   r  ∏  s    

zParseExpression.ignorec                sL   yt t| ÉjÉ S  tk
r"   Y nX | jd krFd| jjt| jÉf | _| jS )Nz%s:(%s))	r  r    rØ   ro  r{  rl  ró   rÜ   rå  )r•   )rl  rw   rx   rØ   ƒ  s    
zParseExpression.__str__c                s0  t t| ÉjÉ  x| jD ]}|jÉ  qW t| jÉdkêr| jd }t|| jÉr®|j r®|jd kr®|j	 r®|jd d Ö | jd g | _d | _
|  j|jO  _|  j|jO  _| jd }t|| jÉo÷|j o÷|jd ko÷|j	 êr| jd dÖ |jd d Ö  | _d | _
|  j|jO  _|  j|jO  _dt| É | _| S )Nrq   r   rr   z	Expected rs   rs   )r  r    r◊  rå  rÊ   rz   rl  ry  r|  rÑ  r{  rÅ  rÜ  rÜ   rá  )r•   r´  r  )rl  rw   rx   r◊  Œ  s0    




zParseExpression.streamlinec                s   t t| Éj||É}|S )N)r  r    rï  )r•   rÀ   rì  rÑ   )rl  rw   rx   rï    s    zParseExpression.setResultsNamec             C   s:   |d d Ö | g }x| j D ]}|j|É qW | jg É d S )N)rå  r  r  )r•   r  ⁄tmpr´  rw   rw   rx   r  Ù  s    zParseExpression.validatec                s$   t t| ÉjÉ }ddÑ | jD É|_|S )Nc             S   s   g | ]}|j É ëqS rw   )r⁄   )rá   r´  rw   rw   rx   rﬂ   ¸  s    z(ParseExpression.copy.<locals>.<listcomp>)r  r    r⁄   rå  )r•   rÑ   )rl  rw   rx   r⁄   ˙  s    zParseExpression.copy)F)F)ró   rò   rô   rª   rß   rƒ   r  r  r  rØ   r◊  rï  r  r⁄   r4  rw   rw   )rl  rx   r    è  s   	
"c                   sT   e Zd ZdZG ddÑ deÉZdá fddÑ	ZdddÑZd	d
Ñ ZddÑ Z	ddÑ Z
á  ZS )r   a  
    Requires all given C{ParseExpression}s to be found in the given order.
    Expressions may be separated by whitespace.
    May be constructed using the C{'+'} operator.
    May also be constructed using the C{'-'} operator, which will suppress backtracking.

    Example::
        integer = Word(nums)
        name_expr = OneOrMore(Word(alphas))

        expr = And([integer("id"),name_expr("name"),integer("age")])
        # more easily written as:
        expr = integer("id") + name_expr("name") + integer("age")
    c                   s   e Zd Zá fddÑZá  ZS )zAnd._ErrorStopc                s&   t tj| Éj||é d| _| jÉ  d S )N˙-)r  r   rÒ  rß   rÀ   r  )r•   r§   r  )rl  rw   rx   rß     s    zAnd._ErrorStop.__init__)ró   rò   rô   rß   r4  rw   rw   )rl  rx   rÒ    s   rÒ  Tc                sR   t t| Éj||É tddÑ | jD ÉÉ| _| j| jd jÉ | jd j| _d| _	d S )Nc             s   s   | ]}|j V  qd S )N)rÅ  )rá   r´  rw   rw   rx   râ     s    zAnd.__init__.<locals>.<genexpr>r   T)
r  r   rß   ré  rå  rÅ  r  r  r~  rã  )r•   rå  rç  )rl  rw   rx   rß     s
    zAnd.__init__c       	      C   s  | j d j|||ddç\}}d}xÿ| j dd Ö D ]∆}t|tjÉrFd}q0|r–y|j|||É\}}W q‚ tk
rv   Ç Y q‚ tk
r¶ } zd |_tj|ÉÇW Y d d }~X q‚ t	k
rÃ   t|t
|É| j| ÉÇY q‚X n|j|||É\}}|sÓ|jÉ r0||7 }q0W ||fS )Nr   F)rô  rr   T)rå  rù  rz   r   rÒ  r#   r   ⁄__traceback__r™   r›   rÊ   rá  r  )	r•   rO  r†   rò  ⁄
resultlist⁄	errorStopr´  ⁄
exprtokensr©   rw   rw   rx   r±    s(    zAnd.parseImplc             C   s   t |tÉrtj|É}| j|ÉS )N)rz   rŸ   r$   rw  r  )r•   r  rw   rw   rx   r  5  s    

zAnd.__iadd__c             C   s8   |d d Ö | g }x | j D ]}|j|É |jsP qW d S )N)rå  r  rÅ  )r•   ræ   ⁄subRecCheckListr´  rw   rw   rx   r  :  s
    
zAnd.checkRecursionc             C   s@   t | dÉr| jS | jd kr:ddjddÑ | jD ÉÉ d | _| jS )NrÀ   ˙{r$  c             s   s   | ]}t |ÉV  qd S )N)rÜ   )rá   r´  rw   rw   rx   râ   F  s    zAnd.__str__.<locals>.<genexpr>˙})r˙   rÀ   r{  r≤   rå  )r•   rw   rw   rx   rØ   A  s
    

 zAnd.__str__)T)T)ró   rò   rô   rª   r   rÒ  rß   r±  r  r  rØ   r4  rw   rw   )rl  rx   r   ˇ  s   
c                   sD   e Zd ZdZdá fddÑ	ZdddÑZdd	Ñ Zd
dÑ ZddÑ Zá  Z	S )r   aæ  
    Requires that at least one C{ParseExpression} is found.
    If two expressions match, the expression that matches the longest string will be used.
    May be constructed using the C{'^'} operator.

    Example::
        # construct Or using '^' operator
        
        number = Word(nums) ^ Combine(Word(nums) + '.' + Word(nums))
        print(number.searchString("123 3.1416 789"))
    prints::
        [['123'], ['3.1416'], ['789']]
    Fc                s:   t t| Éj||É | jr0tddÑ | jD ÉÉ| _nd| _d S )Nc             s   s   | ]}|j V  qd S )N)rÅ  )rá   r´  rw   rw   rx   râ   \  s    zOr.__init__.<locals>.<genexpr>T)r  r   rß   rå  r=  rÅ  )r•   rå  rç  )rl  rw   rx   rß   Y  s    zOr.__init__Tc             C   sT  d}d }g }x§| j D ]ö}y|j||É}W nv tk
rd }	 z d |	_|	j|krT|	}|	j}W Y d d }	~	X q tk
rû   t|É|kröt|t|É|j| É}t|É}Y qX |j||fÉ qW |êr*|j	ddÑ dç x`|D ]X\}
}y|j
|||ÉS  tk
êr$ }	 z"d |	_|	j|kêr|	}|	j}W Y d d }	~	X qŒX qŒW |d k	êrB| j|_|Çnt||d| ÉÇd S )Nrr   c             S   s
   | d  S )Nr   rw   )⁄xrw   rw   rx   ry   u  s    zOr.parseImpl.<locals>.<lambda>)r	  z no defined alternatives to matchrs   )rå  rª  r   rë  r†   r›   rÊ   rá  r  ⁄sortrù  r°   )r•   rO  r†   rò  ⁄	maxExcLoc⁄maxExceptionr·  r´  ⁄loc2r∏  ⁄_rw   rw   rx   r±  `  s<    

zOr.parseImplc             C   s   t |tÉrtj|É}| j|ÉS )N)rz   rŸ   r$   rw  r  )r•   r  rw   rw   rx   ⁄__ixor__Ü  s    

zOr.__ixor__c             C   s@   t | dÉr| jS | jd kr:ddjddÑ | jD ÉÉ d | _| jS )NrÀ   rñ  z ^ c             s   s   | ]}t |ÉV  qd S )N)rÜ   )rá   r´  rw   rw   rx   râ   ê  s    zOr.__str__.<locals>.<genexpr>ró  )r˙   rÀ   r{  r≤   rå  )r•   rw   rw   rx   rØ   ã  s
    

 z
Or.__str__c             C   s0   |d d Ö | g }x| j D ]}|j|É qW d S )N)rå  r  )r•   ræ   rï  r´  rw   rw   rx   r  î  s    zOr.checkRecursion)F)T)
ró   rò   rô   rª   rß   r±  rû  rØ   r  r4  rw   rw   )rl  rx   r   K  s   
&	c                   sD   e Zd ZdZdá fddÑ	ZdddÑZdd	Ñ Zd
dÑ ZddÑ Zá  Z	S )r   aΩ  
    Requires that at least one C{ParseExpression} is found.
    If two expressions match, the first one listed is the one that will match.
    May be constructed using the C{'|'} operator.

    Example::
        # construct MatchFirst using '|' operator
        
        # watch the order of expressions to match
        number = Word(nums) | Combine(Word(nums) + '.' + Word(nums))
        print(number.searchString("123 3.1416 789")) #  Fail! -> [['123'], ['3'], ['1416'], ['789']]

        # put more selective expression first
        number = Combine(Word(nums) + '.' + Word(nums)) | Word(nums)
        print(number.searchString("123 3.1416 789")) #  Better -> [['123'], ['3.1416'], ['789']]
    Fc                s:   t t| Éj||É | jr0tddÑ | jD ÉÉ| _nd| _d S )Nc             s   s   | ]}|j V  qd S )N)rÅ  )rá   r´  rw   rw   rx   râ   Æ  s    z&MatchFirst.__init__.<locals>.<genexpr>T)r  r   rß   rå  r=  rÅ  )r•   rå  rç  )rl  rw   rx   rß   ´  s    zMatchFirst.__init__Tc       	      C   sƒ   d}d }x∂| j D ]à}y|j|||É}|S  tk
r\ } z|j|krL|}|j}W Y d d }~X q tk
rñ   t|É|krít|t|É|j| É}t|É}Y qX qW |d k	r≤| j|_|Çnt||d| ÉÇd S )Nrr   z no defined alternatives to matchrs   )rå  rù  r   r†   r›   rÊ   rá  r°   )	r•   rO  r†   rò  rö  rõ  r´  rÑ   r∏  rw   rw   rx   r±  ≤  s$    
zMatchFirst.parseImplc             C   s   t |tÉrtj|É}| j|ÉS )N)rz   rŸ   r$   rw  r  )r•   r  rw   rw   rx   ⁄__ior__   s    

zMatchFirst.__ior__c             C   s@   t | dÉr| jS | jd kr:ddjddÑ | jD ÉÉ d | _| jS )NrÀ   rñ  z | c             s   s   | ]}t |ÉV  qd S )N)rÜ   )rá   r´  rw   rw   rx   râ   ‘  s    z%MatchFirst.__str__.<locals>.<genexpr>ró  )r˙   rÀ   r{  r≤   rå  )r•   rw   rw   rx   rØ   œ  s
    

 zMatchFirst.__str__c             C   s0   |d d Ö | g }x| j D ]}|j|É qW d S )N)rå  r  )r•   ræ   rï  r´  rw   rw   rx   r  ÿ  s    zMatchFirst.checkRecursion)F)T)
ró   rò   rô   rª   rß   r±  rü  rØ   r  r4  rw   rw   )rl  rx   r   ö  s   
	c                   s<   e Zd ZdZdá fddÑ	ZdddÑZddÑ Zd	d
Ñ Zá  ZS )r   am  
    Requires all given C{ParseExpression}s to be found, but in any order.
    Expressions may be separated by whitespace.
    May be constructed using the C{'&'} operator.

    Example::
        color = oneOf("RED ORANGE YELLOW GREEN BLUE PURPLE BLACK WHITE BROWN")
        shape_type = oneOf("SQUARE CIRCLE TRIANGLE STAR HEXAGON OCTAGON")
        integer = Word(nums)
        shape_attr = "shape:" + shape_type("shape")
        posn_attr = "posn:" + Group(integer("x") + ',' + integer("y"))("posn")
        color_attr = "color:" + color("color")
        size_attr = "size:" + integer("size")

        # use Each (using operator '&') to accept attributes in any order 
        # (shape and posn are required, color and size are optional)
        shape_spec = shape_attr & posn_attr & Optional(color_attr) & Optional(size_attr)

        shape_spec.runTests('''
            shape: SQUARE color: BLACK posn: 100, 120
            shape: CIRCLE size: 50 color: BLUE posn: 50,80
            color:GREEN size:20 shape:TRIANGLE posn:20,40
            '''
            )
    prints::
        shape: SQUARE color: BLACK posn: 100, 120
        ['shape:', 'SQUARE', 'color:', 'BLACK', 'posn:', ['100', ',', '120']]
        - color: BLACK
        - posn: ['100', ',', '120']
          - x: 100
          - y: 120
        - shape: SQUARE


        shape: CIRCLE size: 50 color: BLUE posn: 50,80
        ['shape:', 'CIRCLE', 'size:', '50', 'color:', 'BLUE', 'posn:', ['50', ',', '80']]
        - color: BLUE
        - posn: ['50', ',', '80']
          - x: 50
          - y: 80
        - shape: CIRCLE
        - size: 50


        color: GREEN size: 20 shape: TRIANGLE posn: 20,40
        ['color:', 'GREEN', 'size:', '20', 'shape:', 'TRIANGLE', 'posn:', ['20', ',', '40']]
        - color: GREEN
        - posn: ['20', ',', '40']
          - x: 20
          - y: 40
        - shape: TRIANGLE
        - size: 20
    Tc                s8   t t| Éj||É tddÑ | jD ÉÉ| _d| _d| _d S )Nc             s   s   | ]}|j V  qd S )N)rÅ  )rá   r´  rw   rw   rx   râ     s    z Each.__init__.<locals>.<genexpr>T)r  r   rß   ré  rå  rÅ  r~  ⁄initExprGroups)r•   rå  rç  )rl  rw   rx   rß     s    zEach.__init__c                s˙  | j rítddÑ | jD ÉÉ| _ddÑ | jD É}ddÑ | jD É}|| | _ddÑ | jD É| _ddÑ | jD É| _ddÑ | jD É| _|  j| j7  _d	| _ |}| jd d Ö }| jd d Ö â g }d
}	x∂|	êrp|à  | j | j }
g }x~|
D ]v}y|j||É}W n  t	k
êr   |j
|É Y q‡X |j
| jjt|É|ÉÉ ||kêrD|j|É q‡|à kr‡à j|É q‡W t|Ét|
Ékrºd	}	qºW |êrúdjddÑ |D ÉÉ}t	||d| ÉÇ|á fddÑ| jD É7 }g }x*|D ]"}|j|||É\}}|j
|É êqæW t|tg ÉÉ}||fS )Nc             s   s&   | ]}t |tÉrt|jÉ|fV  qd S )N)rz   r   r  rP  )rá   r´  rw   rw   rx   râ     s    z!Each.parseImpl.<locals>.<genexpr>c             S   s   g | ]}t |tÉr|jëqS rw   )rz   r   rP  )rá   r´  rw   rw   rx   rﬂ     s    z"Each.parseImpl.<locals>.<listcomp>c             S   s"   g | ]}|j rt|tÉ r|ëqS rw   )rÅ  rz   r   )rá   r´  rw   rw   rx   rﬂ     s    c             S   s   g | ]}t |tÉr|jëqS rw   )rz   r2   rP  )rá   r´  rw   rw   rx   rﬂ      s    c             S   s   g | ]}t |tÉr|jëqS rw   )rz   r   rP  )rá   r´  rw   rw   rx   rﬂ   !  s    c             S   s    g | ]}t |tttfÉs|ëqS rw   )rz   r   r2   r   )rá   r´  rw   rw   rx   rﬂ   "  s    FTz, c             s   s   | ]}t |ÉV  qd S )N)rÜ   )rá   r´  rw   rw   rx   râ   =  s    z*Missing one or more required elements (%s)c                s$   g | ]}t |tÉr|jà kr|ëqS rw   )rz   r   rP  )rá   r´  )⁄tmpOptrw   rx   rﬂ   A  s    )r†  r◊   rå  ⁄opt1map⁄	optionals⁄multioptionals⁄multirequired⁄requiredrª  r   r  r·   r  ⁄removerÊ   r≤   rù  ⁄sumr"   )r•   rO  r†   rò  ⁄opt1⁄opt2⁄tmpLoc⁄tmpReqd⁄
matchOrder⁄keepMatching⁄tmpExprs⁄failedr´  ⁄missingrí  rK  ⁄finalResultsrw   )r°  rx   r±    sP    



zEach.parseImplc             C   s@   t | dÉr| jS | jd kr:ddjddÑ | jD ÉÉ d | _| jS )NrÀ   rñ  z & c             s   s   | ]}t |ÉV  qd S )N)rÜ   )rá   r´  rw   rw   rx   râ   P  s    zEach.__str__.<locals>.<genexpr>ró  )r˙   rÀ   r{  r≤   rå  )r•   rw   rw   rx   rØ   K  s
    

 zEach.__str__c             C   s0   |d d Ö | g }x| j D ]}|j|É qW d S )N)rå  r  )r•   ræ   rï  r´  rw   rw   rx   r  T  s    zEach.checkRecursion)T)T)	ró   rò   rô   rª   rß   r±  rØ   r  r4  rw   rw   )rl  rx   r   ﬁ  s
   5
1	c                   sl   e Zd ZdZdá fddÑ	ZdddÑZdd	Ñ Zá fd
dÑZá fddÑZddÑ Z	g fddÑZ
á fddÑZá  ZS )r   za
    Abstract subclass of C{ParserElement}, for combining and post-processing parsed tokens.
    Fc                sö   t t| Éj|É t|tÉr@ttjtÉr2tj|É}ntjt	|ÉÉ}|| _
d | _|d k	rñ|j| _|j| _| j|jÉ |j| _|j| _|j| _| jj|jÉ d S )N)r  r   rß   rz   rŸ   ⁄
issubclassr$   rw  r,   r   rP  r{  rÜ  rÅ  r  r  r~  r}  rã  rÉ  r  )r•   rP  rç  )rl  rw   rx   rß   ^  s    
zParseElementEnhance.__init__Tc             C   s2   | j d k	r| j j|||ddçS td|| j| ÉÇd S )NF)rô  rú   )rP  rù  r   rá  )r•   rO  r†   rò  rw   rw   rx   r±  p  s    
zParseElementEnhance.parseImplc             C   s*   d| _ | jjÉ | _| jd k	r&| jjÉ  | S )NF)r~  rP  r⁄   r  )r•   rw   rw   rx   r  v  s
    

z#ParseElementEnhance.leaveWhitespacec                sr   t |tÉrB|| jkrntt| Éj|É | jd k	rn| jj| jd É n,tt| Éj|É | jd k	rn| jj| jd É | S )Nrr   rs   rs   )rz   r+   rÉ  r  r   r  rP  )r•   r  )rl  rw   rx   r  }  s    



zParseElementEnhance.ignorec                s&   t t| ÉjÉ  | jd k	r"| jjÉ  | S )N)r  r   r◊  rP  )r•   )rl  rw   rx   r◊  â  s    

zParseElementEnhance.streamlinec             C   sB   | |krt || g ÉÇ|d d Ö | g }| jd k	r>| jj|É d S )N)r&   rP  r  )r•   ræ   rï  rw   rw   rx   r  è  s
    
z"ParseElementEnhance.checkRecursionc             C   s6   |d d Ö | g }| j d k	r(| j j|É | jg É d S )N)rP  r  r  )r•   r  rè  rw   rw   rx   r  ñ  s    
zParseElementEnhance.validatec                sV   yt t| ÉjÉ S  tk
r"   Y nX | jd krP| jd k	rPd| jjt| jÉf | _| jS )Nz%s:(%s))	r  r   rØ   ro  r{  rP  rl  ró   rÜ   )r•   )rl  rw   rx   rØ   ú  s    zParseElementEnhance.__str__)F)T)ró   rò   rô   rª   rß   r±  r  r  r◊  r  r  rØ   r4  rw   rw   )rl  rx   r   Z  s   
c                   s*   e Zd ZdZá fddÑZdddÑZá  ZS )r   aı  
    Lookahead matching of the given parse expression.  C{FollowedBy}
    does I{not} advance the parsing position within the input string, it only
    verifies that the specified parse expression matches at the current
    position.  C{FollowedBy} always returns a null token list.

    Example::
        # use FollowedBy to match a label only if it is followed by a ':'
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        
        OneOrMore(attr_expr).parseString("shape: SQUARE color: BLACK posn: upper left").pprint()
    prints::
        [['shape', 'SQUARE'], ['color', 'BLACK'], ['posn', 'upper left']]
    c                s   t t| Éj|É d| _d S )NT)r  r   rß   rÅ  )r•   rP  )rl  rw   rx   rß   ∏  s    zFollowedBy.__init__Tc             C   s   | j j||É |g fS )N)rP  rª  )r•   rO  r†   rò  rw   rw   rx   r±  º  s    zFollowedBy.parseImpl)T)ró   rò   rô   rª   rß   r±  r4  rw   rw   )rl  rx   r   ß  s   c                   s2   e Zd ZdZá fddÑZd	ddÑZddÑ Zá  ZS )
r   a±  
    Lookahead to disallow matching with the given parse expression.  C{NotAny}
    does I{not} advance the parsing position within the input string, it only
    verifies that the specified parse expression does I{not} match at the current
    position.  Also, C{NotAny} does I{not} skip over leading whitespace. C{NotAny}
    always returns a null token list.  May be constructed using the '~' operator.

    Example::
        
    c                s0   t t| Éj|É d| _d| _dt| jÉ | _d S )NFTzFound unwanted token, )r  r   rß   r~  rÅ  rÜ   rP  rá  )r•   rP  )rl  rw   rx   rß   Ã  s    zNotAny.__init__Tc             C   s&   | j j||Ért||| j| ÉÇ|g fS )N)rP  rº  r   rá  )r•   rO  r†   rò  rw   rw   rx   r±  ”  s    zNotAny.parseImplc             C   s4   t | dÉr| jS | jd kr.dt| jÉ d | _| jS )NrÀ   z~{ró  )r˙   rÀ   r{  rÜ   rP  )r•   rw   rw   rx   rØ   ÿ  s
    

zNotAny.__str__)T)ró   rò   rô   rª   rß   r±  rØ   r4  rw   rw   )rl  rx   r   ¡  s   

c                   s(   e Zd Zdá fddÑ	ZdddÑZá  ZS )	⁄_MultipleMatchNc                sF   t t| Éj|É d| _|}t|tÉr.tj|É}|d k	r<| nd | _d S )NT)	r  r¥  rß   r}  rz   rŸ   r$   rw  ⁄	not_ender)r•   rP  ⁄stopOn⁄ender)rl  rw   rx   rß   ‚  s    

z_MultipleMatch.__init__Tc             C   s¬   | j j}| j}| jd k	}|r$| jj}|r2|||É ||||ddç\}}yZ| j  }	xJ|rb|||É |	rr|||É}
n|}
|||
|É\}}|sí|jÉ rT||7 }qTW W n ttfk
r∏   Y nX ||fS )NF)rô  )	rP  rù  r≠  rµ  rª  rÉ  r  r   r›   )r•   rO  r†   rò  ⁄self_expr_parse⁄self_skip_ignorables⁄check_ender⁄try_not_enderr∑  ⁄hasIgnoreExprsrµ  ⁄	tmptokensrw   rw   rx   r±  Í  s,    



z_MultipleMatch.parseImpl)N)T)ró   rò   rô   rß   r±  r4  rw   rw   )rl  rx   r¥  ·  s   r¥  c               @   s   e Zd ZdZddÑ ZdS )r   aÉ  
    Repetition of one or more of the given expression.
    
    Parameters:
     - expr - expression that must match one or more times
     - stopOn - (default=C{None}) - expression for a terminating sentinel
          (only required if the sentinel would ordinarily match the repetition 
          expression)          

    Example::
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

        text = "shape: SQUARE posn: upper left color: BLACK"
        OneOrMore(attr_expr).parseString(text).pprint()  # Fail! read 'color' as data instead of next label -> [['shape', 'SQUARE color']]

        # use stopOn attribute for OneOrMore to avoid reading label string as part of the data
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        OneOrMore(attr_expr).parseString(text).pprint() # Better -> [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'BLACK']]
        
        # could also be written as
        (attr_expr * (1,)).parseString(text).pprint()
    c             C   s4   t | dÉr| jS | jd kr.dt| jÉ d | _| jS )NrÀ   rñ  z}...)r˙   rÀ   r{  rÜ   rP  )r•   rw   rw   rx   rØ   !  s
    

zOneOrMore.__str__N)ró   rò   rô   rª   rØ   rw   rw   rw   rx   r     s   c                   s8   e Zd ZdZd
á fddÑ	Zdá fddÑ	Zdd	Ñ Zá  ZS )r2   aw  
    Optional repetition of zero or more of the given expression.
    
    Parameters:
     - expr - expression that must match zero or more times
     - stopOn - (default=C{None}) - expression for a terminating sentinel
          (only required if the sentinel would ordinarily match the repetition 
          expression)          

    Example: similar to L{OneOrMore}
    Nc                s   t t| Éj||dç d| _d S )N)r∂  T)r  r2   rß   rÅ  )r•   rP  r∂  )rl  rw   rx   rß   6  s    zZeroOrMore.__init__Tc                s6   yt t| Éj|||ÉS  ttfk
r0   |g fS X d S )N)r  r2   r±  r   r›   )r•   rO  r†   rò  )rl  rw   rx   r±  :  s    zZeroOrMore.parseImplc             C   s4   t | dÉr| jS | jd kr.dt| jÉ d | _| jS )NrÀ   r  z]...)r˙   rÀ   r{  rÜ   rP  )r•   rw   rw   rx   rØ   @  s
    

zZeroOrMore.__str__)N)T)ró   rò   rô   rª   rß   r±  rØ   r4  rw   rw   )rl  rx   r2   *  s   c               @   s    e Zd ZddÑ ZeZddÑ ZdS )⁄
_NullTokenc             C   s   dS )NFrw   )r•   rw   rw   rx   rı   J  s    z_NullToken.__bool__c             C   s   dS )Nrú   rw   )r•   rw   rw   rx   rØ   M  s    z_NullToken.__str__N)ró   rò   rô   rı   rG  rØ   rw   rw   rw   rx   ræ  I  s   ræ  c                   s6   e Zd ZdZefá fddÑ	Zd	ddÑZddÑ Zá  ZS )
r   aa  
    Optional matching of the given expression.

    Parameters:
     - expr - expression that must match zero or more times
     - default (optional) - value to be returned if the optional expression is not found.

    Example::
        # US postal code can be a 5-digit zip, plus optional 4-digit qualifier
        zip = Combine(Word(nums, exact=5) + Optional('-' + Word(nums, exact=4)))
        zip.runTests('''
            # traditional ZIP code
            12345
            
            # ZIP+4 form
            12101-0001
            
            # invalid ZIP
            98765-
            ''')
    prints::
        # traditional ZIP code
        12345
        ['12345']

        # ZIP+4 form
        12101-0001
        ['12101-0001']

        # invalid ZIP
        98765-
             ^
        FAIL: Expected end of text (at char 5), (line:1, col:6)
    c                s.   t t| Éj|ddç | jj| _|| _d| _d S )NF)rç  T)r  r   rß   rP  r}  r
  rÅ  )r•   rP  r  )rl  rw   rx   rß   t  s    
zOptional.__init__Tc             C   sz   y| j j|||ddç\}}W nT ttfk
rp   | jtk	rh| j jr^t| jgÉ}| j|| j j< ql| jg}ng }Y nX ||fS )NF)rô  )rP  rù  r   r›   r
  ⁄_optionalNotMatchedr|  r"   )r•   rO  r†   rò  r∑  rw   rw   rx   r±  z  s    


zOptional.parseImplc             C   s4   t | dÉr| jS | jd kr.dt| jÉ d | _| jS )NrÀ   r  r  )r˙   rÀ   r{  rÜ   rP  )r•   rw   rw   rx   rØ   à  s
    

zOptional.__str__)T)	ró   rò   rô   rª   rø  rß   r±  rØ   r4  rw   rw   )rl  rx   r   Q  s   "
c                   s,   e Zd ZdZd	á fddÑ	Zd
ddÑZá  ZS )r(   aˇ	  
    Token for skipping over all undefined text until the matched expression is found.

    Parameters:
     - expr - target expression marking the end of the data to be skipped
     - include - (default=C{False}) if True, the target expression is also parsed 
          (the skipped text and target expression are returned as a 2-element list).
     - ignore - (default=C{None}) used to define grammars (typically quoted strings and 
          comments) that might contain false matches to the target expression
     - failOn - (default=C{None}) define expressions that are not allowed to be 
          included in the skipped test; if found before the target expression is found, 
          the SkipTo is not a match

    Example::
        report = '''
            Outstanding Issues Report - 1 Jan 2000

               # | Severity | Description                               |  Days Open
            -----+----------+-------------------------------------------+-----------
             101 | Critical | Intermittent system crash                 |          6
              94 | Cosmetic | Spelling error on Login ('log|n')         |         14
              79 | Minor    | System slow when running too many reports |         47
            '''
        integer = Word(nums)
        SEP = Suppress('|')
        # use SkipTo to simply match everything up until the next SEP
        # - ignore quoted strings, so that a '|' character inside a quoted string does not match
        # - parse action will call token.strip() for each matched token, i.e., the description body
        string_data = SkipTo(SEP, ignore=quotedString)
        string_data.setParseAction(tokenMap(str.strip))
        ticket_expr = (integer("issue_num") + SEP 
                      + string_data("sev") + SEP 
                      + string_data("desc") + SEP 
                      + integer("days_open"))
        
        for tkt in ticket_expr.searchString(report):
            print tkt.dump()
    prints::
        ['101', 'Critical', 'Intermittent system crash', '6']
        - days_open: 6
        - desc: Intermittent system crash
        - issue_num: 101
        - sev: Critical
        ['94', 'Cosmetic', "Spelling error on Login ('log|n')", '14']
        - days_open: 14
        - desc: Spelling error on Login ('log|n')
        - issue_num: 94
        - sev: Cosmetic
        ['79', 'Minor', 'System slow when running too many reports', '47']
        - days_open: 47
        - desc: System slow when running too many reports
        - issue_num: 79
        - sev: Minor
    FNc                s`   t t| Éj|É || _d| _d| _|| _d| _t|t	ÉrFt
j|É| _n|| _dt| jÉ | _d S )NTFzNo match found for )r  r(   rß   ⁄
ignoreExprrÅ  rÜ  ⁄includeMatchrÃ   rz   rŸ   r$   rw  ⁄failOnrÜ   rP  rá  )r•   r  ⁄includer  r¬  )rl  rw   rx   rß   »  s    
zSkipTo.__init__Tc             C   s,  |}t |É}| j}| jj}| jd k	r,| jjnd }| jd k	rB| jjnd }	|}
xú|
|kr÷|d k	rh|||
ÉrhP |	d k	rúx*y|	||
É}
W qr tk
rñ   P Y qrX qrW y|||
dddç W n  tt	fk
r–   |
d7 }
Y qLX P qLW t||| j
| ÉÇ|
}|||Ö }t|É}| jêr$||||ddç\}}||7 }||fS )NF)rò  rô  rr   )rô  )rÊ   rP  rù  r¬  rº  r¿  rª  r   r   r›   rá  r"   r¡  )r•   rO  r†   rò  rR  rØ  rP  ⁄
expr_parse⁄self_failOn_canParseNext⁄self_ignoreExpr_tryParse⁄tmploc⁄skiptext⁄
skipresultrJ  rw   rw   rx   r±  ’  s<    

zSkipTo.parseImpl)FNN)T)ró   rò   rô   rª   rß   r±  r4  rw   rw   )rl  rx   r(   ë  s   6c                   sb   e Zd ZdZdá fddÑ	ZddÑ ZddÑ Zd	d
Ñ ZddÑ Zg fddÑZ	ddÑ Z
á fddÑZá  ZS )r   aK  
    Forward declaration of an expression to be defined later -
    used for recursive grammars, such as algebraic infix notation.
    When the expression is known, it is assigned to the C{Forward} variable using the '<<' operator.

    Note: take care when assigning to C{Forward} not to overlook precedence of operators.
    Specifically, '|' has a lower precedence than '<<', so that::
        fwdExpr << a | b | c
    will actually be evaluated as::
        (fwdExpr << a) | b | c
    thereby leaving b and c out as parseable alternatives.  It is recommended that you
    explicitly group the values inserted into the C{Forward}::
        fwdExpr << (a | b | c)
    Converting to use the '<<=' operator instead will avoid this problem.

    See L{ParseResults.pprint} for an example of a recursive parser created using
    C{Forward}.
    Nc                s   t t| Éj|ddç d S )NF)rç  )r  r   rß   )r•   r  )rl  rw   rx   rß     s    zForward.__init__c             C   sj   t |tÉrtj|É}|| _d | _| jj| _| jj| _| j| jj	É | jj
| _
| jj| _| jj| jjÉ | S )N)rz   rŸ   r$   rw  rP  r{  rÜ  rÅ  r  r  r~  r}  rÉ  r  )r•   r  rw   rw   rx   ⁄
__lshift__  s    





zForward.__lshift__c             C   s   | |> S )Nrw   )r•   r  rw   rw   rx   ⁄__ilshift__'  s    zForward.__ilshift__c             C   s
   d| _ | S )NF)r~  )r•   rw   rw   rx   r  *  s    zForward.leaveWhitespacec             C   s$   | j s d| _ | jd k	r | jjÉ  | S )NT)rÖ  rP  r◊  )r•   rw   rw   rx   r◊  .  s
    

zForward.streamlinec             C   s>   | |kr0|d d Ö | g }| j d k	r0| j j|É | jg É d S )N)rP  r  r  )r•   r  rè  rw   rw   rx   r  5  s
    
zForward.validatec             C   s>   t | dÉr| jS | jjd S d}W d | j| _X | jjd | S )NrÀ   z: ...⁄Nonez: )r˙   rÀ   rl  ró   Z_revertClass⁄_ForwardNoRecurserP  rÜ   )r•   ⁄	retStringrw   rw   rx   rØ   <  s    
     
zForward.__str__c                s.   | j d k	rtt| ÉjÉ S tÉ }|| K }|S d S )N)rP  r  r   r⁄   )r•   rÑ   )rl  rw   rx   r⁄   M  s
    
zForward.copy)N)ró   rò   rô   rª   rß   r   rÀ  r  r◊  r  rØ   r⁄   r4  rw   rw   )rl  rx   r     s   c               @   s   e Zd ZddÑ ZdS )rÕ  c             C   s   dS )Nz...rw   )r•   rw   rw   rx   rØ   V  s    z_ForwardNoRecurse.__str__N)ró   rò   rô   rØ   rw   rw   rw   rx   rÕ  U  s   rÕ  c                   s"   e Zd ZdZdá fddÑ	Zá  ZS )r-   zQ
    Abstract subclass of C{ParseExpression}, for converting parsed results.
    Fc                s   t t| Éj|É d| _d S )NF)r  r-   rß   r}  )r•   rP  rç  )rl  rw   rx   rß   ]  s    zTokenConverter.__init__)F)ró   rò   rô   rª   rß   r4  rw   rw   )rl  rx   r-   Y  s   c                   s6   e Zd ZdZd
á fddÑ	Zá fddÑZdd	Ñ Zá  ZS )r
   a‘  
    Converter to concatenate all matching tokens to a single string.
    By default, the matching patterns must also be contiguous in the input string;
    this can be disabled by specifying C{'adjacent=False'} in the constructor.

    Example::
        real = Word(nums) + '.' + Word(nums)
        print(real.parseString('3.1416')) # -> ['3', '.', '1416']
        # will also erroneously match the following
        print(real.parseString('3. 1416')) # -> ['3', '.', '1416']

        real = Combine(Word(nums) + '.' + Word(nums))
        print(real.parseString('3.1416')) # -> ['3.1416']
        # no match when there are internal spaces
        print(real.parseString('3. 1416')) # -> Exception: Expected W:(0123...)
    rú   Tc                s8   t t| Éj|É |r| jÉ  || _d| _|| _d| _d S )NT)r  r
   rß   r  ⁄adjacentr~  ⁄
joinStringrã  )r•   rP  r–  rœ  )rl  rw   rx   rß   r  s    zCombine.__init__c                s(   | j rtj| |É ntt| Éj|É | S )N)rœ  r$   r  r  r
   )r•   r  )rl  rw   rx   r  |  s    zCombine.ignorec             C   sP   |j É }|d d Ö= |tdj|j| jÉÉg| jdç7 }| jrH|jÉ rH|gS |S d S )Nrú   )rÕ   )r⁄   r"   r≤   r  r–  rà  r|  r  )r•   rO  r†   r≤  ⁄retToksrw   rw   rx   r≥  É  s    
"zCombine.postParse)rú   T)ró   rò   rô   rª   rß   r  r≥  r4  rw   rw   )rl  rx   r
   a  s   
c                   s(   e Zd ZdZá fddÑZddÑ Zá  ZS )r   a˘  
    Converter to return the matched tokens as a list - useful for returning tokens of C{L{ZeroOrMore}} and C{L{OneOrMore}} expressions.

    Example::
        ident = Word(alphas)
        num = Word(nums)
        term = ident | num
        func = ident + Optional(delimitedList(term))
        print(func.parseString("fn a,b,100"))  # -> ['fn', 'a', 'b', '100']

        func = ident + Group(Optional(delimitedList(term)))
        print(func.parseString("fn a,b,100"))  # -> ['fn', ['a', 'b', '100']]
    c                s   t t| Éj|É d| _d S )NT)r  r   rß   r}  )r•   rP  )rl  rw   rx   rß   õ  s    zGroup.__init__c             C   s   |gS )Nrw   )r•   rO  r†   r≤  rw   rw   rx   r≥  ü  s    zGroup.postParse)ró   rò   rô   rª   rß   r≥  r4  rw   rw   )rl  rx   r   ç  s   c                   s(   e Zd ZdZá fddÑZddÑ Zá  ZS )r   aW  
    Converter to return a repetitive expression as a list, but also as a dictionary.
    Each element can also be referenced using the first token in the expression as its key.
    Useful for tabular report scraping when the first column can be used as a item key.

    Example::
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

        text = "shape: SQUARE posn: upper left color: light blue texture: burlap"
        attr_expr = (label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        
        # print attributes as plain groups
        print(OneOrMore(attr_expr).parseString(text).dump())
        
        # instead of OneOrMore(expr), parse using Dict(OneOrMore(Group(expr))) - Dict will auto-assign names
        result = Dict(OneOrMore(Group(attr_expr))).parseString(text)
        print(result.dump())
        
        # access named fields as dict entries, or output as dict
        print(result['shape'])        
        print(result.asDict())
    prints::
        ['shape', 'SQUARE', 'posn', 'upper left', 'color', 'light blue', 'texture', 'burlap']

        [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]
        - color: light blue
        - posn: upper left
        - shape: SQUARE
        - texture: burlap
        SQUARE
        {'color': 'light blue', 'posn': 'upper left', 'texture': 'burlap', 'shape': 'SQUARE'}
    See more examples at L{ParseResults} of accessing fields by results name.
    c                s   t t| Éj|É d| _d S )NT)r  r   rß   r}  )r•   rP  )rl  rw   rx   rß   ∆  s    zDict.__init__c             C   sÙ   xﬁt |ÉD ]“\}}t|Édkr q
|d }t|tÉrBt|d ÉjÉ }t|Édkr^td|É||< q
t|Édkrét|d tÉ rét|d |É||< q
|jÉ }|d= t|Édks∫t|tÉr |j	É r t||É||< q
t|d |É||< q
W | j
rÏ|gS |S d S )Nr   rr   rú   rq   )rÎ   rÊ   rz   ru   rÜ   r≥   rø   r"   r⁄   r  r|  )r•   rO  r†   r≤  r√   ⁄tok⁄ikey⁄	dictvaluerw   rw   rx   r≥     s$    
zDict.postParse)ró   rò   rô   rª   rß   r≥  r4  rw   rw   )rl  rx   r   ¢  s   #c               @   s    e Zd ZdZddÑ ZddÑ ZdS )r+   aV  
    Converter for ignoring the results of a parsed expression.

    Example::
        source = "a, b, c,d"
        wd = Word(alphas)
        wd_list1 = wd + ZeroOrMore(',' + wd)
        print(wd_list1.parseString(source))

        # often, delimiters that are useful during parsing are just in the
        # way afterward - use Suppress to keep them out of the parsed output
        wd_list2 = wd + ZeroOrMore(Suppress(',') + wd)
        print(wd_list2.parseString(source))
    prints::
        ['a', ',', 'b', ',', 'c', ',', 'd']
        ['a', 'b', 'c', 'd']
    (See also L{delimitedList}.)
    c             C   s   g S )Nrw   )r•   rO  r†   r≤  rw   rw   rx   r≥  ˆ  s    zSuppress.postParsec             C   s   | S )Nrw   )r•   rw   rw   rx   r  ˘  s    zSuppress.suppressN)ró   rò   rô   rª   r≥  r  rw   rw   rw   rx   r+   „  s   c               @   s(   e Zd ZdZddÑ ZddÑ ZddÑ ZdS )	r   zI
    Wrapper for parse actions, to ensure they are only called once.
    c             C   s   t |É| _d| _d S )NF)rs  ⁄callable⁄called)r•   ⁄
methodCallrw   rw   rx   rß     s    
zOnlyOnce.__init__c             C   s.   | j s| j|||É}d| _ |S t||dÉÇd S )NTrú   )r÷  r’  r   )r•   rå   rX  rv   rK  rw   rw   rx   r    s
    zOnlyOnce.__call__c             C   s
   d| _ d S )NF)r÷  )r•   rw   rw   rx   ⁄reset
  s    zOnlyOnce.resetN)ró   rò   rô   rª   rß   r  rÿ  rw   rw   rw   rx   r   ˝  s   c                s:   t à Éâ á fddÑ}yà j|_W n tk
r4   Y nX |S )as  
    Decorator for debugging parse actions. 
    
    When the parse action is called, this decorator will print C{">> entering I{method-name}(line:I{current_source_line}, I{parse_location}, I{matched_tokens})".}
    When the parse action completes, the decorator will print C{"<<"} followed by the returned value, or any exception that the parse action raised.

    Example::
        wd = Word(alphas)

        @traceParseAction
        def remove_duplicate_chars(tokens):
            return ''.join(sorted(set(''.join(tokens)))

        wds = OneOrMore(wd).setParseAction(remove_duplicate_chars)
        print(wds.parseString("slkdjs sld sldd sdlf sdljf"))
    prints::
        >>entering remove_duplicate_chars(line: 'slkdjs sld sldd sdlf sdljf', 0, (['slkdjs', 'sld', 'sldd', 'sdlf', 'sdljf'], {}))
        <<leaving remove_duplicate_chars (ret: 'dfjkls')
        ['dfjkls']
    c                 s¥   à j }| dd Ö \}}}t| Édkr8| d jj d | }tjjd|t||É||f É yà | é }W n8 tk
rö } ztjjd||f É Ç W Y d d }~X nX tjjd||f É |S )Nro   r   ⁄.z">>entering %s(line: '%s', %d, %r)
z<<leaving %s (exception: %s)
z<<leaving %s (ret: %r)
r\  )ró   rÊ   rl  r   ⁄stderr⁄writerG   ro  )⁄paArgs⁄thisFuncrå   rX  rv   rÑ   rV  )r  rw   rx   ⁄z#  s    ztraceParseAction.<locals>.z)rs  ró   r¨   )r  rﬁ  rw   )r  rx   rb     s    ˙,Fc             C   s`   t | Éd t |É d t | É d }|rBt| t||  É Éj|ÉS | tt|É|  É j|ÉS dS )a«  
    Helper to define a delimited list of expressions - the delimiter defaults to ','.
    By default, the list elements and delimiters can have intervening whitespace, and
    comments, but this can be overridden by passing C{combine=True} in the constructor.
    If C{combine} is set to C{True}, the matching tokens are returned as a single token
    string, with the delimiters included; otherwise, the matching tokens are returned
    as a list of tokens, with the delimiters suppressed.

    Example::
        delimitedList(Word(alphas)).parseString("aa,bb,cc") # -> ['aa', 'bb', 'cc']
        delimitedList(Word(hexnums), delim=':', combine=True).parseString("AA:BB:CC:DD:EE") # -> ['AA:BB:CC:DD:EE']
    z [r$  z]...N)rÜ   r
   r2   rê  r+   )rP  ⁄delim⁄combine⁄dlNamerw   rw   rx   r@   9  s    $c                sj   t É â á áfddÑ}|dkr0ttÉjddÑ É}n|jÉ }|jdÉ |j|ddç |à  jd	tàÉ d
 ÉS )a:  
    Helper to define a counted list of expressions.
    This helper defines a pattern of the form::
        integer expr expr expr...
    where the leading integer tells how many expr expressions follow.
    The matched tokens returns the array of expr tokens as a list - the leading count token is suppressed.
    
    If C{intExpr} is specified, it should be a pyparsing expression that produces an integer value.

    Example::
        countedArray(Word(alphas)).parseString('2 ab cd ef')  # -> ['ab', 'cd']

        # in this parser, the leading integer value is given in binary,
        # '10' indicating that 2 values are in the array
        binaryConstant = Word('01').setParseAction(lambda t: int(t[0], 2))
        countedArray(Word(alphas), intExpr=binaryConstant).parseString('10 ab cd ef')  # -> ['ab', 'cd']
    c                s.   |d }à |r t tàg| ÉÉp&t tÉ>  g S )Nr   )r   r   rC   )rå   rX  rv   rÙ  )⁄	arrayExprrP  rw   rx   ⁄countFieldParseAction_  s    "z+countedArray.<locals>.countFieldParseActionNc             S   s   t | d ÉS )Nr   )ru   )rv   rw   rw   rx   ry   d  s    zcountedArray.<locals>.<lambda>ZarrayLenT)rå  z(len) z...)r   r/   rR   rÅ   r⁄   rê  r¢  rÜ   )rP  ⁄intExprr‰  rw   )r„  rP  rx   r<   L  s    
c             C   s:   g }x0| D ](}t |tÉr(|jt|ÉÉ q
|j|É q
W |S )N)rz   r‘   r  rÊ  r  )⁄LrÑ   r√   rw   rw   rx   rÊ  k  s    

rÊ  c                s6   t É â á fddÑ}| j|ddç à jdt| É É à S )a*  
    Helper to define an expression that is indirectly defined from
    the tokens matched in a previous expression, that is, it looks
    for a 'repeat' of a previous expression.  For example::
        first = Word(nums)
        second = matchPreviousLiteral(first)
        matchExpr = first + ":" + second
    will match C{"1:1"}, but not C{"1:2"}.  Because this matches a
    previous literal, will also match the leading C{"1:1"} in C{"1:10"}.
    If this is not desired, use C{matchPreviousExpr}.
    Do I{not} use with packrat parsing enabled.
    c                sP   |rBt |Édkrà |d >  qLt|jÉ É}à tddÑ |D ÉÉ>  n
à tÉ >  d S )Nrr   r   c             s   s   | ]}t |ÉV  qd S )N)r   )rá   ⁄ttrw   rw   rx   râ   â  s    zDmatchPreviousLiteral.<locals>.copyTokenToRepeater.<locals>.<genexpr>)rÊ   rÊ  rÃ   r   r   )rå   rX  rv   ⁄tflat)⁄reprw   rx   ⁄copyTokenToRepeaterÇ  s    z1matchPreviousLiteral.<locals>.copyTokenToRepeaterT)rå  z(prev) )r   r¢  rê  rÜ   )rP  rÍ  rw   )rÈ  rx   rO   t  s
    
c                sF   t É â | jÉ }à |K â á fddÑ}| j|ddç à jdt| É É à S )aS  
    Helper to define an expression that is indirectly defined from
    the tokens matched in a previous expression, that is, it looks
    for a 'repeat' of a previous expression.  For example::
        first = Word(nums)
        second = matchPreviousExpr(first)
        matchExpr = first + ":" + second
    will match C{"1:1"}, but not C{"1:2"}.  Because this matches by
    expressions, will I{not} match the leading C{"1:1"} in C{"1:10"};
    the expressions are evaluated first, and then compared, so
    C{"1"} is compared with C{"10"}.
    Do I{not} use with packrat parsing enabled.
    c                s*   t |jÉ Éâ á fddÑ}àj|ddç d S )Nc                s$   t |jÉ É}|à kr tdddÉÇd S )Nrú   r   )rÊ  rÃ   r   )rå   rX  rv   ⁄theseTokens)⁄matchTokensrw   rx   ⁄mustMatchTheseTokens£  s    zLmatchPreviousExpr.<locals>.copyTokenToRepeater.<locals>.mustMatchTheseTokensT)rå  )rÊ  rÃ   rÅ   )rå   rX  rv   rÌ  )rÈ  )rÏ  rx   rÍ  °  s    z.matchPreviousExpr.<locals>.copyTokenToRepeaterT)rå  z(prev) )r   r⁄   r¢  rê  rÜ   )rP  ⁄e2rÍ  rw   )rÈ  rx   rN   ê  s    c             C   s>   xdD ]}| j |t| É} qW | j ddÉ} | j ddÉ} t| ÉS )Nz\^-]r'  z\nry  z\t)rè   ⁄_bslashrÜ   )rå   rü   rw   rw   rx   rU  ¨  s
    
rU  Tc       
         s   |rddÑ }ddÑ }t â nddÑ }ddÑ }tâ g }t| tÉrF| jÉ }n&t| tjÉr\t| É}ntj	dt
ddç |svtÉ S d	}xé|t|Éd
 k êr|| }xnt||d
 dÖ ÉD ]N\}}	||	|Ér–||| d
 = P q¨|||	Ér¨||| d
 = |j||	É |	}P q¨W |d
7 }q|W | êr®|êr®yht|Étdj|ÉÉkêrZtddjddÑ |D ÉÉ Éjdj|ÉÉS tdjddÑ |D ÉÉÉjdj|ÉÉS W n& tk
êr¶   tj	dt
ddç Y nX tá fddÑ|D ÉÉjdj|ÉÉS )a€  
    Helper to quickly define a set of alternative Literals, and makes sure to do
    longest-first testing when there is a conflict, regardless of the input order,
    but returns a C{L{MatchFirst}} for best performance.

    Parameters:
     - strs - a string of space-delimited literals, or a collection of string literals
     - caseless - (default=C{False}) - treat all literals as caseless
     - useRegex - (default=C{True}) - as an optimization, will generate a Regex
          object; otherwise, will generate a C{MatchFirst} object (if C{caseless=True}, or
          if creating a C{Regex} raises an exception)

    Example::
        comp_oper = oneOf("< = > <= >= !=")
        var = Word(alphas)
        number = Word(nums)
        term = var | number
        comparison_expr = term + comp_oper + term
        print(comparison_expr.searchString("B = 12  AA=23 B<=AA AA>12"))
    prints::
        [['B', '=', '12'], ['AA', '=', '23'], ['B', '<=', 'AA'], ['AA', '>', '12']]
    c             S   s   | j É |j É kS )N)r<  )r  ⁄brw   rw   rx   ry   Ã  s    zoneOf.<locals>.<lambda>c             S   s   |j É j| j É ÉS )N)r<  r9  )r  r  rw   rw   rx   ry   Õ  s    c             S   s   | |kS )Nrw   )r  r  rw   rw   rx   ry   –  s    c             S   s
   |j | ÉS )N)r9  )r  r  rw   rw   rx   ry   —  s    z6Invalid argument to oneOf, expected string or iterablerq   )rÌ  r   rr   Nrú   z[%s]c             s   s   | ]}t |ÉV  qd S )N)rU  )rá   ⁄symrw   rw   rx   râ   Ú  s    zoneOf.<locals>.<genexpr>z | ˙|c             s   s   | ]}t j|ÉV  qd S )N)rä  rW  )rá   rÒ  rw   rw   rx   râ   Ù  s    z7Exception creating Regex for oneOf, building MatchFirstc             3   s   | ]}à |ÉV  qd S )Nrw   )rá   rÒ  )⁄parseElementClassrw   rx   râ   ˚  s    )r   r   rz   rŸ   rç   r…  rç  r‘   rÓ  rÔ  r  r   rÊ   rÎ   r  r≤   r'   rê  ro  r   )
⁄strsr;  ⁄useRegex⁄isequal⁄masks⁄symbolsr√   ⁄currÔ   r  rw   )rÛ  rx   rS   ¥  sL    





((c             C   s   t tt| | ÉÉÉS )a‹  
    Helper to easily and clearly define a dictionary by specifying the respective patterns
    for the key and value.  Takes care of defining the C{L{Dict}}, C{L{ZeroOrMore}}, and C{L{Group}} tokens
    in the proper order.  The key pattern can include delimiting markers or punctuation,
    as long as they are suppressed, thereby leaving the significant key text.  The value
    pattern can include named results, so that the C{Dict} results can include named token
    fields.

    Example::
        text = "shape: SQUARE posn: upper left color: light blue texture: burlap"
        attr_expr = (label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        print(OneOrMore(attr_expr).parseString(text).dump())
        
        attr_label = label
        attr_value = Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join)

        # similar to Dict, but simpler call format
        result = dictOf(attr_label, attr_value).parseString(text)
        print(result.dump())
        print(result['shape'])
        print(result.shape)  # object attribute access works too
        print(result.asDict())
    prints::
        [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]
        - color: light blue
        - posn: upper left
        - shape: SQUARE
        - texture: burlap
        SQUARE
        SQUARE
        {'color': 'light blue', 'shape': 'SQUARE', 'posn': 'upper left', 'texture': 'burlap'}
    )r   r2   r   )r	  r   rw   rw   rx   rA   ˝  s    !c             C   s^   t É jddÑ É}|jÉ }d|_|dÉ|  |dÉ }|r@ddÑ }nddÑ }|j|É | j|_|S )	aç  
    Helper to return the original, untokenized text for a given expression.  Useful to
    restore the parsed fields of an HTML start tag into the raw tag text itself, or to
    revert separate tokens with intervening whitespace back to the original matching
    input text. By default, returns astring containing the original parsed text.  
       
    If the optional C{asString} argument is passed as C{False}, then the return value is a 
    C{L{ParseResults}} containing any results names that were originally matched, and a 
    single token containing the original matched text from the input string.  So if 
    the expression passed to C{L{originalTextFor}} contains expressions with defined
    results names, you must set C{asString} to C{False} if you want to preserve those
    results name values.

    Example::
        src = "this is test <b> bold <i>text</i> </b> normal text "
        for tag in ("b","i"):
            opener,closer = makeHTMLTags(tag)
            patt = originalTextFor(opener + SkipTo(closer) + closer)
            print(patt.searchString(src)[0])
    prints::
        ['<b> bold <i>text</i> </b>']
        ['<i>text</i>']
    c             S   s   |S )Nrw   )rå   r†   rv   rw   rw   rx   ry   8  s    z!originalTextFor.<locals>.<lambda>F⁄_original_start⁄_original_endc             S   s   | |j |jÖ S )N)r˙  r˚  )rå   rX  rv   rw   rw   rx   ry   =  s    c             S   s&   | |j dÉ|j dÉÖ g|d d Ö< d S )Nr˙  r˚  )r  )rå   rX  rv   rw   rw   rx   ⁄extractText?  s    z$originalTextFor.<locals>.extractText)r   rÅ   r⁄   rã  rÉ  )rP  ⁄asString⁄	locMarker⁄endlocMarker⁄	matchExprr¸  rw   rw   rx   rg      s    

c             C   s   t | ÉjddÑ ÉS )zp
    Helper to undo pyparsing's default grouping of And expressions, even
    if all but one are non-empty.
    c             S   s   | d S )Nr   rw   )rv   rw   rw   rx   ry   J  s    zungroup.<locals>.<lambda>)r-   rÅ   )rP  rw   rw   rx   rh   E  s    c             C   s4   t É jddÑ É}t|dÉ| dÉ |jÉ jÉ dÉ ÉS )a©  
    Helper to decorate a returned token with its starting and ending locations in the input string.
    This helper adds the following results names:
     - locn_start = location where matched expression begins
     - locn_end = location where matched expression ends
     - value = the actual parsed results

    Be careful if the input text contains C{<TAB>} characters, you may want to call
    C{L{ParserElement.parseWithTabs}}

    Example::
        wd = Word(alphas)
        for match in locatedExpr(wd).searchString("ljsdf123lksdjjf123lkkjj1222"):
            print(match)
    prints::
        [[0, 'ljsdf', 5]]
        [[8, 'lksdjjf', 15]]
        [[18, 'lkkjj', 23]]
    c             S   s   |S )Nrw   )rå   rX  rv   rw   rw   rx   ry   `  s    zlocatedExpr.<locals>.<lambda>Z
locn_startr   Zlocn_end)r   rÅ   r   r⁄   r  )rP  ⁄locatorrw   rw   rx   rj   L  s    z\[]-*.$+^?()~ )r[  c             C   s   |d d S )Nr   rr   rw   )rå   rX  rv   rw   rw   rx   ry   k  s    ry   z\\0?[xX][0-9a-fA-F]+c             C   s   t t|d jdÉdÉÉS )Nr   z\0xÈ   )⁄unichrru   ⁄lstrip)rå   rX  rv   rw   rw   rx   ry   l  s    z	\\0[0-7]+c             C   s   t t|d dd Ö dÉÉS )Nr   rr   È   )r  ru   )rå   rX  rv   rw   rw   rx   ry   m  s    z\])rL  r[  z\wrê  r  r%  Znegate⁄bodyr  c                sB   ddÑ â y dj á fddÑtj| ÉjD ÉÉS  tk
r<   dS X dS )a‹  
    Helper to easily define string ranges for use in Word construction.  Borrows
    syntax from regexp '[]' string range definitions::
        srange("[0-9]")   -> "0123456789"
        srange("[a-z]")   -> "abcdefghijklmnopqrstuvwxyz"
        srange("[a-z$_]") -> "abcdefghijklmnopqrstuvwxyz$_"
    The input string must be enclosed in []'s, and the returned string is the expanded
    character set joined into a single string.
    The values enclosed in the []'s may be:
     - a single character
     - an escaped character with a leading backslash (such as C{\-} or C{\]})
     - an escaped hex character with a leading C{'\x'} (C{\x21}, which is a C{'!'} character) 
         (C{\0x##} is also supported for backwards compatibility) 
     - an escaped octal character with a leading C{'\0'} (C{\041}, which is a C{'!'} character)
     - a range of any of the above, separated by a dash (C{'a-z'}, etc.)
     - any combination of the above (C{'aeiouy'}, C{'a-zA-Z0-9_$'}, etc.)
    c             S   s<   t | tÉs| S djddÑ tt| d Ét| d Éd ÉD ÉÉS )Nrú   c             s   s   | ]}t |ÉV  qd S )N)r  )rá   rü   rw   rw   rx   râ   Ñ  s    z+srange.<locals>.<lambda>.<locals>.<genexpr>r   rr   )rz   r"   r≤   rÁ   ⁄ord)⁄prw   rw   rx   ry   Ñ  s    zsrange.<locals>.<lambda>rú   c             3   s   | ]}à |ÉV  qd S )Nrw   )rá   ⁄part)⁄	_expandedrw   rx   râ   Ü  s    zsrange.<locals>.<genexpr>N)r≤   ⁄_reBracketExprr‹  r  ro  )rå   rw   )r
  rx   r_   r  s
     c                s   á fddÑ}|S )zt
    Helper method for defining parse actions that require matching at a specific
    column in the input text.
    c                s"   t || Éà krt| |dà  ÉÇd S )Nzmatched token not at column %d)r9   r   )rI  ⁄locnrT  )rÙ  rw   rx   ⁄	verifyColè  s    z!matchOnlyAtCol.<locals>.verifyColrw   )rÙ  r  rw   )rÙ  rx   rM   ä  s    c                s   á fddÑS )aπ  
    Helper method for common parse actions that simply return a literal value.  Especially
    useful when used with C{L{transformString<ParserElement.transformString>}()}.

    Example::
        num = Word(nums).setParseAction(lambda toks: int(toks[0]))
        na = oneOf("N/A NA").setParseAction(replaceWith(math.nan))
        term = na | num
        
        OneOrMore(term).parseString("324 234 N/A 234") # -> [324, 234, nan, 234]
    c                s   à gS )Nrw   )rå   rX  rv   )⁄replStrrw   rx   ry   †  s    zreplaceWith.<locals>.<lambda>rw   )r  rw   )r  rx   r\   î  s    c             C   s   |d ddÖ S )a  
    Helper parse action for removing quotation marks from parsed quoted strings.

    Example::
        # by default, quotation marks are included in parsed results
        quotedString.parseString("'Now is the Winter of our Discontent'") # -> ["'Now is the Winter of our Discontent'"]

        # use removeQuotes to strip quotation marks from parsed results
        quotedString.setParseAction(removeQuotes)
        quotedString.parseString("'Now is the Winter of our Discontent'") # -> ["Now is the Winter of our Discontent"]
    r   rr   rs   rw   )rå   rX  rv   rw   rw   rx   rZ   ¢  s    c                sN   á áfddÑ}yt àdt àdÉjÉ}W n tk
rB   tàÉ}Y nX ||_|S )aG  
    Helper to define a parse action by mapping a function to all elements of a ParseResults list.If any additional 
    args are passed, they are forwarded to the given function as additional arguments after
    the token, as in C{hex_integer = Word(hexnums).setParseAction(tokenMap(int, 16))}, which will convert the
    parsed data to an integer using base 16.

    Example (compare the last to example in L{ParserElement.transformString}::
        hex_ints = OneOrMore(Word(hexnums)).setParseAction(tokenMap(int, 16))
        hex_ints.runTests('''
            00 11 22 aa FF 0a 0d 1a
            ''')
        
        upperword = Word(alphas).setParseAction(tokenMap(str.upper))
        OneOrMore(upperword).runTests('''
            my kingdom for a horse
            ''')

        wd = Word(alphas).setParseAction(tokenMap(str.title))
        OneOrMore(wd).setParseAction(' '.join).runTests('''
            now is the winter of our discontent made glorious summer by this sun of york
            ''')
    prints::
        00 11 22 aa FF 0a 0d 1a
        [0, 17, 34, 170, 255, 10, 13, 26]

        my kingdom for a horse
        ['MY', 'KINGDOM', 'FOR', 'A', 'HORSE']

        now is the winter of our discontent made glorious summer by this sun of york
        ['Now Is The Winter Of Our Discontent Made Glorious Summer By This Sun Of York']
    c                s   á áfddÑ|D ÉS )Nc                s   g | ]}à|fà ûé ëqS rw   rw   )rá   ⁄tokn)r§   rY  rw   rx   rﬂ   —  s    z(tokenMap.<locals>.pa.<locals>.<listcomp>rw   )rå   rX  rv   )r§   rY  rw   rx   rß  –  s    ztokenMap.<locals>.paró   rl  )rn  ró   ro  r|   )rY  r§   rß  rr  rw   )r§   rY  rx   rm   ∞  s     c             C   s   t | ÉjÉ S )N)rÜ   r<  )rv   rw   rw   rx   ry   ‹  s    c             C   s   t | ÉjÉ S )N)rÜ   ⁄lower)rv   rw   rw   rx   ry   ﬂ  s    c             C   s¢  t | tÉr| }t| | dç} n| j}tttd É}|ròtjÉ j	t
É}tdÉ| dÉ ttt|tdÉ | ÉÉÉ tddgdçjd	Éj	d
dÑ É tdÉ }nÜdjddÑ tD ÉÉ}tjÉ j	t
Ét|ÉB }tdÉ| dÉ ttt|j	tÉttdÉ| É ÉÉÉ tddgdçjd	Éj	ddÑ É tdÉ }ttdÉ|  d É}|jddj|jddÉjÉ jÉ É Éjd| É}|jddj|jddÉjÉ jÉ É Éjd| É}||_||_||fS )zRInternal helper to construct opening and closing tag expressions, given a tag name)r;  z_-:r(  ⁄tag˙=˙/F)r  rC   c             S   s   |d dkS )Nr   r  rw   )rå   rX  rv   rw   rw   rx   ry   Ô  s    z_makeTags.<locals>.<lambda>r)  rú   c             s   s   | ]}|d kr|V  qdS )r)  Nrw   )rá   rü   rw   rw   rx   râ   Ò  s    z_makeTags.<locals>.<genexpr>c             S   s   |d dkS )Nr   r  rw   )rå   rX  rv   rw   rw   rx   ry   ˆ  s    z</rE  ˙:r$  z<%s>r\  z</%s>)rz   rŸ   r   rÀ   r/   r4   r3   r>   r⁄   rÅ   rZ   r+   r   r2   r   r   rï  r≤   rV   rY   rB   r
   ⁄_Lrè   ⁄titlerç   rê  r  )⁄tagStr⁄xml⁄resname⁄tagAttrName⁄tagAttrValue⁄openTag⁄printablesLessRAbrack⁄closeTagrw   rw   rx   ⁄	_makeTags‚  s"    
T\..r  c             C   s
   t | dÉS )a   
    Helper to construct opening and closing tag expressions for HTML, given a tag name. Matches
    tags in either upper or lower case, attributes with namespaces and with quoted or unquoted values.

    Example::
        text = '<td>More info at the <a href="http://pyparsing.wikispaces.com">pyparsing</a> wiki page</td>'
        # makeHTMLTags returns pyparsing expressions for the opening and closing tags as a 2-tuple
        a,a_end = makeHTMLTags("A")
        link_expr = a + SkipTo(a_end)("link_text") + a_end
        
        for link in link_expr.searchString(text):
            # attributes in the <A> tag (like "href" shown here) are also accessible as named results
            print(link.link_text, '->', link.href)
    prints::
        pyparsing -> http://pyparsing.wikispaces.com
    F)r  )r  rw   rw   rx   rK   ˇ  s    c             C   s
   t | dÉS )z∫
    Helper to construct opening and closing tag expressions for XML, given a tag name. Matches
    tags only in the given upper/lower case.

    Example: similar to L{makeHTMLTags}
    T)r  )r  rw   rw   rx   rL     s    c                 s8   | r| ddÖ â n|j É â ddÑ à D Éâ á fddÑ}|S )a<  
    Helper to create a validating parse action to be used with start tags created
    with C{L{makeXMLTags}} or C{L{makeHTMLTags}}. Use C{withAttribute} to qualify a starting tag
    with a required attribute value, to avoid false matches on common tags such as
    C{<TD>} or C{<DIV>}.

    Call C{withAttribute} with a series of attribute names and values. Specify the list
    of filter attributes names and values as:
     - keyword arguments, as in C{(align="right")}, or
     - as an explicit dict with C{**} operator, when an attribute name is also a Python
          reserved word, as in C{**{"class":"Customer", "align":"right"}}
     - a list of name-value tuples, as in ( ("ns1:class", "Customer"), ("ns2:align","right") )
    For attribute names with a namespace prefix, you must use the second form.  Attribute
    names are matched insensitive to upper/lower case.
       
    If just testing for C{class} (with or without a namespace), use C{L{withClass}}.

    To verify that the attribute exists, but without specifying a value, pass
    C{withAttribute.ANY_VALUE} as the value.

    Example::
        html = '''
            <div>
            Some text
            <div type="grid">1 4 0 1 0</div>
            <div type="graph">1,3 2,3 1,1</div>
            <div>this has no type</div>
            </div>
                
        '''
        div,div_end = makeHTMLTags("div")

        # only match div tag having a type attribute with value "grid"
        div_grid = div().setParseAction(withAttribute(type="grid"))
        grid_expr = div_grid + SkipTo(div | div_end)("body")
        for grid_header in grid_expr.searchString(html):
            print(grid_header.body)
        
        # construct a match with any div tag having a type attribute, regardless of the value
        div_any_type = div().setParseAction(withAttribute(type=withAttribute.ANY_VALUE))
        div_expr = div_any_type + SkipTo(div | div_end)("body")
        for div_header in div_expr.searchString(html):
            print(div_header.body)
    prints::
        1 4 0 1 0

        1 4 0 1 0
        1,3 2,3 1,1
    Nc             S   s   g | ]\}}||fëqS rw   rw   )rá   r„   rﬁ   rw   rw   rx   rﬂ   Q  s    z!withAttribute.<locals>.<listcomp>c                s^   xXà D ]P\}}||kr&t | |d| ÉÇ|tjkr|| |krt | |d||| |f ÉÇqW d S )Nzno matching attribute z+attribute '%s' has value '%s', must be '%s')r   re   ⁄	ANY_VALUE)rå   rX  r∑  ⁄attrName⁄	attrValue)⁄attrsrw   rx   rß  R  s    zwithAttribute.<locals>.pa)rÍ   )r§   ⁄attrDictrß  rw   )r#  rx   re     s    2c             C   s   |rd| nd}t f || iéS )a„  
    Simplified version of C{L{withAttribute}} when matching on a div class - made
    difficult because C{class} is a reserved word in Python.

    Example::
        html = '''
            <div>
            Some text
            <div class="grid">1 4 0 1 0</div>
            <div class="graph">1,3 2,3 1,1</div>
            <div>this &lt;div&gt; has no class</div>
            </div>
                
        '''
        div,div_end = makeHTMLTags("div")
        div_grid = div().setParseAction(withClass("grid"))
        
        grid_expr = div_grid + SkipTo(div | div_end)("body")
        for grid_header in grid_expr.searchString(html):
            print(grid_header.body)
        
        div_any_type = div().setParseAction(withClass(withAttribute.ANY_VALUE))
        div_expr = div_any_type + SkipTo(div | div_end)("body")
        for div_header in div_expr.searchString(html):
            print(div_header.body)
    prints::
        1 4 0 1 0

        1 4 0 1 0
        1,3 2,3 1,1
    z%s:class⁄class)re   )⁄	classname⁄	namespace⁄	classattrrw   rw   rx   rk   \  s     ˙(rj  c             C   sÜ  t É }| || | B }êx`t|ÉD ê]R\}}|d ddÖ \}}	}
}|	dk rTd| nd| }|	dkrà|dksxt|ÉdkrÄtdÉÇ|\}}t É j|É}|
tjkêrd|	dkr∆t|| Ét|t	|É É }nú|	dkêr|dk	êr t|| | Ét|t	|| É É }nt|| Ét|t	|É É }nD|	dkêrZt|| | | | Ét|| | | | É }ntd	ÉÇnÏ|
tj
kêrH|	dkêr™t|tÉêsét|É}t|j| Ét|| É }nú|	dkêr|dk	êr‰t|| | Ét|t	|| É É }nt|| Ét|t	|É É }nD|	dkêr>t|| | | | Ét|| | | | É }ntd	ÉÇntd
ÉÇ|êr`|j|É ||j|É|B K }|}q"W ||K }|S )aú	  
    Helper method for constructing grammars of expressions made up of
    operators working in a precedence hierarchy.  Operators may be unary or
    binary, left- or right-associative.  Parse actions can also be attached
    to operator expressions. The generated parser will also recognize the use 
    of parentheses to override operator precedences (see example below).
    
    Note: if you define a deep operator list, you may see performance issues
    when using infixNotation. See L{ParserElement.enablePackrat} for a
    mechanism to potentially improve your parser performance.

    Parameters:
     - baseExpr - expression representing the most basic element for the nested
     - opList - list of tuples, one for each operator precedence level in the
      expression grammar; each tuple is of the form
      (opExpr, numTerms, rightLeftAssoc, parseAction), where:
       - opExpr is the pyparsing expression for the operator;
          may also be a string, which will be converted to a Literal;
          if numTerms is 3, opExpr is a tuple of two expressions, for the
          two operators separating the 3 terms
       - numTerms is the number of terms for this operator (must
          be 1, 2, or 3)
       - rightLeftAssoc is the indicator whether the operator is
          right or left associative, using the pyparsing-defined
          constants C{opAssoc.RIGHT} and C{opAssoc.LEFT}.
       - parseAction is the parse action to be associated with
          expressions matching this operator expression (the
          parse action tuple member may be omitted)
     - lpar - expression for matching left-parentheses (default=C{Suppress('(')})
     - rpar - expression for matching right-parentheses (default=C{Suppress(')')})

    Example::
        # simple example of four-function arithmetic with ints and variable names
        integer = pyparsing_common.signed_integer
        varname = pyparsing_common.identifier 
        
        arith_expr = infixNotation(integer | varname,
            [
            ('-', 1, opAssoc.RIGHT),
            (oneOf('* /'), 2, opAssoc.LEFT),
            (oneOf('+ -'), 2, opAssoc.LEFT),
            ])
        
        arith_expr.runTests('''
            5+3*6
            (5+3)*6
            -2--11
            ''', fullDump=False)
    prints::
        5+3*6
        [[5, '+', [3, '*', 6]]]

        (5+3)*6
        [[[5, '+', 3], '*', 6]]

        -2--11
        [[['-', 2], '-', ['-', 11]]]
    Nr`  ro   z%s termz	%s%s termrq   z@if numterms=3, opExpr must be a tuple or list of two expressionsrr   z6operator must be unary (1), binary (2), or ternary (3)z2operator must indicate right or left associativity)N)r   rÎ   rÊ   r˜  rê  rT   ⁄LEFTr   r   r   ⁄RIGHTrz   r   rP  rÅ   )⁄baseExpr⁄opList⁄lpar⁄rparrÑ   ⁄lastExprr√   ⁄operDef⁄opExpr⁄arity⁄rightLeftAssocrß  ⁄termName⁄opExpr1⁄opExpr2⁄thisExprr   rw   rw   rx   ri   É  sR    ;

&




&


z4"(?:[^"\n\r\\]|(?:"")|(?:\\(?:[^x]|x[0-9a-fA-F]+)))*˙"z string enclosed in double quotesz4'(?:[^'\n\r\\]|(?:'')|(?:\\(?:[^x]|x[0-9a-fA-F]+)))*˙'z string enclosed in single quotesz*quotedString using single or double quotes⁄uzunicode string literalc             C   sú  | |krt dÉÇ|dkêr(t| tÉo,t|tÉêr t| Édkr¶t|Édkr¶|dk	rÄtt| t| | tj ddç ÉÉj	ddÑ É}n$t
jÉ t| | tj Éj	ddÑ É }nx|dk	rÍtt| t| É  t|É  ttjddç ÉÉj	ddÑ É}n4ttt| É t|É  ttjddç ÉÉj	d	dÑ É}nt d
ÉÇtÉ }|dk	êrb|tt| Ét||B |B É t|É ÉK }n$|tt| Ét||B É t|É ÉK }|jd| |f É |S )a~	  
    Helper method for defining nested lists enclosed in opening and closing
    delimiters ("(" and ")" are the default).

    Parameters:
     - opener - opening character for a nested list (default=C{"("}); can also be a pyparsing expression
     - closer - closing character for a nested list (default=C{")"}); can also be a pyparsing expression
     - content - expression for items within the nested lists (default=C{None})
     - ignoreExpr - expression for ignoring opening and closing delimiters (default=C{quotedString})

    If an expression is not provided for the content argument, the nested
    expression will capture all whitespace-delimited content between delimiters
    as a list of separate values.

    Use the C{ignoreExpr} argument to define expressions that may contain
    opening or closing characters that should not be treated as opening
    or closing characters for nesting, such as quotedString or a comment
    expression.  Specify multiple expressions using an C{L{Or}} or C{L{MatchFirst}}.
    The default is L{quotedString}, but if no expressions are to be ignored,
    then pass C{None} for this argument.

    Example::
        data_type = oneOf("void int short long char float double")
        decl_data_type = Combine(data_type + Optional(Word('*')))
        ident = Word(alphas+'_', alphanums+'_')
        number = pyparsing_common.number
        arg = Group(decl_data_type + ident)
        LPAR,RPAR = map(Suppress, "()")

        code_body = nestedExpr('{', '}', ignoreExpr=(quotedString | cStyleComment))

        c_function = (decl_data_type("type") 
                      + ident("name")
                      + LPAR + Optional(delimitedList(arg), [])("args") + RPAR 
                      + code_body("body"))
        c_function.ignore(cStyleComment)
        
        source_code = '''
            int is_odd(int x) { 
                return (x%2); 
            }
                
            int dec_to_hex(char hchar) { 
                if (hchar >= '0' && hchar <= '9') { 
                    return (ord(hchar)-ord('0')); 
                } else { 
                    return (10+ord(hchar)-ord('A'));
                } 
            }
        '''
        for func in c_function.searchString(source_code):
            print("%(name)s (%(type)s) args: %(args)s" % func)

    prints::
        is_odd (int) args: [['int', 'x']]
        dec_to_hex (int) args: [['char', 'hchar']]
    z.opening and closing strings cannot be the sameNrr   )r[  c             S   s   | d j É S )Nr   )r≥   )rv   rw   rw   rx   ry   9  s    znestedExpr.<locals>.<lambda>c             S   s   | d j É S )Nr   )r≥   )rv   rw   rw   rx   ry   <  s    c             S   s   | d j É S )Nr   )r≥   )rv   rw   rw   rx   ry   B  s    c             S   s   | d j É S )Nr   )r≥   )rv   rw   rw   rx   ry   F  s    zOopening and closing arguments must be strings if no content expression is givenznested %s%s expression)r˜  rz   rŸ   rÊ   r
   r   r	   r$   rt  rÅ   rC   r⁄   r   r   r   r+   r2   rê  )⁄opener⁄closer⁄contentr¿  rÑ   rw   rw   rx   rP   ˜  s4    :

*$c                s‰   á fddÑ}á fddÑ}á fddÑ}t tÉ jdÉjÉ É}tÉ tÉ j|É jdÉ}tÉ j|Éjd	É}tÉ j|Éjd
É}	|r¶tt|É| t |t| É t|É É |	 É}
n$tt|Ét |t| É t|É É É}
| j	t
tÉ  É |
jdÉS )a
	  
    Helper method for defining space-delimited indentation blocks, such as
    those used to define block statements in Python source code.

    Parameters:
     - blockStatementExpr - expression defining syntax of statement that
            is repeated within the indented block
     - indentStack - list created by caller to manage indentation stack
            (multiple statementWithIndentedBlock expressions within a single grammar
            should share a common indentStack)
     - indent - boolean indicating whether block must be indented beyond the
            the current level; set to False for block of left-most statements
            (default=C{True})

    A valid block must contain at least one C{blockStatement}.

    Example::
        data = '''
        def A(z):
          A1
          B = 100
          G = A2
          A2
          A3
        B
        def BB(a,b,c):
          BB1
          def BBA():
            bba1
            bba2
            bba3
        C
        D
        def spam(x,y):
             def eggs(z):
                 pass
        '''


        indentStack = [1]
        stmt = Forward()

        identifier = Word(alphas, alphanums)
        funcDecl = ("def" + identifier + Group( "(" + Optional( delimitedList(identifier) ) + ")" ) + ":")
        func_body = indentedBlock(stmt, indentStack)
        funcDef = Group( funcDecl + func_body )

        rvalue = Forward()
        funcCall = Group(identifier + "(" + Optional(delimitedList(rvalue)) + ")")
        rvalue << (funcCall | identifier | Word(nums))
        assignment = Group(identifier + "=" + rvalue)
        stmt << ( funcDef | assignment | identifier )

        module_body = OneOrMore(stmt)

        parseTree = module_body.parseString(data)
        parseTree.pprint()
    prints::
        [['def',
          'A',
          ['(', 'z', ')'],
          ':',
          [['A1'], [['B', '=', '100']], [['G', '=', 'A2']], ['A2'], ['A3']]],
         'B',
         ['def',
          'BB',
          ['(', 'a', 'b', 'c', ')'],
          ':',
          [['BB1'], [['def', 'BBA', ['(', ')'], ':', [['bba1'], ['bba2'], ['bba3']]]]]],
         'C',
         'D',
         ['def',
          'spam',
          ['(', 'x', 'y', ')'],
          ':',
          [[['def', 'eggs', ['(', 'z', ')'], ':', [['pass']]]]]]] 
    c                sN   |t | Ékrd S t|| É}|à d krJ|à d kr>t| |dÉÇt| |dÉÇd S )Nrr   zillegal nestingznot a peer entryrs   rs   )rÊ   r9   r!   r   )rå   rX  rv   ⁄curCol)⁄indentStackrw   rx   ⁄checkPeerIndentü  s     
z&indentedBlock.<locals>.checkPeerIndentc                s2   t || É}|à d kr"à j|É nt| |dÉÇd S )Nrr   znot a subentryrs   )r9   r  r   )rå   rX  rv   r?  )r@  rw   rx   ⁄checkSubIndentß  s    
z%indentedBlock.<locals>.checkSubIndentc                sN   |t | Ékrd S t|| É}à o4|à d k o4|à d ksBt| |dÉÇà jÉ  d S )Nrr   rq   znot an unindentrs   r]  )rÊ   r9   r   r  )rå   rX  rv   r?  )r@  rw   rx   ⁄checkUnindentÆ  s     
z$indentedBlock.<locals>.checkUnindentz	 ⁄INDENTrú   ZUNINDENTzindented block)r   r   r  r  r   rÅ   rê  r   r   r  rÔ  )⁄blockStatementExprr@  r-  rA  rB  rC  r@  rD  ⁄PEER⁄UNDENT⁄smExprrw   )r@  rx   rf   Q  s    N,z#[\0xc0-\0xd6\0xd8-\0xf6\0xf8-\0xff]z[\0xa1-\0xbf\0xd7\0xf7]z_:zany tagzgt lt amp nbsp quot aposz><& "'z&(?P<entity>rÚ  z);zcommon HTML entityc             C   s   t j| jÉS )zRHelper parser action to replace common HTML entities with their special characters)⁄_htmlEntityMapr·   ⁄entity)rv   rw   rw   rx   r[   …  s    z/\*(?:[^*]|\*(?!/))*z*/zC style commentz<!--[\s\S]*?-->zHTML commentz.*zrest of linez//(?:\\\n|[^\n])*z
// commentzC++ style commentz#.*zPython style comment)rL  z 	⁄	commaItem)r  c               @   s®  e Zd ZdZeeÉZeeÉZe	e
ÉjdÉjeÉZe	eÉjdÉjeedÉÉZedÉjdÉjeÉZeÉ jeÉd eÉ jeÉ jdÉZejd	d
Ñ É eeeedÉjÉ e É B jdÉZejeÉ edÉjdÉjeÉZedÉjdÉjeÉZeeB eB jÉ ZedÉjdÉjeÉZe	ed ed ÉjdÉZedÉjdÉZ edÉjdÉZ!e!de! d  jdÉZ"ee!de! d>  Éd ee!de! d?  É jdÉZ#e#j$d d
Ñ É d!e  jd"ÉZ%e&e"e%B e#B jd#ÉÉjd#ÉZ'ed$Éjd%ÉZ(e)d@d'd(ÑÉZ*e)dAd*d+ÑÉZ+ed,Éjd-ÉZ,ed.Éjd/ÉZ-ed0Éjd1ÉZ.e/jÉ e0jÉ B Z1e)d2d3Ñ ÉZ2e&e3e4d4É e5É   e	e6d4d5ç ee7d6ÉÉ ÉÉjÉ jd7ÉZ8e9ee:j;É e8B d8d9çÉjd:ÉZ<e)ed;d
Ñ ÉÉZ=e)ed<d
Ñ ÉÉZ>d=S )Brn   aÆ
  
    Here are some common low-level expressions that may be useful in jump-starting parser development:
     - numeric forms (L{integers<integer>}, L{reals<real>}, L{scientific notation<sci_real>})
     - common L{programming identifiers<identifier>}
     - network addresses (L{MAC<mac_address>}, L{IPv4<ipv4_address>}, L{IPv6<ipv6_address>})
     - ISO8601 L{dates<iso8601_date>} and L{datetime<iso8601_datetime>}
     - L{UUID<uuid>}
     - L{comma-separated list<comma_separated_list>}
    Parse actions:
     - C{L{convertToInteger}}
     - C{L{convertToFloat}}
     - C{L{convertToDate}}
     - C{L{convertToDatetime}}
     - C{L{stripHTMLTags}}
     - C{L{upcaseTokens}}
     - C{L{downcaseTokens}}

    Example::
        pyparsing_common.number.runTests('''
            # any int or real number, returned as the appropriate type
            100
            -100
            +100
            3.14159
            6.02e23
            1e-12
            ''')

        pyparsing_common.fnumber.runTests('''
            # any int or real number, returned as float
            100
            -100
            +100
            3.14159
            6.02e23
            1e-12
            ''')

        pyparsing_common.hex_integer.runTests('''
            # hex numbers
            100
            FF
            ''')

        pyparsing_common.fraction.runTests('''
            # fractions
            1/2
            -3/4
            ''')

        pyparsing_common.mixed_integer.runTests('''
            # mixed fractions
            1
            1/2
            -3/4
            1-3/4
            ''')

        import uuid
        pyparsing_common.uuid.setParseAction(tokenMap(uuid.UUID))
        pyparsing_common.uuid.runTests('''
            # uuid
            12345678-1234-5678-1234-567812345678
            ''')
    prints::
        # any int or real number, returned as the appropriate type
        100
        [100]

        -100
        [-100]

        +100
        [100]

        3.14159
        [3.14159]

        6.02e23
        [6.02e+23]

        1e-12
        [1e-12]

        # any int or real number, returned as float
        100
        [100.0]

        -100
        [-100.0]

        +100
        [100.0]

        3.14159
        [3.14159]

        6.02e23
        [6.02e+23]

        1e-12
        [1e-12]

        # hex numbers
        100
        [256]

        FF
        [255]

        # fractions
        1/2
        [0.5]

        -3/4
        [-0.75]

        # mixed fractions
        1
        [1]

        1/2
        [0.5]

        -3/4
        [-0.75]

        1-3/4
        [1.75]

        # uuid
        12345678-1234-5678-1234-567812345678
        [UUID('12345678-1234-5678-1234-567812345678')]
    ⁄integerzhex integerr  z[+-]?\d+zsigned integerr  ⁄fractionc             C   s   | d | d  S )Nr   rr   rs   rw   )rv   rw   rw   rx   ry   Ü  s    zpyparsing_common.<lambda>rê  z"fraction or mixed integer-fractionz[+-]?\d+\.\d*zreal numberz+[+-]?\d+([eE][+-]?\d+|\.\d*([eE][+-]?\d+)?)z$real number with scientific notationz[+-]?\d+\.?\d*([eE][+-]?\d+)?⁄fnumberrù  ⁄
identifierzK(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})){3}zIPv4 addressz[0-9a-fA-F]{1,4}⁄hex_integerr  È   zfull IPv6 addressr   rf  z::zshort IPv6 addressc             C   s   t ddÑ | D ÉÉdk S )Nc             s   s   | ]}t jj|Érd V  qdS )rr   N)rn   ⁄
_ipv6_partr·  )rá   rÁ  rw   rw   rx   râ   ¢  s    z,pyparsing_common.<lambda>.<locals>.<genexpr>r  )r®  )rv   rw   rw   rx   ry   ¢  s    z::ffff:zmixed IPv6 addresszIPv6 addressz:[0-9a-fA-F]{2}([:.-])[0-9a-fA-F]{2}(?:\1[0-9a-fA-F]{2}){4}zMAC address˙%Y-%m-%dc                s   á fddÑ}|S )aÿ  
        Helper to create a parse action for converting parsed date string to Python datetime.date

        Params -
         - fmt - format to be passed to datetime.strptime (default=C{"%Y-%m-%d"})

        Example::
            date_expr = pyparsing_common.iso8601_date.copy()
            date_expr.setParseAction(pyparsing_common.convertToDate())
            print(date_expr.parseString("1999-12-31"))
        prints::
            [datetime.date(1999, 12, 31)]
        c                sL   yt j|d à ÉjÉ S  tk
rF } zt| |t|ÉÉÇW Y d d }~X nX d S )Nr   )r   ⁄strptime⁄dater˜  r   r|   )rå   rX  rv   ⁄ve)⁄fmtrw   rx   ⁄cvt_fnπ  s    z.pyparsing_common.convertToDate.<locals>.cvt_fnrw   )rW  rX  rw   )rW  rx   ⁄convertToDate™  s    zpyparsing_common.convertToDate˙%Y-%m-%dT%H:%M:%S.%fc                s   á fddÑ}|S )a  
        Helper to create a parse action for converting parsed datetime string to Python datetime.datetime

        Params -
         - fmt - format to be passed to datetime.strptime (default=C{"%Y-%m-%dT%H:%M:%S.%f"})

        Example::
            dt_expr = pyparsing_common.iso8601_datetime.copy()
            dt_expr.setParseAction(pyparsing_common.convertToDatetime())
            print(dt_expr.parseString("1999-12-31T23:59:59.999"))
        prints::
            [datetime.datetime(1999, 12, 31, 23, 59, 59, 999000)]
        c                sH   yt j|d à ÉS  tk
rB } zt| |t|ÉÉÇW Y d d }~X nX d S )Nr   )r   rT  r˜  r   r|   )rå   rX  rv   rV  )rW  rw   rx   rX  œ  s    z2pyparsing_common.convertToDatetime.<locals>.cvt_fnrw   )rW  rX  rw   )rW  rx   ⁄convertToDatetime¿  s    z"pyparsing_common.convertToDatetimez7(?P<year>\d{4})(?:-(?P<month>\d\d)(?:-(?P<day>\d\d))?)?zISO8601 datezÜ(?P<year>\d{4})-(?P<month>\d\d)-(?P<day>\d\d)[T ](?P<hour>\d\d):(?P<minute>\d\d)(:(?P<second>\d\d(\.\d*)?)?)?(?P<tz>Z|[+-]\d\d:?\d\d)?zISO8601 datetimez2[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}⁄UUIDc             C   s   t jj|d ÉS )a  
        Parse action to remove HTML tags from web page HTML source

        Example::
            # strip HTML links from normal text 
            text = '<td>More info at the <a href="http://pyparsing.wikispaces.com">pyparsing</a> wiki page</td>'
            td,td_end = makeHTMLTags("TD")
            table_text = td + SkipTo(td_end).setParseAction(pyparsing_common.stripHTMLTags)("body") + td_end
            
            print(table_text.parseString(text).body) # -> 'More info at the pyparsing wiki page'
        r   )rn   ⁄_html_stripperrÇ   )rå   rX  r∑  rw   rw   rx   ⁄stripHTMLTags‡  s    zpyparsing_common.stripHTMLTagsrﬂ  )rL  z 	rK  rú   )r  zcomma separated listc             C   s   t | ÉjÉ S )N)rÜ   r<  )rv   rw   rw   rx   ry   Ù  s    c             C   s   t | ÉjÉ S )N)rÜ   r  )rv   rw   rw   rx   ry   ˜  s    N)r   rf  )r   rf  )rS  )rZ  )?ró   rò   rô   rª   rm   ru   ⁄convertToInteger⁄float⁄convertToFloatr/   rR   rê  rÅ   rL  rD   rP  r'   ⁄signed_integerrM  r¢  r   r  ⁄mixed_integerr®  ⁄real⁄sci_realr◊  ⁄numberrN  r4   r3   rO  ⁄ipv4_addressrR  ⁄_full_ipv6_address⁄_short_ipv6_addressr®  ⁄_mixed_ipv6_addressr
   ⁄ipv6_address⁄mac_addressr2  rY  r[  ⁄iso8601_date⁄iso8601_datetime⁄uuidr7   r6   r]  r^  r   r   r   rV   r.   ⁄_commasepitemr@   rY   r⁄   ⁄comma_separated_listrd   rB   rw   rw   rw   rx   rn   È  sN    ""
28⁄__main__⁄select⁄fromz_$rŸ  )r·  ⁄columnsrë  Ztables⁄commandaK  
        # '*' as column list and dotted table name
        select * from SYS.XYZZY

        # caseless match on "SELECT", and casts back to "select"
        SELECT * from XYZZY, ABC

        # list of column names, and mixed case SELECT keyword
        Select AA,BB,CC from Sys.dual

        # multiple tables
        Select A, B, C from Sys.dual, Table2

        # invalid SELECT keyword - should fail
        Xelect A, B, C from Sys.dual

        # incomplete command - should fail
        Select

        # invalid column name - should fail
        Select ^^^ frox Sys.dual

        z]
        100
        -100
        +100
        3.14159
        6.02e23
        1e-12
        z 
        100
        FF
        z6
        12345678-1234-5678-1234-567812345678
        )rq   )rﬂ  F)N)FT)T)rú   )T)‚rª   ⁄__version__⁄__versionTime__⁄
__author__rù   ⁄weakrefr   r‚   r⁄   r   rÓ  rä  rd  r…  rA  r_  r¿  r   ⁄_threadr   ⁄ImportError⁄	threadingr   r≈  ⁄ordereddict⁄__all__rˆ  ⁄version_infor^  r%  ⁄maxsizer3  r|   rŸ   ⁄chrr  rÜ   r®  rÊ   r;  ⁄reversedr‘   rø  r=  ré  rY  rZ  rm  ⁄maxint⁄xrangerÁ   ⁄__builtin__rç   ⁄fnamer  rn  r¨   rπ   r÷   rï   r«   rñ   ⁄ascii_uppercase⁄ascii_lowercaser4   rR   rD   r3   rÔ  r≤   ⁄	printablerV   ro  r   r   r!   r#   r&   rø   r"   ⁄MutableMapping⁄registerr9   rJ   rG   rQ  rU  rW  rQ   rs  r$   r,   r   r   r   r  rw  r   r   r   rl   r/   r'   r%   r	   r.   rÜ  r   r   r   r*   r)   r1   r0   r    r   r   r   r   r   r   r   r¥  r   r2   ræ  rø  r   r(   r   rÕ  r-   r
   r   r   r+   r   rb   r@   r<   rÊ  rO   rN   rU  rS   rA   rg   rh   rj   rê  rC   rI   rH   ra   r`   rÅ   ⁄_escapedPunc⁄_escapedHexChar⁄_escapedOctChar⁄UNICODE⁄_singleChar⁄
_charRangerï  r  r_   rM   r\   rZ   rm   rd   rB   r  rK   rL   re   r   rk   rT   r*  r+  ri   rU   r>   r^   rY   rc   rP   rf   r5   rW   r7   r6   r◊   ré   rI  r˛   r;   r[   r8   rE   r  r]   r?   r=   rF   rX   r◊  rp  r:   rn   ró   ⁄selectToken⁄	fromToken⁄ident⁄
columnName⁄columnNameList⁄
columnSpec⁄	tableName⁄tableNameList⁄	simpleSQLr1  rf  rN  rP  ro  r\  rw   rw   rw   rx   ⁄<module>=   s‡  









8
     
@         d&A=  I 
G3pLOD|M &#@sQ,A,	I#%&0
,	?#kZr

 (
 0   


"„            I   @   sr  d Z ddlmZ ddlZddlZddlZddlZddlZdZdZ	ej
d dkZej
d dkZej
ddÖ êdzkZerñefZefZefZeZeZejZnÑefZeefZeejfZeZeZejjd	ÉrŒeêd|ÉZnLG ddÑ deÉZ ye!e É É W n  e"k
êr   eêd~ÉZY nX eêdÄÉZ[ ddÑ Z#ddÑ Z$G ddÑ deÉZ%G ddÑ de%ÉZ&G ddÑ dej'ÉZ(G ddÑ de%ÉZ)G ddÑ deÉZ*e*e+ÉZ,G ddÑ de(ÉZ-e)ddd d!Ée)d"d#d$d%d"Ée)d&d#d#d'd&Ée)d(d)d$d*d(Ée)d+d)d,Ée)d-d#d$d.d-Ée)d/d0d0d1d/Ée)d2d0d0d/d2Ée)d3d)d$d4d3Ée)d5d)eêrd6nd7d8Ée)d9d)d:Ée)d;d<d=d>Ée)d!d!d Ée)d?d?d@Ée)dAdAd@Ée)dBdBd@Ée)d4d)d$d4d3Ée)dCd#d$dDdCÉe)dEd#d#dFdEÉe&d$d)Ée&dGdHÉe&dIdJÉe&dKdLdMÉe&dNdOdNÉe&dPdQdRÉe&dSdTdUÉe&dVdWdXÉe&dYdZd[Ée&d\d]d^Ée&d_d`daÉe&dbdcddÉe&dedfdgÉe&dhdidjÉe&dkdkdlÉe&dmdmdlÉe&dndndlÉe&dododpÉe&dqdrÉe&dsdtÉe&dudvÉe&dwdxdwÉe&dydzÉe&d{d|d}Ée&d~ddÄÉe&dÅdÇdÉÉe&dÑdÖdÜÉe&dádàdâÉe&dädãdåÉe&dçdédèÉe&dêdëdíÉe&dìdîdïÉe&dñdódòÉe&dôdödÄÉe&dõdúdùÉe&dûdüd†Ée&d°d¢dÜÉe&d£e+d§ d•Ée&d¶e+dß d®Ée&d©e+d™ e+d™ Ée&d´d¨d≠Ée&dÆdØd∞Ée&d±d≤d≥Ég>Z.ejd¥kêrZe.e&dµd∂Ég7 Z.x:e.D ]2Z/e0e-e/j1e/É e2e/e&Éêr`e,j3e/d∑e/j1 É êq`W [/e.e-_.e-e+d∏ ÉZ4e,j3e4dπÉ G d∫dªÑ dªe(ÉZ5e)dºdΩd•Ée)dædΩd•Ée)dødΩd•Ée)d¿dΩd•Ée)d¡dΩd•Ée)d¬dΩd•Ée)dΩdΩd•Ée)d√dΩd•Ée)dƒdΩd•Ée)d≈dΩd•Ée)d>d©d•Ée)d∆d©d•Ée)d«d©d•Ée)d»d©d•Ée)d…d©d•Ée)d d©d•Ée)dÀd©d•Ée)dÃd©d•Ée)dÕdΩd•Ée)dŒdΩd•Ée)dœdΩd•Ée)d–dΩd•Ée)d—dΩd•ÉgZ6xe6D ]Z/e0e5e/j1e/É êq∂W [/e6e5_.e,j3e5e+d§ Éd“d”É G d‘d’Ñ d’e(ÉZ7e)d÷d◊d®Ée)dÿd◊d®Ée)dŸd©d®ÉgZ8xe8D ]Z/e0e7e/j1e/É êq$W [/e8e7_.e,j3e7e+d⁄ Éd€d‹É G d›dﬁÑ dﬁe(ÉZ9e)dﬂd◊d‡Ée)d·d◊d‡Ée)d‚d◊d‡Ée)d„d©d‡Ée)d‰d©d‡Ée)dÂd©d‡Ée)dÊd◊d‡Ée)dÁd◊d‡Ée)dËd◊d‡Ée)dÈd◊d‡Ée)dÍd◊d‡Ée)dÎd◊d‡Ée)dÏd◊d‡Ée)dÌd◊d‡Ée)dÓd◊d‡Ée)dÔd◊d‡Ée)dd◊d‡Ée)dÒd◊d‡Ée)dÚd◊d‡Ée)dÛd◊d‡Ée)dÙd◊d‡Ée)dıd◊d‡Ée)dˆd◊d‡Ée)d˜d◊d‡Ée)d¯d◊d‡Ée)d˘d◊d‡Ée)d˙d◊d‡Ée)d˚d◊d‡Ée)d¸d©d‡Ée)d˝d©d‡Ée)d˛d©d‡Ée)dˇd©d‡Ée)êd d©d‡Ég!Z:xe:D ]Z/e0e9e/j1e/É êq¿W [/e:e9_.e,j3e9e+êd ÉêdêdÉ G êdêdÑ êde(ÉZ;e)êdd©êdÉe)êdd©êdÉe)êd	d©êdÉe)êd
d©êdÉgZ<xe<D ]Z/e0e;e/j1e/É êqTW [/e<e;_.e,j3e;e+êd ÉêdêdÉ G êdêdÑ êde(ÉZ=e)êdd¨d≠ÉgZ>xe>D ]Z/e0e=e/j1e/É êqºW [/e>e=_.e,j3e=e+êd ÉêdêdÉ G êdêdÑ êdej'ÉZ?e,j3e?e+d™ ÉêdÉ êdêdÑ Z@êdêdÑ ZAeê	rjêdZBêdZCêdZDêdZEêdZFêd ZGn$êd!ZBêd"ZCêd#ZDêd$ZEêd%ZFêd&ZGyeHZIW n" eJk
ê	r∏   êd'êd(Ñ ZIY nX eIZHyeKZKW n" eJk
ê	rË   êd)êd*Ñ ZKY nX eê
rêd+êd,Ñ ZLejMZNêd-êd.Ñ ZOeZPn>êd/êd,Ñ ZLêd0êd1Ñ ZNêd2êd.Ñ ZOG êd3êd4Ñ êd4eÉZPeKZKe#eLêd5É ejQeBÉZRejQeCÉZSejQeDÉZTejQeEÉZUejQeFÉZVejQeGÉZWeê
rˆêd6êd7Ñ ZXêd8êd9Ñ ZYêd:êd;Ñ ZZêd<êd=Ñ Z[ej\êd>ÉZ]ej\êd?ÉZ^ej\êd@ÉZ_nTêdAêd7Ñ ZXêdBêd9Ñ ZYêdCêd;Ñ ZZêdDêd=Ñ Z[ej\êdEÉZ]ej\êdFÉZ^ej\êdGÉZ_e#eXêdHÉ e#eYêdIÉ e#eZêdJÉ e#e[êdKÉ eêrêdLêdMÑ Z`êdNêdOÑ ZaebZcddldZdedjeêdPÉjfZg[dejhdÉZiejjZkelZmddlnZnenjoZoenjpZpêdQZqej
d
 d
kêr êdRZrêdSZsnêdTZrêdUZsnjêdVêdMÑ Z`êdWêdOÑ ZaecZcebZgêdXêdYÑ ZiêdZêd[Ñ ZkejtejuevÉZmddloZoeojo ZoZpêd\ZqêdRZrêdSZse#e`êd]É e#eaêd^É êd_êdQÑ Zwêd`êdTÑ ZxêdaêdUÑ Zyeêr⁄eze4j{êdbÉZ|êdÅêdcêddÑZ}nêdÇêdeêdfÑZ|e|êdgÉ ej
ddÖ êdÉkêre|êdhÉ n.ej
ddÖ êdÑkêr8e|êdiÉ nêdjêdkÑ Z~eze4j{êdldÉZedkêrjêdmêdnÑ Zej
ddÖ êdÖk êrêeZÄêdoêdnÑ Ze#e}êdpÉ ej
ddÖ êdÜk êr ejÅejÇfêdqêdrÑZÉnejÉZÉêdsêdtÑ ZÑêduêdvÑ ZÖêdwêdxÑ ZÜg Záe+ZàeâÉ jäêdyÉdk	êrg eã_åejçêrbx>eéejçÉD ]0\ZèZêeeêÉj+dkêr*eêj1e+kêr*ejçeè= P êq*W [è[êejçjëe,É dS (á  z6Utilities for writing code that runs on Python 2 and 3È    )⁄absolute_importNz'Benjamin Peterson <benjamin@python.org>z1.10.0È   È   È   ⁄javaÈ   È   c               @   s   e Zd ZddÑ ZdS )⁄Xc             C   s   dS )Nr   r   l        © )⁄selfr
   r
   ˙;/usr/lib/python3/dist-packages/pkg_resources/_vendor/six.py⁄__len__>   s    z	X.__len__N)⁄__name__⁄
__module__⁄__qualname__r   r
   r
   r
   r   r	   <   s   r	   È?   c             C   s
   || _ dS )z Add documentation to a function.N)⁄__doc__)⁄func⁄docr
   r
   r   ⁄_add_docK   s    r   c             C   s   t | É tj|  S )z7Import module, returning the module after the last dot.)⁄
__import__⁄sys⁄modules)⁄namer
   r
   r   ⁄_import_moduleP   s    r   c               @   s   e Zd ZddÑ ZddÑ ZdS )⁄
_LazyDescrc             C   s
   || _ d S )N)r   )r   r   r
   r
   r   ⁄__init__X   s    z_LazyDescr.__init__c             C   sB   | j É }t|| j|É yt|j| jÉ W n tk
r<   Y nX |S )N)⁄_resolve⁄setattrr   ⁄delattr⁄	__class__⁄AttributeError)r   ⁄obj⁄tp⁄resultr
   r
   r   ⁄__get__[   s    z_LazyDescr.__get__N)r   r   r   r   r%   r
   r
   r
   r   r   V   s   r   c                   s.   e Zd Zdá fddÑ	ZddÑ ZddÑ Zá  ZS )	⁄MovedModuleNc                s2   t t| Éj|É tr(|d kr |}|| _n|| _d S )N)⁄superr&   r   ⁄PY3⁄mod)r   r   ⁄old⁄new)r    r
   r   r   i   s    zMovedModule.__init__c             C   s
   t | jÉS )N)r   r)   )r   r
   r
   r   r   r   s    zMovedModule._resolvec             C   s"   | j É }t||É}t| ||É |S )N)r   ⁄getattrr   )r   ⁄attr⁄_module⁄valuer
   r
   r   ⁄__getattr__u   s    
zMovedModule.__getattr__)N)r   r   r   r   r   r0   ⁄__classcell__r
   r
   )r    r   r&   g   s   	r&   c                   s(   e Zd Zá fddÑZddÑ Zg Zá  ZS )⁄_LazyModulec                s   t t| Éj|É | jj| _d S )N)r'   r2   r   r    r   )r   r   )r    r
   r   r   ~   s    z_LazyModule.__init__c             C   s    ddg}|ddÑ | j D É7 }|S )Nr   r   c             S   s   g | ]
}|j ëqS r
   )r   )⁄.0r-   r
   r
   r   ˙
<listcomp>Ñ   s    z'_LazyModule.__dir__.<locals>.<listcomp>)⁄_moved_attributes)r   ⁄attrsr
   r
   r   ⁄__dir__Ç   s    z_LazyModule.__dir__)r   r   r   r   r7   r5   r1   r
   r
   )r    r   r2   |   s   r2   c                   s&   e Zd Zdá fddÑ	ZddÑ Zá  ZS )⁄MovedAttributeNc                sd   t t| Éj|É trH|d kr |}|| _|d kr@|d kr<|}n|}|| _n|| _|d krZ|}|| _d S )N)r'   r8   r   r(   r)   r-   )r   r   ⁄old_mod⁄new_mod⁄old_attr⁄new_attr)r    r
   r   r   ç   s    zMovedAttribute.__init__c             C   s   t | jÉ}t|| jÉS )N)r   r)   r,   r-   )r   ⁄moduler
   r
   r   r   ü   s    
zMovedAttribute._resolve)NN)r   r   r   r   r   r1   r
   r
   )r    r   r8   ã   s   r8   c               @   sV   e Zd ZdZddÑ ZddÑ ZddÑ Zdd	d
ÑZddÑ ZddÑ Z	ddÑ Z
ddÑ ZeZdS )⁄_SixMetaPathImporterzŒ
    A meta path importer to import six.moves and its submodules.

    This class implements a PEP302 finder and loader. It should be compatible
    with Python 2.5 and all existing versions of Python3
    c             C   s   || _ i | _d S )N)r   ⁄known_modules)r   ⁄six_module_namer
   r
   r   r   ≠   s    z_SixMetaPathImporter.__init__c             G   s&   x |D ]}|| j | jd | < qW d S )N⁄.)r?   r   )r   r)   ⁄	fullnames⁄fullnamer
   r
   r   ⁄_add_module±   s    
z _SixMetaPathImporter._add_modulec             C   s   | j | jd |  S )NrA   )r?   r   )r   rC   r
   r
   r   ⁄_get_moduleµ   s    z _SixMetaPathImporter._get_moduleNc             C   s   || j kr| S d S )N)r?   )r   rC   ⁄pathr
   r
   r   ⁄find_module∏   s    
z _SixMetaPathImporter.find_modulec             C   s0   y
| j | S  tk
r*   td| ÉÇY nX d S )Nz!This loader does not know module )r?   ⁄KeyError⁄ImportError)r   rC   r
   r
   r   ⁄__get_moduleΩ   s    
z!_SixMetaPathImporter.__get_modulec             C   sR   y
t j| S  tk
r   Y nX | j|É}t|tÉr>|jÉ }n| |_|t j|< |S )N)r   r   rH   ⁄ _SixMetaPathImporter__get_module⁄
isinstancer&   r   ⁄
__loader__)r   rC   r)   r
   r
   r   ⁄load_module√   s    




z _SixMetaPathImporter.load_modulec             C   s   t | j|ÉdÉS )zû
        Return true, if the named module is a package.

        We need this method to get correct spec objects with
        Python 3.4 (see PEP451)
        ⁄__path__)⁄hasattrrK   )r   rC   r
   r
   r   ⁄
is_package—   s    z_SixMetaPathImporter.is_packagec             C   s   | j |É dS )z;Return None

        Required, if is_package is implementedN)rK   )r   rC   r
   r
   r   ⁄get_code⁄   s    
z_SixMetaPathImporter.get_code)N)r   r   r   r   r   rD   rE   rG   rK   rN   rQ   rR   ⁄
get_sourcer
   r
   r
   r   r>   §   s   
	r>   c               @   s   e Zd ZdZg ZdS )⁄_MovedItemszLazy loading of moved objectsN)r   r   r   r   rO   r
   r
   r
   r   rT   Â   s   rT   ⁄	cStringIO⁄io⁄StringIO⁄filter⁄	itertools⁄builtins⁄ifilter⁄filterfalse⁄ifilterfalse⁄input⁄__builtin__⁄	raw_input⁄internr   ⁄map⁄imap⁄getcwd⁄osZgetcwdu⁄getcwdb⁄range⁄xrangeZreload_module⁄	importlib⁄imp⁄reload⁄reduce⁄	functoolsZshlex_quoteZpipesZshlex⁄quote⁄UserDict⁄collections⁄UserList⁄
UserString⁄zip⁄izip⁄zip_longest⁄izip_longest⁄configparser⁄ConfigParser⁄copyreg⁄copy_regZdbm_gnu⁄gdbmzdbm.gnu⁄_dummy_thread⁄dummy_threadZhttp_cookiejar⁄	cookielibzhttp.cookiejarZhttp_cookies⁄Cookiezhttp.cookiesZhtml_entities⁄htmlentitydefszhtml.entitiesZhtml_parser⁄
HTMLParserzhtml.parserZhttp_client⁄httplibzhttp.clientZemail_mime_multipartzemail.MIMEMultipartzemail.mime.multipartZemail_mime_nonmultipartzemail.MIMENonMultipartzemail.mime.nonmultipartZemail_mime_textzemail.MIMETextzemail.mime.textZemail_mime_basezemail.MIMEBasezemail.mime.base⁄BaseHTTPServerzhttp.server⁄CGIHTTPServer⁄SimpleHTTPServer⁄cPickle⁄pickle⁄queue⁄Queue⁄reprlib⁄repr⁄socketserver⁄SocketServer⁄_thread⁄thread⁄tkinter⁄TkinterZtkinter_dialog⁄Dialogztkinter.dialogZtkinter_filedialog⁄
FileDialogztkinter.filedialogZtkinter_scrolledtext⁄ScrolledTextztkinter.scrolledtextZtkinter_simpledialog⁄SimpleDialogztkinter.simpledialogZtkinter_tix⁄Tixztkinter.tixZtkinter_ttk⁄ttkztkinter.ttkZtkinter_constants⁄Tkconstantsztkinter.constantsZtkinter_dnd⁄Tkdndztkinter.dnd⁄tkinter_colorchooser⁄tkColorChooserztkinter.colorchooser⁄tkinter_commondialog⁄tkCommonDialogztkinter.commondialogZtkinter_tkfiledialog⁄tkFileDialogZtkinter_font⁄tkFontztkinter.fontZtkinter_messagebox⁄tkMessageBoxztkinter.messagebox⁄tkinter_tksimpledialog⁄tkSimpleDialogZurllib_parsez.moves.urllib_parsezurllib.parseZurllib_errorz.moves.urllib_errorzurllib.error⁄urllibz.moves.urllibZurllib_robotparser⁄robotparserzurllib.robotparserZxmlrpc_client⁄	xmlrpclibzxmlrpc.clientZxmlrpc_server⁄SimpleXMLRPCServerzxmlrpc.server⁄win32⁄winreg⁄_winregzmoves.z.moves⁄movesc               @   s   e Zd ZdZdS )⁄Module_six_moves_urllib_parsez7Lazy loading of moved objects in six.moves.urllib_parseN)r   r   r   r   r
   r
   r
   r   r´   @  s   r´   ⁄ParseResult⁄urlparse⁄SplitResult⁄parse_qs⁄	parse_qsl⁄	urldefrag⁄urljoin⁄urlsplit⁄
urlunparse⁄
urlunsplit⁄
quote_plus⁄unquote⁄unquote_plus⁄	urlencode⁄
splitquery⁄splittag⁄	splituser⁄uses_fragment⁄uses_netloc⁄uses_params⁄
uses_query⁄uses_relativezmoves.urllib_parsezmoves.urllib.parsec               @   s   e Zd ZdZdS )⁄Module_six_moves_urllib_errorz7Lazy loading of moved objects in six.moves.urllib_errorN)r   r   r   r   r
   r
   r
   r   r¬   h  s   r¬   ⁄URLError⁄urllib2⁄	HTTPError⁄ContentTooShortErrorz.moves.urllib.errorzmoves.urllib_errorzmoves.urllib.errorc               @   s   e Zd ZdZdS )⁄Module_six_moves_urllib_requestz9Lazy loading of moved objects in six.moves.urllib_requestN)r   r   r   r   r
   r
   r
   r   r«   |  s   r«   ⁄urlopenzurllib.request⁄install_opener⁄build_opener⁄pathname2url⁄url2pathname⁄
getproxies⁄Request⁄OpenerDirector⁄HTTPDefaultErrorHandler⁄HTTPRedirectHandler⁄HTTPCookieProcessor⁄ProxyHandler⁄BaseHandler⁄HTTPPasswordMgr⁄HTTPPasswordMgrWithDefaultRealm⁄AbstractBasicAuthHandler⁄HTTPBasicAuthHandler⁄ProxyBasicAuthHandler⁄AbstractDigestAuthHandler⁄HTTPDigestAuthHandler⁄ProxyDigestAuthHandler⁄HTTPHandler⁄HTTPSHandler⁄FileHandler⁄
FTPHandler⁄CacheFTPHandler⁄UnknownHandler⁄HTTPErrorProcessor⁄urlretrieve⁄
urlcleanup⁄	URLopener⁄FancyURLopener⁄proxy_bypassz.moves.urllib.requestzmoves.urllib_requestzmoves.urllib.requestc               @   s   e Zd ZdZdS )⁄ Module_six_moves_urllib_responsez:Lazy loading of moved objects in six.moves.urllib_responseN)r   r   r   r   r
   r
   r
   r   rÈ   Æ  s   rÈ   ⁄addbasezurllib.response⁄addclosehook⁄addinfo⁄
addinfourlz.moves.urllib.responsezmoves.urllib_responsezmoves.urllib.responsec               @   s   e Zd ZdZdS )⁄#Module_six_moves_urllib_robotparserz=Lazy loading of moved objects in six.moves.urllib_robotparserN)r   r   r   r   r
   r
   r
   r   rÓ   √  s   rÓ   ZRobotFileParserz.moves.urllib.robotparserzmoves.urllib_robotparserzmoves.urllib.robotparserc               @   sN   e Zd ZdZg ZejdÉZejdÉZejdÉZ	ejdÉZ
ejdÉZddÑ Zd	S )
⁄Module_six_moves_urllibzICreate a six.moves.urllib namespace that resembles the Python 3 namespacezmoves.urllib_parsezmoves.urllib_errorzmoves.urllib_requestzmoves.urllib_responsezmoves.urllib_robotparserc             C   s   dddddgS )N⁄parse⁄error⁄request⁄responser§   r
   )r   r
   r
   r   r7   ﬂ  s    zModule_six_moves_urllib.__dir__N)r   r   r   r   rO   ⁄	_importerrE   r   rÒ   rÚ   rÛ   r§   r7   r
   r
   r
   r   rÔ   ’  s   




rÔ   zmoves.urllibc             C   s   t t| j| É dS )zAdd an item to six.moves.N)r   rT   r   )⁄mover
   r
   r   ⁄add_moveÊ  s    rˆ   c             C   sX   yt t| É W nD tk
rR   ytj| = W n" tk
rL   td| f ÉÇY nX Y nX dS )zRemove item from six.moves.zno such move, %rN)r   rT   r!   r™   ⁄__dict__rH   )r   r
   r
   r   ⁄remove_moveÎ  s    r¯   ⁄__func__⁄__self__⁄__closure__⁄__code__⁄__defaults__⁄__globals__⁄im_funcZim_selfZfunc_closure⁄	func_codeZfunc_defaultsZfunc_globalsc             C   s   | j É S )N)⁄next)⁄itr
   r
   r   ⁄advance_iterator  s    r  c             C   s   t ddÑ t| ÉjD ÉÉS )Nc             s   s   | ]}d |j kV  qdS )⁄__call__N)r˜   )r3   ⁄klassr
   r
   r   ˙	<genexpr>  s    zcallable.<locals>.<genexpr>)⁄any⁄type⁄__mro__)r"   r
   r
   r   ⁄callable  s    r
  c             C   s   | S )Nr
   )⁄unboundr
   r
   r   ⁄get_unbound_function  s    r  c             C   s   | S )Nr
   )r   ⁄clsr
   r
   r   ⁄create_unbound_method  s    r  c             C   s   | j S )N)rˇ   )r  r
   r
   r   r  "  s    c             C   s   t j| ||jÉS )N)⁄types⁄
MethodTyper    )r   r"   r
   r
   r   ⁄create_bound_method%  s    r  c             C   s   t j| d |ÉS )N)r  r  )r   r  r
   r
   r   r  (  s    c               @   s   e Zd ZddÑ ZdS )⁄Iteratorc             C   s   t | Éj| ÉS )N)r  ⁄__next__)r   r
   r
   r   r  -  s    zIterator.nextN)r   r   r   r  r
   r
   r
   r   r  +  s   r  z3Get the function out of a possibly unbound functionc             K   s   t | jf |éÉS )N)⁄iter⁄keys)⁄d⁄kwr
   r
   r   ⁄iterkeys>  s    r  c             K   s   t | jf |éÉS )N)r  ⁄values)r  r  r
   r
   r   ⁄
itervaluesA  s    r  c             K   s   t | jf |éÉS )N)r  ⁄items)r  r  r
   r
   r   ⁄	iteritemsD  s    r  c             K   s   t | jf |éÉS )N)r  ⁄lists)r  r  r
   r
   r   ⁄	iterlistsG  s    r  r  r  r  c             K   s   | j f |éS )N)r  )r  r  r
   r
   r   r  P  s    c             K   s   | j f |éS )N)r  )r  r  r
   r
   r   r  S  s    c             K   s   | j f |éS )N)r  )r  r  r
   r
   r   r  V  s    c             K   s   | j f |éS )N)r  )r  r  r
   r
   r   r  Y  s    ⁄viewkeys⁄
viewvalues⁄	viewitemsz1Return an iterator over the keys of a dictionary.z3Return an iterator over the values of a dictionary.z?Return an iterator over the (key, value) pairs of a dictionary.zBReturn an iterator over the (key, [values]) pairs of a dictionary.c             C   s
   | j dÉS )Nzlatin-1)⁄encode)⁄sr
   r
   r   ⁄bk  s    r$  c             C   s   | S )Nr
   )r#  r
   r
   r   ⁄un  s    r%  z>B⁄assertCountEqualZassertRaisesRegexpZassertRegexpMatches⁄assertRaisesRegex⁄assertRegexc             C   s   | S )Nr
   )r#  r
   r
   r   r$  Ç  s    c             C   s   t | jddÉdÉS )Nz\\z\\\\Zunicode_escape)⁄unicode⁄replace)r#  r
   r
   r   r%  Ü  s    c             C   s   t | d ÉS )Nr   )⁄ord)⁄bsr
   r
   r   ⁄byte2intã  s    r-  c             C   s   t | | ÉS )N)r+  )⁄buf⁄ir
   r
   r   ⁄
indexbytesé  s    r0  ZassertItemsEqualzByte literalzText literalc             O   s   t | tÉ||éS )N)r,   ⁄_assertCountEqual)r   ⁄args⁄kwargsr
   r
   r   r&  ö  s    c             O   s   t | tÉ||éS )N)r,   ⁄_assertRaisesRegex)r   r2  r3  r
   r
   r   r'  û  s    c             O   s   t | tÉ||éS )N)r,   ⁄_assertRegex)r   r2  r3  r
   r
   r   r(  ¢  s    ⁄execc             C   s*   |d kr| É }|j |k	r"|j|ÉÇ|Çd S )N)⁄__traceback__⁄with_traceback)r#   r/   ⁄tbr
   r
   r   ⁄reraise©  s
    

r:  c             C   sB   |dkr*t jdÉ}|j}|dkr&|j}~n|dkr6|}tdÉ dS )zExecute code in a namespace.Nr   zexec _code_ in _globs_, _locs_)r   ⁄	_getframe⁄	f_globals⁄f_localsr6  )⁄_code_⁄_globs_⁄_locs_⁄framer
   r
   r   ⁄exec_±  s    
rB  z9def reraise(tp, value, tb=None):
    raise tp, value, tb
zrdef raise_from(value, from_value):
    if from_value is None:
        raise value
    raise value from from_value
zCdef raise_from(value, from_value):
    raise value from from_value
c             C   s   | Çd S )Nr
   )r/   ⁄
from_valuer
   r
   r   ⁄
raise_fromÕ  s    rD  ⁄printc        
         s6  |j dtjÉâ à dkrdS á fddÑ}d}|j ddÉ}|dk	r`t|tÉrNd}nt|tÉs`tdÉÇ|j d	dÉ}|dk	rñt|tÉrÑd}nt|tÉsñtd
ÉÇ|r¢tdÉÇ|sƒx| D ]}t|tÉr¨d}P q¨W |r⁄tdÉ}tdÉ}nd}d}|dkrÓ|}|dkê r¸|}x,t| ÉD ] \}	}|	êr||É ||É êqW ||É dS )z4The new-style print function for Python 2.4 and 2.5.⁄fileNc                sd   t | tÉst| É} t à tÉrVt | tÉrVà jd k	rVtà dd É}|d krHd}| jà j|É} à j| É d S )N⁄errors⁄strict)	rL   ⁄
basestring⁄strrF  r)  ⁄encodingr,   r"  ⁄write)⁄datarG  )⁄fpr
   r   rL  Ÿ  s    



zprint_.<locals>.writeF⁄sepTzsep must be None or a string⁄endzend must be None or a stringz$invalid keyword arguments to print()⁄
˙ )⁄popr   ⁄stdoutrL   r)  rJ  ⁄	TypeError⁄	enumerate)
r2  r3  rL  ⁄want_unicoderO  rP  ⁄arg⁄newline⁄spacer/  r
   )rN  r   ⁄print_”  sL    







r[  c              O   s<   |j dtjÉ}|jddÉ}t| |é |r8|d k	r8|jÉ  d S )NrF  ⁄flushF)⁄getr   rT  rS  ⁄_printr\  )r2  r3  rN  r\  r
   r
   r   r[    s
    
zReraise an exception.c                s   á ááfddÑ}|S )Nc                s   t jàà àÉ| É} à| _| S )N)rm   ⁄wraps⁄__wrapped__)⁄f)⁄assigned⁄updated⁄wrappedr
   r   ⁄wrapper  s    zwraps.<locals>.wrapperr
   )rd  rb  rc  re  r
   )rb  rc  rd  r   r_    s    r_  c                s&   G á áfddÑdàÉ}t j|df i ÉS )z%Create a base class with a metaclass.c                   s   e Zd Zá áfddÑZdS )z!with_metaclass.<locals>.metaclassc                s   à|à |ÉS )Nr
   )r  r   ⁄
this_basesr  )⁄bases⁄metar
   r   ⁄__new__'  s    z)with_metaclass.<locals>.metaclass.__new__N)r   r   r   ri  r
   )rg  rh  r
   r   ⁄	metaclass%  s   rj  Ztemporary_class)r  ri  )rh  rg  rj  r
   )rg  rh  r   ⁄with_metaclass   s    rk  c                s   á fddÑ}|S )z6Class decorator for creating a class with a metaclass.c                sl   | j jÉ }|jdÉ}|d k	rDt|tÉr,|g}x|D ]}|j|É q2W |jdd É |jdd É à | j| j|ÉS )N⁄	__slots__r˜   ⁄__weakref__)r˜   ⁄copyr]  rL   rJ  rS  r   ⁄	__bases__)r  ⁄	orig_vars⁄slots⁄	slots_var)rj  r
   r   re  .  s    



zadd_metaclass.<locals>.wrapperr
   )rj  re  r
   )rj  r   ⁄add_metaclass,  s    rs  c             C   s2   t r.d| jkrtd| j ÉÇ| j| _ddÑ | _| S )a   
    A decorator that defines __unicode__ and __str__ methods under Python 2.
    Under Python 3 it does nothing.

    To support Python 2 and 3 with a single code base, define a __str__ method
    returning text and apply this decorator to the class.
    ⁄__str__zY@python_2_unicode_compatible cannot be applied to %s because it doesn't define __str__().c             S   s   | j É jdÉS )Nzutf-8)⁄__unicode__r"  )r   r
   r
   r   ⁄<lambda>J  s    z-python_2_unicode_compatible.<locals>.<lambda>)⁄PY2r˜   ⁄
ValueErrorr   rt  ru  )r  r
   r
   r   ⁄python_2_unicode_compatible<  s    


ry  ⁄__spec__)r   r   l        iˇˇˇl        iˇˇˇl            l   ˇˇˇˇ )N)NN)r   r   )r   r   )r   r   )r   r   )ír   ⁄
__future__r   rm   rY   ⁄operatorr   r  ⁄
__author__⁄__version__⁄version_inforw  r(   ⁄PY34rJ  ⁄string_types⁄int⁄integer_typesr  ⁄class_types⁄	text_type⁄bytes⁄binary_type⁄maxsize⁄MAXSIZErI  ⁄long⁄	ClassTyper)  ⁄platform⁄
startswith⁄objectr	   ⁄len⁄OverflowErrorr   r   r   r&   ⁄
ModuleTyper2   r8   r>   r   rÙ   rT   r5   r-   r   r   rL   rD   r™   r´   ⁄_urllib_parse_moved_attributesr¬   ⁄_urllib_error_moved_attributesr«   ⁄ _urllib_request_moved_attributesrÈ   ⁄!_urllib_response_moved_attributesrÓ   ⁄$_urllib_robotparser_moved_attributesrÔ   rˆ   r¯   ⁄
_meth_func⁄
_meth_self⁄_func_closure⁄
_func_code⁄_func_defaults⁄_func_globalsr  r  ⁄	NameErrorr
  r  r  r  r  r  ⁄
attrgetter⁄get_method_function⁄get_method_self⁄get_function_closure⁄get_function_code⁄get_function_defaults⁄get_function_globalsr  r  r  r  ⁄methodcallerr  r   r!  r$  r%  ⁄chr⁄unichr⁄struct⁄Struct⁄pack⁄int2byte⁄
itemgetterr-  ⁄getitemr0  r  ⁄	iterbytesrV   rW   ⁄BytesIOr1  r4  r5  ⁄partialrc   r+  r&  r'  r(  r,   rZ   rB  r:  rD  r[  r^  ⁄WRAPPER_ASSIGNMENTS⁄WRAPPER_UPDATESr_  rk  rs  ry  rO   ⁄__package__⁄globalsr]  rz  ⁄submodule_search_locations⁄	meta_pathrV  r/  ⁄importer⁄appendr
   r
   r
   r   ⁄<module>   s   

>











































































































5„               @   s,   d dl Z G ddÑ dÉZdZeeeÉjÉ  dS )	È    Nc               @   sD   e Zd ZdZf dfddÑZeddÑ ÉZdddÑZd	d
Ñ ZddÑ Z	dS )⁄VendorImporterzÑ
    A PEP 302 meta path importer for finding optionally-vendored
    or otherwise naturally-installed packages from root_name.
    Nc             C   s&   || _ t|É| _|p|jddÉ| _d S )N⁄externZ_vendor)⁄	root_name⁄set⁄vendored_names⁄replace⁄
vendor_pkg)⁄selfr   r   r   © r
   ˙?/usr/lib/python3/dist-packages/pkg_resources/extern/__init__.py⁄__init__
   s    
zVendorImporter.__init__c             c   s   | j d V  dV  dS )zL
        Search first the vendor package then as a natural package.
        ⁄.⁄ N)r   )r	   r
   r
   r   ⁄search_path   s    zVendorImporter.search_pathc             C   s8   |j | jd É\}}}|rdS tt|j| jÉÉs4dS | S )zÜ
        Return self when fullname starts with root_name and the
        target module is one vendored through this importer.
        r   N)⁄	partitionr   ⁄any⁄map⁄
startswithr   )r	   ⁄fullname⁄path⁄root⁄base⁄targetr
   r
   r   ⁄find_module   s    zVendorImporter.find_modulec             C   så   |j | jd É\}}}xp| jD ]T}y:|| }t|É tj| }|tj|< tjdkrZtj|= |S  tk
rp   Y qX qW tdjf t	É éÉÇdS )zK
        Iterate over the search path to locate and load fullname.
        r   È   zïThe '{target}' package is required; normally this is bundled with this package so if you get this warning, consult the packager of your distribution.N)r   r   )
r   r   r   ⁄
__import__⁄sys⁄modules⁄version_info⁄ImportError⁄format⁄locals)r	   r   r   r   r   ⁄prefix⁄extant⁄modr
   r
   r   ⁄load_module#   s    



zVendorImporter.load_modulec             C   s   | t jkrt jj| É dS )zR
        Install this importer into sys.meta_path if not already present.
        N)r   ⁄	meta_path⁄append)r	   r
   r
   r   ⁄install@   s    
zVendorImporter.install)N)
⁄__name__⁄
__module__⁄__qualname__⁄__doc__r   ⁄propertyr   r   r%   r(   r
   r
   r
   r   r      s   
r   ⁄	packaging⁄	pyparsing⁄six⁄appdirs)r.   r/   r0   r1   )r   r   ⁄namesr)   r(   r
   r
   r
   r   ⁄<module>   s   D„               @   sr   d dl Z d dlZd dlZdddÑZejdk p^dej  ko@dk n  p^dej  koZdk n  Zerhene jZdS )È    NFc             C   sJ   yt j| É W n6 tk
rD } z| s2|jtjkr4Ç W Y d d }~X nX d S )N)⁄os⁄makedirs⁄OSError⁄errno⁄EEXIST)⁄path⁄exist_ok⁄exc© r
   ˙:/usr/lib/python3/dist-packages/pkg_resources/py31compat.py⁄_makedirs_31   s
    r   È   È   È   È   È   È   )F)r   r   r   )r   r   )r   r   r   )r   r   )r   r   r   )r   r   ⁄sysr   ⁄version_info⁄needs_makedirsr   r
   r
   r
   r   ⁄<module>   s   

